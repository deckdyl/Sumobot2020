
DylanDrive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb70  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  0800fd48  0800fd48  0001fd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fef4  0800fef4  000205ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800fef4  0800fef4  0001fef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fefc  0800fefc  000205ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fefc  0800fefc  0001fefc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff00  0800ff00  0001ff00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ec  20000000  0800ff04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d8  200005ec  080104f0  000205ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bc4  080104f0  00020bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002b2cc  00000000  00000000  0002061c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0004ed19  00000000  00000000  0004b8e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000669f  00000000  00000000  0009a601  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000027e0  00000000  00000000  000a0ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00104836  00000000  00000000  000a3480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000024d0  00000000  00000000  001a7cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002d0e0  00000000  00000000  001aa188  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f7  00000000  00000000  001d7268  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a904  00000000  00000000  001d7360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200005ec 	.word	0x200005ec
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800fd30 	.word	0x0800fd30

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200005f0 	.word	0x200005f0
 8000214:	0800fd30 	.word	0x0800fd30

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x6>)
  ldr r1, =_edata
 800051e:	490e      	ldr	r1, [pc, #56]	; (8000558 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <LoopForever+0xe>)
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000524:	e002      	b.n	800052c <LoopCopyDataInit>

08000526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052a:	3304      	adds	r3, #4

0800052c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800052c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000530:	d3f9      	bcc.n	8000526 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000534:	4c0b      	ldr	r4, [pc, #44]	; (8000564 <LoopForever+0x16>)
  movs r3, #0
 8000536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000538:	e001      	b.n	800053e <LoopFillZerobss>

0800053a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800053c:	3204      	adds	r2, #4

0800053e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000540:	d3fb      	bcc.n	800053a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000542:	f004 fe5f 	bl	8005204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000546:	f00f fbc7 	bl	800fcd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054a:	f000 f88d 	bl	8000668 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   r0, =_estack
 8000550:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000554:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000558:	200005ec 	.word	0x200005ec
  ldr r2, =_sidata
 800055c:	0800ff04 	.word	0x0800ff04
  ldr r2, =_sbss
 8000560:	200005ec 	.word	0x200005ec
  ldr r4, =_ebss
 8000564:	20000bc4 	.word	0x20000bc4

08000568 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <BusFault_Handler>

0800056a <LL_DAC_Enable>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800056a:	b480      	push	{r7}
 800056c:	b083      	sub	sp, #12
 800056e:	af00      	add	r7, sp, #0
 8000570:	6078      	str	r0, [r7, #4]
 8000572:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	2101      	movs	r1, #1
 8000580:	fa01 f303 	lsl.w	r3, r1, r3
 8000584:	431a      	orrs	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	601a      	str	r2, [r3, #0]
          DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK));
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr

08000596 <LL_DAC_TrigSWConversion>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_TrigSWConversion(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 8000596:	b480      	push	{r7}
 8000598:	b083      	sub	sp, #12
 800059a:	af00      	add	r7, sp, #0
 800059c:	6078      	str	r0, [r7, #4]
 800059e:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->SWTRIGR,
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685a      	ldr	r2, [r3, #4]
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	f003 0303 	and.w	r3, r3, #3
 80005aa:	431a      	orrs	r2, r3
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	605a      	str	r2, [r3, #4]
          (DAC_Channel & DAC_SWTR_CHX_MASK));
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LL_DAC_ConvertData12LeftAligned>:
  *             Refer to device datasheet for channels availability.
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
 80005bc:	b480      	push	{r7}
 80005be:	b087      	sub	sp, #28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	60f8      	str	r0, [r7, #12]
 80005c4:	60b9      	str	r1, [r7, #8]
 80005c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3308      	adds	r3, #8
 80005cc:	461a      	mov	r2, r3
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	0d1b      	lsrs	r3, r3, #20
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80005d8:	4413      	add	r3, r2
 80005da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80005e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80005e8:	687a      	ldr	r2, [r7, #4]
 80005ea:	431a      	orrs	r2, r3
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	601a      	str	r2, [r3, #0]
             DAC_DHR12L1_DACC1DHR,
             Data);
}
 80005f0:	bf00      	nop
 80005f2:	371c      	adds	r7, #28
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <DAC_Init>:
  * @brief  Hardware and software initialization of the DAC object. This is the
  *         implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{  
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* Enable DAC Channel1 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
 8000604:	4903      	ldr	r1, [pc, #12]	; (8000614 <DAC_Init+0x18>)
 8000606:	4804      	ldr	r0, [pc, #16]	; (8000618 <DAC_Init+0x1c>)
 8000608:	f7ff ffaf 	bl	800056a <LL_DAC_Enable>
}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	02110001 	.word	0x02110001
 8000618:	50000800 	.word	0x50000800

0800061c <DAC_Exec>:
  *         variables will be provided in the related output channels. This is 
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance. 
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b084      	sub	sp, #16
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	60fb      	str	r3, [r7, #12]
  MC_Protocol_REG_t bCh_var;
  
  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800062e:	72fb      	strb	r3, [r7, #11]
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8000630:	7afb      	ldrb	r3, [r7, #11]
 8000632:	2200      	movs	r2, #0
 8000634:	4619      	mov	r1, r3
 8000636:	6878      	ldr	r0, [r7, #4]
 8000638:	f004 f8d8 	bl	80047ec <UI_GetReg>
 800063c:	4603      	mov	r3, r0
 800063e:	b21b      	sxth	r3, r3
 8000640:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
 8000644:	461a      	mov	r2, r3
 8000646:	4906      	ldr	r1, [pc, #24]	; (8000660 <DAC_Exec+0x44>)
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <DAC_Exec+0x48>)
 800064a:	f7ff ffb7 	bl	80005bc <LL_DAC_ConvertData12LeftAligned>
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
 800064e:	4904      	ldr	r1, [pc, #16]	; (8000660 <DAC_Exec+0x44>)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <DAC_Exec+0x48>)
 8000652:	f7ff ffa0 	bl	8000596 <LL_DAC_TrigSWConversion>
}
 8000656:	bf00      	nop
 8000658:	3710      	adds	r7, #16
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	02110001 	.word	0x02110001
 8000664:	50000800 	.word	0x50000800

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f004 fde0 	bl	8005230 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f823 	bl	80006ba <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 fd52 	bl	800111c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000678:	f000 f8b4 	bl	80007e4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800067c:	f000 f97e 	bl	800097c <MX_ADC2_Init>
  MX_COMP1_Init();
 8000680:	f000 fa00 	bl	8000a84 <MX_COMP1_Init>
  MX_COMP2_Init();
 8000684:	f000 fa24 	bl	8000ad0 <MX_COMP2_Init>
  MX_COMP4_Init();
 8000688:	f000 fa48 	bl	8000b1c <MX_COMP4_Init>
  MX_CORDIC_Init();
 800068c:	f000 fa6c 	bl	8000b68 <MX_CORDIC_Init>
  MX_DAC1_Init();
 8000690:	f000 fa7e 	bl	8000b90 <MX_DAC1_Init>
  MX_FDCAN1_Init();
 8000694:	f000 fab6 	bl	8000c04 <MX_FDCAN1_Init>
  MX_OPAMP1_Init();
 8000698:	f000 fafa 	bl	8000c90 <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 800069c:	f000 fb26 	bl	8000cec <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 80006a0:	f000 fb52 	bl	8000d48 <MX_OPAMP3_Init>
  MX_TIM1_Init();
 80006a4:	f000 fb7e 	bl	8000da4 <MX_TIM1_Init>
  MX_TIM4_Init();
 80006a8:	f000 fc96 	bl	8000fd8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80006ac:	f000 fcea 	bl	8001084 <MX_USART2_UART_Init>
  MX_MotorControl_Init();
 80006b0:	f002 fd94 	bl	80031dc <MX_MotorControl_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80006b4:	f000 f86a 	bl	800078c <MX_NVIC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b8:	e7fe      	b.n	80006b8 <main+0x50>

080006ba <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b0a4      	sub	sp, #144	; 0x90
 80006be:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006c4:	2238      	movs	r2, #56	; 0x38
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f00f fb29 	bl	800fd20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ce:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006de:	463b      	mov	r3, r7
 80006e0:	2244      	movs	r2, #68	; 0x44
 80006e2:	2100      	movs	r1, #0
 80006e4:	4618      	mov	r0, r3
 80006e6:	f00f fb1b 	bl	800fd20 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006ea:	2000      	movs	r0, #0
 80006ec:	f007 fbb4 	bl	8007e58 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006f0:	2301      	movs	r3, #1
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fa:	2302      	movs	r3, #2
 80006fc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fe:	2303      	movs	r3, #3
 8000700:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000702:	2302      	movs	r3, #2
 8000704:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000706:	2355      	movs	r3, #85	; 0x55
 8000708:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800070c:	2308      	movs	r3, #8
 800070e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000712:	2302      	movs	r3, #2
 8000714:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000718:	2302      	movs	r3, #2
 800071a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000722:	4618      	mov	r0, r3
 8000724:	f007 fc3c 	bl	8007fa0 <HAL_RCC_OscConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800072e:	f000 fd31 	bl	8001194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000732:	230f      	movs	r3, #15
 8000734:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000736:	2303      	movs	r3, #3
 8000738:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000746:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800074a:	2108      	movs	r1, #8
 800074c:	4618      	mov	r0, r3
 800074e:	f007 ff3f 	bl	80085d0 <HAL_RCC_ClockConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000758:	f000 fd1c 	bl	8001194 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 800075c:	f249 0302 	movw	r3, #36866	; 0x9002
 8000760:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000766:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800076a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800076c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000770:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000772:	463b      	mov	r3, r7
 8000774:	4618      	mov	r0, r3
 8000776:	f008 f947 	bl	8008a08 <HAL_RCCEx_PeriphCLKConfig>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000780:	f000 fd08 	bl	8001194 <Error_Handler>
  }
}
 8000784:	bf00      	nop
 8000786:	3790      	adds	r7, #144	; 0x90
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* TIM1_BRK_TIM15_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000790:	2201      	movs	r2, #1
 8000792:	2104      	movs	r1, #4
 8000794:	2018      	movs	r0, #24
 8000796:	f006 fd4e 	bl	8007236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800079a:	2018      	movs	r0, #24
 800079c:	f006 fd65 	bl	800726a <HAL_NVIC_EnableIRQ>
  /* TIM1_UP_TIM16_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2100      	movs	r1, #0
 80007a4:	2019      	movs	r0, #25
 80007a6:	f006 fd46 	bl	8007236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80007aa:	2019      	movs	r0, #25
 80007ac:	f006 fd5d 	bl	800726a <HAL_NVIC_EnableIRQ>
  /* ADC1_2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80007b0:	2200      	movs	r2, #0
 80007b2:	2102      	movs	r1, #2
 80007b4:	2012      	movs	r0, #18
 80007b6:	f006 fd3e 	bl	8007236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80007ba:	2012      	movs	r0, #18
 80007bc:	f006 fd55 	bl	800726a <HAL_NVIC_EnableIRQ>
  /* TIM4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2103      	movs	r1, #3
 80007c4:	201e      	movs	r0, #30
 80007c6:	f006 fd36 	bl	8007236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80007ca:	201e      	movs	r0, #30
 80007cc:	f006 fd4d 	bl	800726a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80007d0:	2201      	movs	r2, #1
 80007d2:	2103      	movs	r1, #3
 80007d4:	2026      	movs	r0, #38	; 0x26
 80007d6:	f006 fd2e 	bl	8007236 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80007da:	2026      	movs	r0, #38	; 0x26
 80007dc:	f006 fd45 	bl	800726a <HAL_NVIC_EnableIRQ>
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09a      	sub	sp, #104	; 0x68
 80007e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007f6:	f107 0320 	add.w	r3, r7, #32
 80007fa:	223c      	movs	r2, #60	; 0x3c
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f00f fa8e 	bl	800fd20 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000804:	463b      	mov	r3, r7
 8000806:	2220      	movs	r2, #32
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00f fa88 	bl	800fd20 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000810:	4b55      	ldr	r3, [pc, #340]	; (8000968 <MX_ADC1_Init+0x184>)
 8000812:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000816:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000818:	4b53      	ldr	r3, [pc, #332]	; (8000968 <MX_ADC1_Init+0x184>)
 800081a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800081e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000820:	4b51      	ldr	r3, [pc, #324]	; (8000968 <MX_ADC1_Init+0x184>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000826:	4b50      	ldr	r3, [pc, #320]	; (8000968 <MX_ADC1_Init+0x184>)
 8000828:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800082c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800082e:	4b4e      	ldr	r3, [pc, #312]	; (8000968 <MX_ADC1_Init+0x184>)
 8000830:	2200      	movs	r2, #0
 8000832:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000834:	4b4c      	ldr	r3, [pc, #304]	; (8000968 <MX_ADC1_Init+0x184>)
 8000836:	2201      	movs	r2, #1
 8000838:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083a:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <MX_ADC1_Init+0x184>)
 800083c:	2204      	movs	r2, #4
 800083e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000840:	4b49      	ldr	r3, [pc, #292]	; (8000968 <MX_ADC1_Init+0x184>)
 8000842:	2200      	movs	r2, #0
 8000844:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000846:	4b48      	ldr	r3, [pc, #288]	; (8000968 <MX_ADC1_Init+0x184>)
 8000848:	2200      	movs	r2, #0
 800084a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800084c:	4b46      	ldr	r3, [pc, #280]	; (8000968 <MX_ADC1_Init+0x184>)
 800084e:	2202      	movs	r2, #2
 8000850:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000852:	4b45      	ldr	r3, [pc, #276]	; (8000968 <MX_ADC1_Init+0x184>)
 8000854:	2200      	movs	r2, #0
 8000856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800085a:	4b43      	ldr	r3, [pc, #268]	; (8000968 <MX_ADC1_Init+0x184>)
 800085c:	2200      	movs	r2, #0
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000860:	4b41      	ldr	r3, [pc, #260]	; (8000968 <MX_ADC1_Init+0x184>)
 8000862:	2200      	movs	r2, #0
 8000864:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000866:	4b40      	ldr	r3, [pc, #256]	; (8000968 <MX_ADC1_Init+0x184>)
 8000868:	2200      	movs	r2, #0
 800086a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086e:	4b3e      	ldr	r3, [pc, #248]	; (8000968 <MX_ADC1_Init+0x184>)
 8000870:	2200      	movs	r2, #0
 8000872:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000874:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_ADC1_Init+0x184>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	483a      	ldr	r0, [pc, #232]	; (8000968 <MX_ADC1_Init+0x184>)
 800087e:	f004 ff2b 	bl	80056d8 <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000888:	f000 fc84 	bl	8001194 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800088c:	2300      	movs	r3, #0
 800088e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000890:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000894:	4619      	mov	r1, r3
 8000896:	4834      	ldr	r0, [pc, #208]	; (8000968 <MX_ADC1_Init+0x184>)
 8000898:	f006 f99c 	bl	8006bd4 <HAL_ADCEx_MultiModeConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80008a2:	f000 fc77 	bl	8001194 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80008a6:	4b31      	ldr	r3, [pc, #196]	; (800096c <MX_ADC1_Init+0x188>)
 80008a8:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80008aa:	2309      	movs	r3, #9
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80008ae:	2301      	movs	r3, #1
 80008b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80008b2:	237f      	movs	r3, #127	; 0x7f
 80008b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 80008b6:	2304      	movs	r3, #4
 80008b8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjectedOffset = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigInjected.InjectedNbrOfConversion = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  sConfigInjected.AutoInjectedConv = DISABLE;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  sConfigInjected.QueueInjectedContext = DISABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 80008d4:	2384      	movs	r3, #132	; 0x84
 80008d6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80008d8:	2380      	movs	r3, #128	; 0x80
 80008da:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80008dc:	2300      	movs	r3, #0
 80008de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	4619      	mov	r1, r3
 80008e8:	481f      	ldr	r0, [pc, #124]	; (8000968 <MX_ADC1_Init+0x184>)
 80008ea:	f005 fd1b 	bl	8006324 <HAL_ADCEx_InjectedConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80008f4:	f000 fc4e 	bl	8001194 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 80008f8:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_ADC1_Init+0x18c>)
 80008fa:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80008fc:	f240 130f 	movw	r3, #271	; 0x10f
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000902:	f107 0320 	add.w	r3, r7, #32
 8000906:	4619      	mov	r1, r3
 8000908:	4817      	ldr	r0, [pc, #92]	; (8000968 <MX_ADC1_Init+0x184>)
 800090a:	f005 fd0b 	bl	8006324 <HAL_ADCEx_InjectedConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000914:	f000 fc3e 	bl	8001194 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000918:	4b16      	ldr	r3, [pc, #88]	; (8000974 <MX_ADC1_Init+0x190>)
 800091a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800091c:	2306      	movs	r3, #6
 800091e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8000920:	2304      	movs	r3, #4
 8000922:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000924:	237f      	movs	r3, #127	; 0x7f
 8000926:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000928:	2304      	movs	r3, #4
 800092a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	480c      	ldr	r0, [pc, #48]	; (8000968 <MX_ADC1_Init+0x184>)
 8000936:	f005 f857 	bl	80059e8 <HAL_ADC_ConfigChannel>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8000940:	f000 fc28 	bl	8001194 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <MX_ADC1_Init+0x194>)
 8000946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000948:	230c      	movs	r3, #12
 800094a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800094c:	463b      	mov	r3, r7
 800094e:	4619      	mov	r1, r3
 8000950:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_ADC1_Init+0x184>)
 8000952:	f005 f849 	bl	80059e8 <HAL_ADC_ConfigChannel>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 800095c:	f000 fc1a 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	3768      	adds	r7, #104	; 0x68
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200007e4 	.word	0x200007e4
 800096c:	0c900008 	.word	0x0c900008
 8000970:	32601000 	.word	0x32601000
 8000974:	04300002 	.word	0x04300002
 8000978:	14f00020 	.word	0x14f00020

0800097c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b090      	sub	sp, #64	; 0x40
 8000980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	223c      	movs	r2, #60	; 0x3c
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f00f f9c9 	bl	800fd20 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config 
  */
  hadc2.Instance = ADC2;
 800098e:	4b39      	ldr	r3, [pc, #228]	; (8000a74 <MX_ADC2_Init+0xf8>)
 8000990:	4a39      	ldr	r2, [pc, #228]	; (8000a78 <MX_ADC2_Init+0xfc>)
 8000992:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000994:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <MX_ADC2_Init+0xf8>)
 8000996:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800099a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800099c:	4b35      	ldr	r3, [pc, #212]	; (8000a74 <MX_ADC2_Init+0xf8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80009aa:	4b32      	ldr	r3, [pc, #200]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80009b0:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009b8:	2204      	movs	r2, #4
 80009ba:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80009bc:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009be:	2200      	movs	r2, #0
 80009c0:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80009c2:	4b2c      	ldr	r3, [pc, #176]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80009c8:	4b2a      	ldr	r3, [pc, #168]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80009d6:	4b27      	ldr	r3, [pc, #156]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009de:	4b25      	ldr	r3, [pc, #148]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80009e4:	4b23      	ldr	r3, [pc, #140]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80009ec:	4821      	ldr	r0, [pc, #132]	; (8000a74 <MX_ADC2_Init+0xf8>)
 80009ee:	f004 fe73 	bl	80056d8 <HAL_ADC_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 80009f8:	f000 fbcc 	bl	8001194 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 80009fc:	4b1f      	ldr	r3, [pc, #124]	; (8000a7c <MX_ADC2_Init+0x100>)
 80009fe:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000a00:	2309      	movs	r3, #9
 8000a02:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000a04:	2301      	movs	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000a08:	237f      	movs	r3, #127	; 0x7f
 8000a0a:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	61bb      	str	r3, [r7, #24]
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sConfigInjected.AutoInjectedConv = DISABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8000a2a:	2384      	movs	r3, #132	; 0x84
 8000a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8000a2e:	2380      	movs	r3, #128	; 0x80
 8000a30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000a32:	2300      	movs	r3, #0
 8000a34:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	480d      	ldr	r0, [pc, #52]	; (8000a74 <MX_ADC2_Init+0xf8>)
 8000a3e:	f005 fc71 	bl	8006324 <HAL_ADCEx_InjectedConfigChannel>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8000a48:	f000 fba4 	bl	8001194 <Error_Handler>
  }
  /** Configure Injected Channel 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_ADC2_Init+0x104>)
 8000a4e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8000a50:	f240 130f 	movw	r3, #271	; 0x10f
 8000a54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <MX_ADC2_Init+0xf8>)
 8000a5c:	f005 fc62 	bl	8006324 <HAL_ADCEx_InjectedConfigChannel>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 8000a66:	f000 fb95 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000a6a:	bf00      	nop
 8000a6c:	3740      	adds	r7, #64	; 0x40
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200006b8 	.word	0x200006b8
 8000a78:	50000100 	.word	0x50000100
 8000a7c:	0c900008 	.word	0x0c900008
 8000a80:	cb8c0000 	.word	0xcb8c0000

08000a84 <MX_COMP1_Init>:
  * @brief COMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_COMP1_Init+0x44>)
 8000a8a:	4a10      	ldr	r2, [pc, #64]	; (8000acc <MX_COMP1_Init+0x48>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000a8e:	4b0e      	ldr	r3, [pc, #56]	; (8000ac8 <MX_COMP1_Init+0x44>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_COMP1_Init+0x44>)
 8000a96:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000a9a:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_COMP1_Init+0x44>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_COMP1_Init+0x44>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_COMP1_Init+0x44>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_COMP1_Init+0x44>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_COMP1_Init+0x44>)
 8000ab6:	f006 f9d5 	bl	8006e64 <HAL_COMP_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8000ac0:	f000 fb68 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000760 	.word	0x20000760
 8000acc:	40010200 	.word	0x40010200

08000ad0 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_COMP2_Init+0x44>)
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <MX_COMP2_Init+0x48>)
 8000ad8:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_COMP2_Init+0x44>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	605a      	str	r2, [r3, #4]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_COMP2_Init+0x44>)
 8000ae2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000ae6:	609a      	str	r2, [r3, #8]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_COMP2_Init+0x44>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_COMP2_Init+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  hcomp2.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_COMP2_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_COMP2_Init+0x44>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_COMP2_Init+0x44>)
 8000b02:	f006 f9af 	bl	8006e64 <HAL_COMP_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_COMP2_Init+0x40>
  {
    Error_Handler();
 8000b0c:	f000 fb42 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000091c 	.word	0x2000091c
 8000b18:	40010204 	.word	0x40010204

08000b1c <MX_COMP4_Init>:
  * @brief COMP4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP4_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END COMP4_Init 0 */

  /* USER CODE BEGIN COMP4_Init 1 */

  /* USER CODE END COMP4_Init 1 */
  hcomp4.Instance = COMP4;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_COMP4_Init+0x44>)
 8000b22:	4a10      	ldr	r2, [pc, #64]	; (8000b64 <MX_COMP4_Init+0x48>)
 8000b24:	601a      	str	r2, [r3, #0]
  hcomp4.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_COMP4_Init+0x44>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	605a      	str	r2, [r3, #4]
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_1_4VREFINT;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_COMP4_Init+0x44>)
 8000b2e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000b32:	609a      	str	r2, [r3, #8]
  hcomp4.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000b34:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <MX_COMP4_Init+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	611a      	str	r2, [r3, #16]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_COMP4_Init+0x44>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	60da      	str	r2, [r3, #12]
  hcomp4.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <MX_COMP4_Init+0x44>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	615a      	str	r2, [r3, #20]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000b46:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_COMP4_Init+0x44>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_COMP4_Init+0x44>)
 8000b4e:	f006 f989 	bl	8006e64 <HAL_COMP_Init>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_COMP4_Init+0x40>
  {
    Error_Handler();
 8000b58:	f000 fb1c 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN COMP4_Init 2 */

  /* USER CODE END COMP4_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	200007c0 	.word	0x200007c0
 8000b64:	4001020c 	.word	0x4001020c

08000b68 <MX_CORDIC_Init>:
  * @brief CORDIC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CORDIC_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END CORDIC_Init 0 */

  /* USER CODE BEGIN CORDIC_Init 1 */

  /* USER CODE END CORDIC_Init 1 */
  hcordic.Instance = CORDIC;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <MX_CORDIC_Init+0x20>)
 8000b6e:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <MX_CORDIC_Init+0x24>)
 8000b70:	601a      	str	r2, [r3, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8000b72:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_CORDIC_Init+0x20>)
 8000b74:	f006 fa52 	bl	800701c <HAL_CORDIC_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_CORDIC_Init+0x1a>
  {
    Error_Handler();
 8000b7e:	f000 fb09 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN CORDIC_Init 2 */

  /* USER CODE END CORDIC_Init 2 */

}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000850 	.word	0x20000850
 8000b8c:	40020c00 	.word	0x40020c00

08000b90 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08c      	sub	sp, #48	; 0x30
 8000b94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b96:	463b      	mov	r3, r7
 8000b98:	2230      	movs	r2, #48	; 0x30
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f00f f8bf 	bl	800fd20 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000ba2:	4b16      	ldr	r3, [pc, #88]	; (8000bfc <MX_DAC1_Init+0x6c>)
 8000ba4:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <MX_DAC1_Init+0x70>)
 8000ba6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000ba8:	4814      	ldr	r0, [pc, #80]	; (8000bfc <MX_DAC1_Init+0x6c>)
 8000baa:	f006 fb85 	bl	80072b8 <HAL_DAC_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000bb4:	f000 faee 	bl	8001194 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bdc:	463b      	mov	r3, r7
 8000bde:	2200      	movs	r2, #0
 8000be0:	4619      	mov	r1, r3
 8000be2:	4806      	ldr	r0, [pc, #24]	; (8000bfc <MX_DAC1_Init+0x6c>)
 8000be4:	f006 fb8a 	bl	80072fc <HAL_DAC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000bee:	f000 fad1 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	3730      	adds	r7, #48	; 0x30
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200006a4 	.word	0x200006a4
 8000c00:	50000800 	.word	0x50000800

08000c04 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <MX_FDCAN1_Init+0x88>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000c0e:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c1a:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c20:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000c32:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c40:	2202      	movs	r2, #2
 8000c42:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c44:	4b10      	ldr	r3, [pc, #64]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c50:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c58:	2201      	movs	r2, #1
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000c68:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000c74:	4804      	ldr	r0, [pc, #16]	; (8000c88 <MX_FDCAN1_Init+0x84>)
 8000c76:	f006 fced 	bl	8007654 <HAL_FDCAN_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000c80:	f000 fa88 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000878 	.word	0x20000878
 8000c8c:	40006400 	.word	0x40006400

08000c90 <MX_OPAMP1_Init>:
  * @brief OPAMP1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP1_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000c96:	4a14      	ldr	r2, [pc, #80]	; (8000ce8 <MX_OPAMP1_Init+0x58>)
 8000c98:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000c9a:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8000ca0:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000ca2:	2240      	movs	r2, #64	; 0x40
 8000ca4:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000ca6:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8000cac:	4b0d      	ldr	r3, [pc, #52]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000cb2:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000cba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000cc2:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000cc6:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_OPAMP1_Init+0x54>)
 8000cd0:	f006 fff2 	bl	8007cb8 <HAL_OPAMP_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8000cda:	f000 fa5b 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000784 	.word	0x20000784
 8000ce8:	40010300 	.word	0x40010300

08000cec <MX_OPAMP2_Init>:
  * @brief OPAMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8000cf0:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000cf2:	4a14      	ldr	r2, [pc, #80]	; (8000d44 <MX_OPAMP2_Init+0x58>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8000cfc:	4b10      	ldr	r3, [pc, #64]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000cfe:	2240      	movs	r2, #64	; 0x40
 8000d00:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8000d08:	4b0d      	ldr	r3, [pc, #52]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000d16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000d1e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d22:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d24:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8000d2a:	4805      	ldr	r0, [pc, #20]	; (8000d40 <MX_OPAMP2_Init+0x54>)
 8000d2c:	f006 ffc4 	bl	8007cb8 <HAL_OPAMP_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8000d36:	f000 fa2d 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000628 	.word	0x20000628
 8000d44:	40010304 	.word	0x40010304

08000d48 <MX_OPAMP3_Init>:
  * @brief OPAMP3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OPAMP3_Init(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8000d4c:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d4e:	4a14      	ldr	r2, [pc, #80]	; (8000da0 <MX_OPAMP3_Init+0x58>)
 8000d50:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMAL;
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d5a:	2240      	movs	r2, #64	; 0x40
 8000d5c:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8000d70:	4b0a      	ldr	r3, [pc, #40]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8000d78:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d7a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8000d7e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8000d80:	4b06      	ldr	r3, [pc, #24]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8000d86:	4805      	ldr	r0, [pc, #20]	; (8000d9c <MX_OPAMP3_Init+0x54>)
 8000d88:	f006 ff96 	bl	8007cb8 <HAL_OPAMP_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8000d92:	f000 f9ff 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000724 	.word	0x20000724
 8000da0:	40010308 	.word	0x40010308

08000da4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0a0      	sub	sp, #128	; 0x80
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000daa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dba:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000dc6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dd2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
 8000dde:	60da      	str	r2, [r3, #12]
 8000de0:	611a      	str	r2, [r3, #16]
 8000de2:	615a      	str	r2, [r3, #20]
 8000de4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000de6:	1d3b      	adds	r3, r7, #4
 8000de8:	2234      	movs	r2, #52	; 0x34
 8000dea:	2100      	movs	r1, #0
 8000dec:	4618      	mov	r0, r3
 8000dee:	f00e ff97 	bl	800fd20 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000df2:	4b77      	ldr	r3, [pc, #476]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000df4:	4a77      	ldr	r2, [pc, #476]	; (8000fd4 <MX_TIM1_Init+0x230>)
 8000df6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000df8:	4b75      	ldr	r3, [pc, #468]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000dfe:	4b74      	ldr	r3, [pc, #464]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e00:	2220      	movs	r2, #32
 8000e02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8000e04:	4b72      	ldr	r3, [pc, #456]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e06:	f640 52d5 	movw	r2, #3541	; 0xdd5
 8000e0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e0c:	4b70      	ldr	r3, [pc, #448]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e12:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000e14:	4b6e      	ldr	r3, [pc, #440]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e16:	2201      	movs	r2, #1
 8000e18:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1a:	4b6d      	ldr	r3, [pc, #436]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e20:	486b      	ldr	r0, [pc, #428]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e22:	f007 ffe1 	bl	8008de8 <HAL_TIM_Base_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f9b2 	bl	8001194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e30:	4867      	ldr	r0, [pc, #412]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e32:	f008 f804 	bl	8008e3e <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000e3c:	f000 f9aa 	bl	8001194 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000e40:	2306      	movs	r3, #6
 8000e42:	66fb      	str	r3, [r7, #108]	; 0x6c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e44:	2310      	movs	r3, #16
 8000e46:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000e48:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4860      	ldr	r0, [pc, #384]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e50:	f008 f9d4 	bl	80091fc <HAL_TIM_SlaveConfigSynchro>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000e5a:	f000 f99b 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000e5e:	2370      	movs	r3, #112	; 0x70
 8000e60:	663b      	str	r3, [r7, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	667b      	str	r3, [r7, #100]	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	66bb      	str	r3, [r7, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e6a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4857      	ldr	r0, [pc, #348]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e72:	f008 febb 	bl	8009bec <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000e7c:	f000 f98a 	bl	8001194 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8000e80:	2302      	movs	r3, #2
 8000e82:	657b      	str	r3, [r7, #84]	; 0x54
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8000e84:	2301      	movs	r3, #1
 8000e86:	65bb      	str	r3, [r7, #88]	; 0x58
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000e8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e90:	461a      	mov	r2, r3
 8000e92:	2102      	movs	r1, #2
 8000e94:	484e      	ldr	r0, [pc, #312]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000e96:	f008 ffa7 	bl	8009de8 <HAL_TIMEx_ConfigBreakInput>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000ea0:	f000 f978 	bl	8001194 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8000ea4:	2304      	movs	r3, #4
 8000ea6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000ea8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eac:	461a      	mov	r2, r3
 8000eae:	2102      	movs	r1, #2
 8000eb0:	4847      	ldr	r0, [pc, #284]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000eb2:	f008 ff99 	bl	8009de8 <HAL_TIMEx_ConfigBreakInput>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_TIM1_Init+0x11c>
  {
    Error_Handler();
 8000ebc:	f000 f96a 	bl	8001194 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000ec4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ec8:	461a      	mov	r2, r3
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4840      	ldr	r0, [pc, #256]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000ece:	f008 ff8b 	bl	8009de8 <HAL_TIMEx_ConfigBreakInput>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000ed8:	f000 f95c 	bl	8001194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000edc:	2360      	movs	r3, #96	; 0x60
 8000ede:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eec:	2300      	movs	r3, #0
 8000eee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000efc:	2200      	movs	r2, #0
 8000efe:	4619      	mov	r1, r3
 8000f00:	4833      	ldr	r0, [pc, #204]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000f02:	f008 f863 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0x16c>
  {
    Error_Handler();
 8000f0c:	f000 f942 	bl	8001194 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f14:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f18:	2204      	movs	r2, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	482c      	ldr	r0, [pc, #176]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000f1e:	f008 f855 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM1_Init+0x188>
  {
    Error_Handler();
 8000f28:	f000 f934 	bl	8001194 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f30:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f34:	2208      	movs	r2, #8
 8000f36:	4619      	mov	r1, r3
 8000f38:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000f3a:	f008 f847 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0x1a4>
  {
    Error_Handler();
 8000f44:	f000 f926 	bl	8001194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f48:	2370      	movs	r3, #112	; 0x70
 8000f4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f54:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f58:	220c      	movs	r2, #12
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000f5e:	f008 f835 	bl	8008fcc <HAL_TIM_PWM_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM1_Init+0x1c8>
  {
    Error_Handler();
 8000f68:	f000 f914 	bl	8001194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000f6c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8000f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
 8000f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f7c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8000f7e:	2344      	movs	r3, #68	; 0x44
 8000f80:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f86:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f8a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f90:	2300      	movs	r3, #0
 8000f92:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8000f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f98:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 3;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fac:	1d3b      	adds	r3, r7, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4807      	ldr	r0, [pc, #28]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000fb2:	f008 fe79 	bl	8009ca8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM1_Init+0x21c>
  {
    Error_Handler();
 8000fbc:	f000 f8ea 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <MX_TIM1_Init+0x22c>)
 8000fc2:	f002 fec1 	bl	8003d48 <HAL_TIM_MspPostInit>

}
 8000fc6:	bf00      	nop
 8000fc8:	3780      	adds	r7, #128	; 0x80
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	200008dc 	.word	0x200008dc
 8000fd4:	40012c00 	.word	0x40012c00

08000fd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	; 0x30
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2224      	movs	r2, #36	; 0x24
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00e fe9a 	bl	800fd20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fec:	463b      	mov	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ff6:	4b21      	ldr	r3, [pc, #132]	; (800107c <MX_TIM4_Init+0xa4>)
 8000ff8:	4a21      	ldr	r2, [pc, #132]	; (8001080 <MX_TIM4_Init+0xa8>)
 8000ffa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ffc:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_TIM4_Init+0xa4>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b1e      	ldr	r3, [pc, #120]	; (800107c <MX_TIM4_Init+0xa4>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = M1_PULSE_NBR;
 8001008:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_TIM4_Init+0xa4>)
 800100a:	f640 729f 	movw	r2, #3999	; 0xf9f
 800100e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <MX_TIM4_Init+0xa4>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b19      	ldr	r3, [pc, #100]	; (800107c <MX_TIM4_Init+0xa4>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800101c:	2303      	movs	r3, #3
 800101e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001020:	2300      	movs	r3, #0
 8001022:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001024:	2301      	movs	r3, #1
 8001026:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001028:	2300      	movs	r3, #0
 800102a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 800102c:	230c      	movs	r3, #12
 800102e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001034:	2301      	movs	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 800103c:	230c      	movs	r3, #12
 800103e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001040:	f107 030c 	add.w	r3, r7, #12
 8001044:	4619      	mov	r1, r3
 8001046:	480d      	ldr	r0, [pc, #52]	; (800107c <MX_TIM4_Init+0xa4>)
 8001048:	f007 ff2e 	bl	8008ea8 <HAL_TIM_Encoder_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001052:	f000 f89f 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <MX_TIM4_Init+0xa4>)
 8001064:	f008 fdc2 	bl	8009bec <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800106e:	f000 f891 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	; 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	20000664 	.word	0x20000664
 8001080:	40000800 	.word	0x40000800

08001084 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001088:	4b22      	ldr	r3, [pc, #136]	; (8001114 <MX_USART2_UART_Init+0x90>)
 800108a:	4a23      	ldr	r2, [pc, #140]	; (8001118 <MX_USART2_UART_Init+0x94>)
 800108c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 800108e:	4b21      	ldr	r3, [pc, #132]	; (8001114 <MX_USART2_UART_Init+0x90>)
 8001090:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001094:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <MX_USART2_UART_Init+0x90>)
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <MX_USART2_UART_Init+0x90>)
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010a2:	4b1c      	ldr	r3, [pc, #112]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a8:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ae:	4b19      	ldr	r3, [pc, #100]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b4:	4b17      	ldr	r3, [pc, #92]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ba:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010cc:	4811      	ldr	r0, [pc, #68]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010ce:	f008 ff5b 	bl	8009f88 <HAL_UART_Init>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80010d8:	f000 f85c 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	480d      	ldr	r0, [pc, #52]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010e0:	f00a fac9 	bl	800b676 <HAL_UARTEx_SetTxFifoThreshold>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80010ea:	f000 f853 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ee:	2100      	movs	r1, #0
 80010f0:	4808      	ldr	r0, [pc, #32]	; (8001114 <MX_USART2_UART_Init+0x90>)
 80010f2:	f00a fafe 	bl	800b6f2 <HAL_UARTEx_SetRxFifoThreshold>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80010fc:	f000 f84a 	bl	8001194 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001100:	4804      	ldr	r0, [pc, #16]	; (8001114 <MX_USART2_UART_Init+0x90>)
 8001102:	f00a fa7f 	bl	800b604 <HAL_UARTEx_DisableFifoMode>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800110c:	f000 f842 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000940 	.word	0x20000940
 8001118:	40004400 	.word	0x40004400

0800111c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_GPIO_Init+0x74>)
 8001124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001126:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <MX_GPIO_Init+0x74>)
 8001128:	f043 0304 	orr.w	r3, r3, #4
 800112c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112e:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_GPIO_Init+0x74>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_GPIO_Init+0x74>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	4a14      	ldr	r2, [pc, #80]	; (8001190 <MX_GPIO_Init+0x74>)
 8001140:	f043 0320 	orr.w	r3, r3, #32
 8001144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_GPIO_Init+0x74>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	f003 0320 	and.w	r3, r3, #32
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_GPIO_Init+0x74>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	4a0e      	ldr	r2, [pc, #56]	; (8001190 <MX_GPIO_Init+0x74>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <MX_GPIO_Init+0x74>)
 8001160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	607b      	str	r3, [r7, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_GPIO_Init+0x74>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116e:	4a08      	ldr	r2, [pc, #32]	; (8001190 <MX_GPIO_Init+0x74>)
 8001170:	f043 0302 	orr.w	r3, r3, #2
 8001174:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001176:	4b06      	ldr	r3, [pc, #24]	; (8001190 <MX_GPIO_Init+0x74>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	603b      	str	r3, [r7, #0]
 8001180:	683b      	ldr	r3, [r7, #0]

}
 8001182:	bf00      	nop
 8001184:	3714      	adds	r7, #20
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <MCI_Init>:
  * @param  pSTC the speed and torque controller used by the MCI.
  * @param  pFOCVars pointer to FOC vars to be used by MCI.
  * @retval none.
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars )
{
 80011a2:	b480      	push	{r7}
 80011a4:	b085      	sub	sp, #20
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	60f8      	str	r0, [r7, #12]
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	603b      	str	r3, [r7, #0]
  pHandle->pSTM = pSTM;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	601a      	str	r2, [r3, #0]
  pHandle->pSTC = pSTC;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	605a      	str	r2, [r3, #4]
  pHandle->pFOCVars = pFOCVars;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	609a      	str	r2, [r3, #8]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = 0;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2200      	movs	r2, #0
 80011cc:	81da      	strh	r2, [r3, #14]
  pHandle->hFinalTorque = 0;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2200      	movs	r2, #0
 80011d2:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = 0;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <MCI_ExecSpeedRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
 80011f8:	4613      	mov	r3, r2
 80011fa:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2201      	movs	r2, #1
 8001200:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalSpeed = hFinalSpeed;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	887a      	ldrh	r2, [r7, #2]
 8001206:	81da      	strh	r2, [r3, #14]
  pHandle->hDurationms = hDurationms;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	883a      	ldrh	r2, [r7, #0]
 800120c:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2201      	movs	r2, #1
 8001212:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2201      	movs	r2, #1
 8001218:	765a      	strb	r2, [r3, #25]
}
 800121a:	bf00      	nop
 800121c:	370c      	adds	r7, #12
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <MCI_ExecTorqueRamp>:
  *         is possible to set 0 to perform an instantaneous change in the
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
 8001226:	b480      	push	{r7}
 8001228:	b083      	sub	sp, #12
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
 800122e:	460b      	mov	r3, r1
 8001230:	807b      	strh	r3, [r7, #2]
 8001232:	4613      	mov	r3, r2
 8001234:	803b      	strh	r3, [r7, #0]
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2202      	movs	r2, #2
 800123a:	731a      	strb	r2, [r3, #12]
  pHandle->hFinalTorque = hFinalTorque;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	821a      	strh	r2, [r3, #16]
  pHandle->hDurationms = hDurationms;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	883a      	ldrh	r2, [r7, #0]
 8001246:	82da      	strh	r2, [r3, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2201      	movs	r2, #1
 800124c:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	765a      	strb	r2, [r3, #25]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	6039      	str	r1, [r7, #0]
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2203      	movs	r2, #3
 800126e:	731a      	strb	r2, [r3, #12]
  pHandle->Iqdref.q = Iqdref.q;
 8001270:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	825a      	strh	r2, [r3, #18]
  pHandle->Iqdref.d = Iqdref.d;
 8001278:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	829a      	strh	r2, [r3, #20]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	761a      	strb	r2, [r3, #24]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	765a      	strb	r2, [r3, #25]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2103      	movs	r1, #3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f00e f834 	bl	800f314 <STM_NextState>
 80012ac:	4603      	mov	r3, r0
 80012ae:	73fb      	strb	r3, [r7, #15]

  if ( RetVal == true )
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <MCI_StartMotor+0x24>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	761a      	strb	r2, [r3, #24]
  }

  return RetVal;
 80012bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <MCI_StopMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2107      	movs	r1, #7
 80012d4:	4618      	mov	r0, r3
 80012d6:	f00e f81d 	bl	800f314 <STM_NextState>
 80012da:	4603      	mov	r3, r0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <MCI_FaultAcknowledged>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  return STM_FaultAcknowledged( pHandle->pSTM );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00e f9bb 	bl	800f66c <STM_FaultAcknowledged>
 80012f6:	4603      	mov	r3, r0
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <MCI_EncoderAlign>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	4618      	mov	r0, r3
 8001310:	f00e f800 	bl	800f314 <STM_NextState>
 8001314:	4603      	mov	r3, r0
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <MCI_ExecBufferedCommands>:
  *         occurs.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  if ( pHandle != MC_NULL )
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d057      	beq.n	80013dc <MCI_ExecBufferedCommands+0xbe>
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	7e1b      	ldrb	r3, [r3, #24]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d153      	bne.n	80013dc <MCI_ExecBufferedCommands+0xbe>
    {
      bool commandHasBeenExecuted = false;
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
      switch ( pHandle->lastCommand )
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	7b1b      	ldrb	r3, [r3, #12]
 800133c:	2b02      	cmp	r3, #2
 800133e:	d01c      	beq.n	800137a <MCI_ExecBufferedCommands+0x5c>
 8001340:	2b03      	cmp	r3, #3
 8001342:	d032      	beq.n	80013aa <MCI_ExecBufferedCommands+0x8c>
 8001344:	2b01      	cmp	r3, #1
 8001346:	d000      	beq.n	800134a <MCI_ExecBufferedCommands+0x2c>
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
          commandHasBeenExecuted = true;
        }
        break;
        default:
          break;
 8001348:	e03e      	b.n	80013c8 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2200      	movs	r2, #0
 8001350:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2101      	movs	r1, #1
 800135a:	4618      	mov	r0, r3
 800135c:	f00d fe4e 	bl	800effc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6858      	ldr	r0, [r3, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8adb      	ldrh	r3, [r3, #22]
 800136e:	461a      	mov	r2, r3
 8001370:	f00d fe56 	bl	800f020 <STC_ExecRamp>
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
        break;
 8001378:	e026      	b.n	80013c8 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f00d fe36 	bl	800effc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6858      	ldr	r0, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f9b3 1010 	ldrsh.w	r1, [r3, #16]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	8adb      	ldrh	r3, [r3, #22]
 800139e:	461a      	mov	r2, r3
 80013a0:	f00d fe3e 	bl	800f020 <STC_ExecRamp>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
        break;
 80013a8:	e00e      	b.n	80013c8 <MCI_ExecBufferedCommands+0xaa>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	2201      	movs	r2, #1
 80013b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	3310      	adds	r3, #16
 80013bc:	3212      	adds	r2, #18
 80013be:	6812      	ldr	r2, [r2, #0]
 80013c0:	601a      	str	r2, [r3, #0]
          commandHasBeenExecuted = true;
 80013c2:	2301      	movs	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
        break;
 80013c6:	bf00      	nop
      }

      if ( commandHasBeenExecuted )
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <MCI_ExecBufferedCommands+0xb8>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2202      	movs	r2, #2
 80013d2:	761a      	strb	r2, [r3, #24]
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 80013d4:	e002      	b.n	80013dc <MCI_ExecBufferedCommands+0xbe>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2203      	movs	r2, #3
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	3710      	adds	r7, #16
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <MCI_GetSTMState>:
  * @brief  It returns information about the state of the related pSTM object.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  return STM_GetState( pHandle->pSTM );
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f00e f92f 	bl	800f654 <STM_GetState>
 80013f6:	4603      	mov	r3, r0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <MCI_GetControlMode>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval STC_Modality_t It returns the modality of STC. It can be one of
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  return pHandle->LastModalitySetByUser;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7e5b      	ldrb	r3, [r3, #25]
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <MCI_GetLastRampFinalSpeed>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t last ramp final speed sent by the user expressed in tehts
  *         of HZ.
  */
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  int16_t hRetVal = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	81fb      	strh	r3, [r7, #14]

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7b1b      	ldrb	r3, [r3, #12]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d102      	bne.n	8001432 <MCI_GetLastRampFinalSpeed+0x1a>
  {
    hRetVal = pHandle->hFinalSpeed;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	89db      	ldrh	r3, [r3, #14]
 8001430:	81fb      	strh	r3, [r7, #14]
  }
  return hRetVal;
 8001432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3714      	adds	r7, #20
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <MCI_StopRamp>:
/**
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   STC_StopRamp( pHandle->pSTC );
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	4618      	mov	r0, r3
 8001450:	f00d fe82 	bl	800f158 <STC_StopRamp>
}
 8001454:	bf00      	nop
 8001456:	3708      	adds	r7, #8
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	4618      	mov	r0, r3
 800146a:	f00d fd83 	bl	800ef74 <STC_GetSpeedSensor>
 800146e:	60f8      	str	r0, [r7, #12]

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8001470:	68f8      	ldr	r0, [r7, #12]
 8001472:	f00d fca3 	bl	800edbc <SPD_GetAvrgMecSpeedUnit>
 8001476:	4603      	mov	r3, r0
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <MCI_GetMecSpeedRefUnit>:
  *         
  * @param  pHandle Pointer on the component instance to work on.
  *         
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	4618      	mov	r0, r3
 800148e:	f00d fd8f 	bl	800efb0 <STC_GetMecSpeedRefUnit>
 8001492:	4603      	mov	r3, r0
}
 8001494:	4618      	mov	r0, r3
 8001496:	3708      	adds	r7, #8
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <MCI_GetIab>:
  * @brief  It returns stator current Iab in ab_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iab );
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	6810      	ldr	r0, [r2, #0]
 80014ae:	6018      	str	r0, [r3, #0]
 80014b0:	2300      	movs	r3, #0
 80014b2:	89ba      	ldrh	r2, [r7, #12]
 80014b4:	f362 030f 	bfi	r3, r2, #0, #16
 80014b8:	89fa      	ldrh	r2, [r7, #14]
 80014ba:	f362 431f 	bfi	r3, r2, #16, #16
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <MCI_GetIalphabeta>:
  * @brief  It returns stator current Ialphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
 80014ca:	b480      	push	{r7}
 80014cc:	b085      	sub	sp, #20
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Ialphabeta );
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689a      	ldr	r2, [r3, #8]
 80014d6:	f107 030c 	add.w	r3, r7, #12
 80014da:	3204      	adds	r2, #4
 80014dc:	6810      	ldr	r0, [r2, #0]
 80014de:	6018      	str	r0, [r3, #0]
 80014e0:	2300      	movs	r3, #0
 80014e2:	89ba      	ldrh	r2, [r7, #12]
 80014e4:	f362 030f 	bfi	r3, r2, #0, #16
 80014e8:	89fa      	ldrh	r2, [r7, #14]
 80014ea:	f362 431f 	bfi	r3, r2, #16, #16
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr

080014fa <MCI_GetIqd>:
  * @brief  It returns stator current Iqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
 80014fa:	b480      	push	{r7}
 80014fc:	b085      	sub	sp, #20
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqd );
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689a      	ldr	r2, [r3, #8]
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	320c      	adds	r2, #12
 800150c:	6810      	ldr	r0, [r2, #0]
 800150e:	6018      	str	r0, [r3, #0]
 8001510:	2300      	movs	r3, #0
 8001512:	89ba      	ldrh	r2, [r7, #12]
 8001514:	f362 030f 	bfi	r3, r2, #0, #16
 8001518:	89fa      	ldrh	r2, [r7, #14]
 800151a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800151e:	4618      	mov	r0, r3
 8001520:	3714      	adds	r7, #20
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <MCI_GetIqdref>:
  * @brief  It returns stator current Iqdref in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
 800152a:	b480      	push	{r7}
 800152c:	b085      	sub	sp, #20
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Iqdref );
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	f107 030c 	add.w	r3, r7, #12
 800153a:	3210      	adds	r2, #16
 800153c:	6810      	ldr	r0, [r2, #0]
 800153e:	6018      	str	r0, [r3, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	89ba      	ldrh	r2, [r7, #12]
 8001544:	f362 030f 	bfi	r3, r2, #0, #16
 8001548:	89fa      	ldrh	r2, [r7, #14]
 800154a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <MCI_GetVqd>:
  * @brief  It returns stator current Vqd in qd_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
 800155a:	b480      	push	{r7}
 800155c:	b085      	sub	sp, #20
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Vqd );
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689a      	ldr	r2, [r3, #8]
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	3216      	adds	r2, #22
 800156c:	6810      	ldr	r0, [r2, #0]
 800156e:	6018      	str	r0, [r3, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	89ba      	ldrh	r2, [r7, #12]
 8001574:	f362 030f 	bfi	r3, r2, #0, #16
 8001578:	89fa      	ldrh	r2, [r7, #14]
 800157a:	f362 431f 	bfi	r3, r2, #16, #16
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <MCI_GetValphabeta>:
  * @brief  It returns stator current Valphabeta in alphabeta_t format
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
 800158a:	b480      	push	{r7}
 800158c:	b085      	sub	sp, #20
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->Valphabeta );
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	321a      	adds	r2, #26
 800159c:	6810      	ldr	r0, [r2, #0]
 800159e:	6018      	str	r0, [r3, #0]
 80015a0:	2300      	movs	r3, #0
 80015a2:	89ba      	ldrh	r2, [r7, #12]
 80015a4:	f362 030f 	bfi	r3, r2, #0, #16
 80015a8:	89fa      	ldrh	r2, [r7, #14]
 80015aa:	f362 431f 	bfi	r3, r2, #16, #16
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3714      	adds	r7, #20
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <MCI_GetTeref>:
  *         Iqref and Idref computation
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
 80015ba:	b480      	push	{r7}
 80015bc:	b083      	sub	sp, #12
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  return ( pHandle->pFOCVars->hTeref );
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <MCI_SetIdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	460b      	mov	r3, r1
 80015e0:	807b      	strh	r3, [r7, #2]
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	887a      	ldrh	r2, [r7, #2]
 80015e8:	825a      	strh	r2, [r3, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	887a      	ldrh	r2, [r7, #2]
 80015f0:	829a      	strh	r2, [r3, #20]
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr

080015fe <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 80015fe:	b590      	push	{r4, r7, lr}
 8001600:	b083      	sub	sp, #12
 8001602:	af00      	add	r7, sp, #0
 8001604:	6078      	str	r0, [r7, #4]
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	685a      	ldr	r2, [r3, #4]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689c      	ldr	r4, [r3, #8]
 800160e:	4610      	mov	r0, r2
 8001610:	f00d fe40 	bl	800f294 <STC_GetDefaultIqdref>
 8001614:	4603      	mov	r3, r0
 8001616:	461a      	mov	r2, r3
 8001618:	8222      	strh	r2, [r4, #16]
 800161a:	f3c3 430f 	ubfx	r3, r3, #16, #16
 800161e:	8263      	strh	r3, [r4, #18]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	bd90      	pop	{r4, r7, pc}

08001628 <LL_CORDIC_WriteData>:
  * @param  CORDICx CORDIC Instance
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	605a      	str	r2, [r3, #4]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <LL_CORDIC_ReadData>:
  * @rmtoll RDATA        RES           LL_CORDIC_ReadData
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689b      	ldr	r3, [r3, #8]
}
 8001650:	4618      	mov	r0, r3
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format
  * @retval Stator values alpha and beta in alphabeta_t format
  */
__weak alphabeta_t MCM_Clarke( ab_t Input  )
{
 800165c:	b480      	push	{r7}
 800165e:	b089      	sub	sp, #36	; 0x24
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  int32_t a_divSQRT3_tmp, b_divSQRT3_tmp ;
  int32_t wbeta_tmp;
  int16_t hbeta_tmp;

  /* qIalpha = qIas*/
  Output.alpha = Input.a;
 8001664:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001668:	813b      	strh	r3, [r7, #8]

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 800166a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800166e:	461a      	mov	r2, r3
 8001670:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8001674:	fb03 f302 	mul.w	r3, r3, r2
 8001678:	61bb      	str	r3, [r7, #24]

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 800167a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167e:	461a      	mov	r2, r3
 8001680:	f644 13e6 	movw	r3, #18918	; 0x49e6
 8001684:	fb03 f302 	mul.w	r3, r3, r2
 8001688:	617b      	str	r3, [r7, #20]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	425a      	negs	r2, r3
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	1ad2      	subs	r2, r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	13db      	asrs	r3, r3, #15
 8001698:	613b      	str	r3, [r7, #16]
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016a0:	db03      	blt.n	80016aa <MCM_Clarke+0x4e>
  {
    hbeta_tmp = INT16_MAX;
 80016a2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80016a6:	83fb      	strh	r3, [r7, #30]
 80016a8:	e009      	b.n	80016be <MCM_Clarke+0x62>
  }
  else if ( wbeta_tmp < ( -32768 ) )
 80016aa:	693b      	ldr	r3, [r7, #16]
 80016ac:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80016b0:	da03      	bge.n	80016ba <MCM_Clarke+0x5e>
  {
    hbeta_tmp = ( -32768 );
 80016b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016b6:	83fb      	strh	r3, [r7, #30]
 80016b8:	e001      	b.n	80016be <MCM_Clarke+0x62>
  }
  else
  {
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	83fb      	strh	r3, [r7, #30]
  }

  Output.beta = hbeta_tmp;
 80016be:	8bfb      	ldrh	r3, [r7, #30]
 80016c0:	817b      	strh	r3, [r7, #10]

  if ( Output.beta == ( int16_t )( -32768 ) )
 80016c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016c6:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80016ca:	d102      	bne.n	80016d2 <MCM_Clarke+0x76>
  {
    Output.beta = -32767;
 80016cc:	f248 0301 	movw	r3, #32769	; 0x8001
 80016d0:	817b      	strh	r3, [r7, #10]
  }

  return ( Output );
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	2300      	movs	r3, #0
 80016d8:	89ba      	ldrh	r2, [r7, #12]
 80016da:	f362 030f 	bfi	r3, r2, #0, #16
 80016de:	89fa      	ldrh	r2, [r7, #14]
 80016e0:	f362 431f 	bfi	r3, r2, #16, #16
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3724      	adds	r7, #36	; 0x24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <MCM_Park>:
  * @param  Input: stator values alpha and beta in alphabeta_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator values q and d in qd_t format
  */
__weak qd_t MCM_Park( alphabeta_t Input, int16_t Theta )
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b08c      	sub	sp, #48	; 0x30
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	807b      	strh	r3, [r7, #2]
  int32_t d_tmp_1, d_tmp_2, q_tmp_1, q_tmp_2;
  Trig_Components Local_Vector_Components;
  int32_t wqd_tmp;
  int16_t hqd_tmp;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80016fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001700:	4618      	mov	r0, r3
 8001702:	f000 f8af 	bl	8001864 <MCM_Trig_Functions>
 8001706:	4603      	mov	r3, r0
 8001708:	60fb      	str	r3, [r7, #12]

  /*No overflow guaranteed*/
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 800170a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800170e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28

  /*No overflow guaranteed*/
  q_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hSin;
 8001718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001720:	fb02 f303 	mul.w	r3, r2, r3
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8001726:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	13db      	asrs	r3, r3, #15
 800172e:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Iq */
  if ( wqd_tmp > INT16_MAX )
 8001730:	6a3b      	ldr	r3, [r7, #32]
 8001732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001736:	db03      	blt.n	8001740 <MCM_Park+0x50>
  {
    hqd_tmp = INT16_MAX;
 8001738:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800173c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800173e:	e009      	b.n	8001754 <MCM_Park+0x64>
  }
  else if ( wqd_tmp < ( -32768 ) )
 8001740:	6a3b      	ldr	r3, [r7, #32]
 8001742:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001746:	da03      	bge.n	8001750 <MCM_Park+0x60>
  {
    hqd_tmp = ( -32768 );
 8001748:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800174c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800174e:	e001      	b.n	8001754 <MCM_Park+0x64>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.q = hqd_tmp;
 8001754:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001756:	823b      	strh	r3, [r7, #16]

  if ( Output.q == ( int16_t )( -32768 ) )
 8001758:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800175c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001760:	d102      	bne.n	8001768 <MCM_Park+0x78>
  {
    Output.q = -32767;
 8001762:	f248 0301 	movw	r3, #32769	; 0x8001
 8001766:	823b      	strh	r3, [r7, #16]
  }

  /*No overflow guaranteed*/
  d_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hSin;
 8001768:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800176c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	61fb      	str	r3, [r7, #28]

  /*No overflow guaranteed*/
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8001776:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800177a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800177e:	fb02 f303 	mul.w	r3, r2, r3
 8001782:	61bb      	str	r3, [r7, #24]
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) / 32768;
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8001784:	69fa      	ldr	r2, [r7, #28]
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	4413      	add	r3, r2
 800178a:	13db      	asrs	r3, r3, #15
 800178c:	623b      	str	r3, [r7, #32]
#endif

  /* Check saturation of Id */
  if ( wqd_tmp > INT16_MAX )
 800178e:	6a3b      	ldr	r3, [r7, #32]
 8001790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001794:	db03      	blt.n	800179e <MCM_Park+0xae>
  {
    hqd_tmp = INT16_MAX;
 8001796:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800179a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800179c:	e009      	b.n	80017b2 <MCM_Park+0xc2>
  }
  else if ( wqd_tmp < ( -32768 ) )
 800179e:	6a3b      	ldr	r3, [r7, #32]
 80017a0:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80017a4:	da03      	bge.n	80017ae <MCM_Park+0xbe>
  {
    hqd_tmp = ( -32768 );
 80017a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017aa:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80017ac:	e001      	b.n	80017b2 <MCM_Park+0xc2>
  }
  else
  {
    hqd_tmp = ( int16_t )( wqd_tmp );
 80017ae:	6a3b      	ldr	r3, [r7, #32]
 80017b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  }

  Output.d = hqd_tmp;
 80017b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80017b4:	827b      	strh	r3, [r7, #18]

  if ( Output.d == ( int16_t )( -32768 ) )
 80017b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80017ba:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80017be:	d102      	bne.n	80017c6 <MCM_Park+0xd6>
  {
    Output.d = -32767;
 80017c0:	f248 0301 	movw	r3, #32769	; 0x8001
 80017c4:	827b      	strh	r3, [r7, #18]
  }

  return ( Output );
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	2300      	movs	r3, #0
 80017cc:	8aba      	ldrh	r2, [r7, #20]
 80017ce:	f362 030f 	bfi	r3, r2, #0, #16
 80017d2:	8afa      	ldrh	r2, [r7, #22]
 80017d4:	f362 431f 	bfi	r3, r2, #16, #16
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3730      	adds	r7, #48	; 0x30
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <MCM_Rev_Park>:
  * @param  Input: stator voltage Vq and Vd in qd_t format
  * @param  Theta: rotating frame angular position in q1.15 format
  * @retval Stator voltage Valpha and Vbeta in qd_t format
  */
__weak alphabeta_t MCM_Rev_Park( qd_t Input, int16_t Theta )
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
 80017e8:	460b      	mov	r3, r1
 80017ea:	807b      	strh	r3, [r7, #2]
  int32_t alpha_tmp1, alpha_tmp2, beta_tmp1, beta_tmp2;
  Trig_Components Local_Vector_Components;
  alphabeta_t Output;

  Local_Vector_Components = MCM_Trig_Functions( Theta );
 80017ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f837 	bl	8001864 <MCM_Trig_Functions>
 80017f6:	4603      	mov	r3, r0
 80017f8:	613b      	str	r3, [r7, #16]

  /*No overflow guaranteed*/
  alpha_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hCos;
 80017fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017fe:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001802:	fb02 f303 	mul.w	r3, r2, r3
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001808:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800180c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001810:	fb02 f303 	mul.w	r3, r2, r3
 8001814:	623b      	str	r3, [r7, #32]
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001818:	6a3b      	ldr	r3, [r7, #32]
 800181a:	4413      	add	r3, r2
 800181c:	13db      	asrs	r3, r3, #15
 800181e:	b21b      	sxth	r3, r3
 8001820:	81bb      	strh	r3, [r7, #12]
#endif

  beta_tmp1 = Input.q * ( int32_t )Local_Vector_Components.hSin;
 8001822:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001826:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800182a:	fb02 f303 	mul.w	r3, r2, r3
 800182e:	61fb      	str	r3, [r7, #28]
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001830:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001834:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001838:	fb02 f303 	mul.w	r3, r2, r3
 800183c:	61bb      	str	r3, [r7, #24]
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) / 32768 );
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
  that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
  the compiler to perform the shift (instead of LSR logical shift right) */
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	13db      	asrs	r3, r3, #15
 8001846:	b21b      	sxth	r3, r3
 8001848:	81fb      	strh	r3, [r7, #14]
#endif

  return ( Output );
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	617b      	str	r3, [r7, #20]
 800184e:	2300      	movs	r3, #0
 8001850:	8aba      	ldrh	r2, [r7, #20]
 8001852:	f362 030f 	bfi	r3, r2, #0, #16
 8001856:	8afa      	ldrh	r2, [r7, #22]
 8001858:	f362 431f 	bfi	r3, r2, #16, #16
}
 800185c:	4618      	mov	r0, r3
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <MCM_Trig_Functions>:
  * @param  hAngle: angle in q1.15 format
  * @retval Sin(angle) and Cos(angle) in Trig_Components format
  */

__weak Trig_Components MCM_Trig_Functions( int16_t hAngle )
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;
  
  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MCM_Trig_Functions+0x48>)
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <MCM_Trig_Functions+0x4c>)
 8001872:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8001874:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001878:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 800187c:	f503 03fe 	add.w	r3, r3, #8323072	; 0x7f0000
 8001880:	4619      	mov	r1, r3
 8001882:	480a      	ldr	r0, [pc, #40]	; (80018ac <MCM_Trig_Functions+0x48>)
 8001884:	f7ff fed0 	bl	8001628 <LL_CORDIC_WriteData>
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
 8001888:	4808      	ldr	r0, [pc, #32]	; (80018ac <MCM_Trig_Functions+0x48>)
 800188a:	f7ff fedb 	bl	8001644 <LL_CORDIC_ReadData>
 800188e:	4603      	mov	r3, r0
 8001890:	60bb      	str	r3, [r7, #8]
  return (CosSin.Components);
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	2300      	movs	r3, #0
 8001898:	89ba      	ldrh	r2, [r7, #12]
 800189a:	f362 030f 	bfi	r3, r2, #0, #16
 800189e:	89fa      	ldrh	r2, [r7, #14]
 80018a0:	f362 431f 	bfi	r3, r2, #16, #16
  
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3710      	adds	r7, #16
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40020c00 	.word	0x40020c00
 80018b0:	00600040 	.word	0x00600040

080018b4 <LL_GPIO_LockPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	69db      	ldr	r3, [r3, #28]
 80018dc:	60fb      	str	r3, [r7, #12]
  (void) temp;
 80018de:	68fb      	ldr	r3, [r7, #12]
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <MCboot>:
  *         created and initialized. The vector must have length equal to the
  *         number of motor drives.
  * @retval None
  */
__weak void MCboot( MCI_Handle_t* pMCIList[NBR_OF_MOTORS],MCT_Handle_t* pMCTList[NBR_OF_MOTORS] )
{
 80018ec:	b590      	push	{r4, r7, lr}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  /* USER CODE END MCboot 0 */

  /**************************************/
  /*    State machine initialization    */
  /**************************************/
  STM_Init(&STM[M1]);
 80018f6:	4877      	ldr	r0, [pc, #476]	; (8001ad4 <MCboot+0x1e8>)
 80018f8:	f00d fcf8 	bl	800f2ec <STM_Init>
  
  bMCBootCompleted = 0;
 80018fc:	4b76      	ldr	r3, [pc, #472]	; (8001ad8 <MCboot+0x1ec>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
  pCLM[M1] = &CircleLimitationM1;
 8001902:	4b76      	ldr	r3, [pc, #472]	; (8001adc <MCboot+0x1f0>)
 8001904:	4a76      	ldr	r2, [pc, #472]	; (8001ae0 <MCboot+0x1f4>)
 8001906:	601a      	str	r2, [r3, #0]

  /**********************************************************/
  /*    PWM and current sensing component initialization    */
  /**********************************************************/
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001908:	4b76      	ldr	r3, [pc, #472]	; (8001ae4 <MCboot+0x1f8>)
 800190a:	4a77      	ldr	r2, [pc, #476]	; (8001ae8 <MCboot+0x1fc>)
 800190c:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 800190e:	4876      	ldr	r0, [pc, #472]	; (8001ae8 <MCboot+0x1fc>)
 8001910:	f00b ff3c 	bl	800d78c <R3_2_Init>
  /* USER CODE END MCboot 1 */

  /**************************************/
  /*    Start timers synchronously      */
  /**************************************/
  startTimers();    
 8001914:	f00b f808 	bl	800c928 <startTimers>

  /******************************************************/
  /*   PID component initialization: speed regulation   */
  /******************************************************/
  PID_HandleInit(&PIDSpeedHandle_M1);
 8001918:	4874      	ldr	r0, [pc, #464]	; (8001aec <MCboot+0x200>)
 800191a:	f00a fdd9 	bl	800c4d0 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 800191e:	4b74      	ldr	r3, [pc, #464]	; (8001af0 <MCboot+0x204>)
 8001920:	4a72      	ldr	r2, [pc, #456]	; (8001aec <MCboot+0x200>)
 8001922:	601a      	str	r2, [r3, #0]
  
  /******************************************************/
  /*   Main speed sensor component initialization       */
  /******************************************************/
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001924:	4b73      	ldr	r3, [pc, #460]	; (8001af4 <MCboot+0x208>)
 8001926:	4a74      	ldr	r2, [pc, #464]	; (8001af8 <MCboot+0x20c>)
 8001928:	601a      	str	r2, [r3, #0]
  ENC_Init (&ENCODER_M1);
 800192a:	4874      	ldr	r0, [pc, #464]	; (8001afc <MCboot+0x210>)
 800192c:	f00a f9e8 	bl	800bd00 <ENC_Init>
  
  /******************************************************/
  /*   Main encoder alignment component initialization  */
  /******************************************************/
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001930:	4b70      	ldr	r3, [pc, #448]	; (8001af4 <MCboot+0x208>)
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	4b71      	ldr	r3, [pc, #452]	; (8001afc <MCboot+0x210>)
 8001936:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <MCboot+0x214>)
 8001938:	4872      	ldr	r0, [pc, #456]	; (8001b04 <MCboot+0x218>)
 800193a:	f00a f850 	bl	800b9de <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 800193e:	4b72      	ldr	r3, [pc, #456]	; (8001b08 <MCboot+0x21c>)
 8001940:	4a70      	ldr	r2, [pc, #448]	; (8001b04 <MCboot+0x218>)
 8001942:	601a      	str	r2, [r3, #0]
  

  /******************************************************/
  /*   Speed & torque component initialization          */
  /******************************************************/
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8001944:	4b6b      	ldr	r3, [pc, #428]	; (8001af4 <MCboot+0x208>)
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	4b69      	ldr	r3, [pc, #420]	; (8001af0 <MCboot+0x204>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a6b      	ldr	r2, [pc, #428]	; (8001afc <MCboot+0x210>)
 800194e:	4619      	mov	r1, r3
 8001950:	f00d fad6 	bl	800ef00 <STC_Init>
  
  /****************************************************/
  /*   Virtual speed sensor component initialization  */
  /****************************************************/ 
  VSS_Init (&VirtualSpeedSensorM1);
 8001954:	486a      	ldr	r0, [pc, #424]	; (8001b00 <MCboot+0x214>)
 8001956:	f00e f8a3 	bl	800faa0 <VSS_Init>
  
  /********************************************************/
  /*   PID component initialization: current regulation   */
  /********************************************************/
  PID_HandleInit(&PIDIqHandle_M1);
 800195a:	486c      	ldr	r0, [pc, #432]	; (8001b0c <MCboot+0x220>)
 800195c:	f00a fdb8 	bl	800c4d0 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 8001960:	486b      	ldr	r0, [pc, #428]	; (8001b10 <MCboot+0x224>)
 8001962:	f00a fdb5 	bl	800c4d0 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001966:	4b6b      	ldr	r3, [pc, #428]	; (8001b14 <MCboot+0x228>)
 8001968:	4a68      	ldr	r2, [pc, #416]	; (8001b0c <MCboot+0x220>)
 800196a:	601a      	str	r2, [r3, #0]
  pPIDId[M1] = &PIDIdHandle_M1;
 800196c:	4b6a      	ldr	r3, [pc, #424]	; (8001b18 <MCboot+0x22c>)
 800196e:	4a68      	ldr	r2, [pc, #416]	; (8001b10 <MCboot+0x224>)
 8001970:	601a      	str	r2, [r3, #0]
  
  /********************************************************/
  /*   Bus voltage sensor component initialization        */
  /********************************************************/
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001972:	4b6a      	ldr	r3, [pc, #424]	; (8001b1c <MCboot+0x230>)
 8001974:	4a6a      	ldr	r2, [pc, #424]	; (8001b20 <MCboot+0x234>)
 8001976:	601a      	str	r2, [r3, #0]
  RVBS_Init(pBusSensorM1);
 8001978:	4b68      	ldr	r3, [pc, #416]	; (8001b1c <MCboot+0x230>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f00d f932 	bl	800ebe6 <RVBS_Init>
  
  /*************************************************/
  /*   Power measurement component initialization  */
  /*************************************************/
  pMPM[M1] = &PQD_MotorPowMeasM1;
 8001982:	4b68      	ldr	r3, [pc, #416]	; (8001b24 <MCboot+0x238>)
 8001984:	4a68      	ldr	r2, [pc, #416]	; (8001b28 <MCboot+0x23c>)
 8001986:	601a      	str	r2, [r3, #0]
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001988:	4b64      	ldr	r3, [pc, #400]	; (8001b1c <MCboot+0x230>)
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <MCboot+0x238>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001994:	4b63      	ldr	r3, [pc, #396]	; (8001b24 <MCboot+0x238>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a64      	ldr	r2, [pc, #400]	; (8001b2c <MCboot+0x240>)
 800199a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
  
  /*******************************************************/
  /*   Temperature measurement component initialization  */
  /*******************************************************/
  NTC_Init(&TempSensorParamsM1);    
 800199e:	4864      	ldr	r0, [pc, #400]	; (8001b30 <MCboot+0x244>)
 80019a0:	f00a fcf7 	bl	800c392 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80019a4:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <MCboot+0x248>)
 80019a6:	4a62      	ldr	r2, [pc, #392]	; (8001b30 <MCboot+0x244>)
 80019a8:	601a      	str	r2, [r3, #0]
    

  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80019aa:	4b63      	ldr	r3, [pc, #396]	; (8001b38 <MCboot+0x24c>)
 80019ac:	4a63      	ldr	r2, [pc, #396]	; (8001b3c <MCboot+0x250>)
 80019ae:	601a      	str	r2, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 80019b0:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <MCboot+0x24c>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f00d f9db 	bl	800ed70 <REMNG_Init>

  FOC_Clear(M1);
 80019ba:	2000      	movs	r0, #0
 80019bc:	f000 fa9e 	bl	8001efc <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80019c0:	4b5a      	ldr	r3, [pc, #360]	; (8001b2c <MCboot+0x240>)
 80019c2:	2201      	movs	r2, #1
 80019c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80019c8:	4b4a      	ldr	r3, [pc, #296]	; (8001af4 <MCboot+0x208>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4c57      	ldr	r4, [pc, #348]	; (8001b2c <MCboot+0x240>)
 80019ce:	4618      	mov	r0, r3
 80019d0:	f00d fc60 	bl	800f294 <STC_GetDefaultIqdref>
 80019d4:	4603      	mov	r3, r0
 80019d6:	461a      	mov	r2, r3
 80019d8:	8222      	strh	r2, [r4, #16]
 80019da:	f3c3 430f 	ubfx	r3, r3, #16, #16
 80019de:	8263      	strh	r3, [r4, #18]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80019e0:	4b44      	ldr	r3, [pc, #272]	; (8001af4 <MCboot+0x208>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f00d fc55 	bl	800f294 <STC_GetDefaultIqdref>
 80019ea:	4603      	mov	r3, r0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80019f2:	4b4e      	ldr	r3, [pc, #312]	; (8001b2c <MCboot+0x240>)
 80019f4:	829a      	strh	r2, [r3, #20]
  oMCInterface[M1] = & Mci[M1];
 80019f6:	4b52      	ldr	r3, [pc, #328]	; (8001b40 <MCboot+0x254>)
 80019f8:	4a52      	ldr	r2, [pc, #328]	; (8001b44 <MCboot+0x258>)
 80019fa:	601a      	str	r2, [r3, #0]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1] );
 80019fc:	4b50      	ldr	r3, [pc, #320]	; (8001b40 <MCboot+0x254>)
 80019fe:	6818      	ldr	r0, [r3, #0]
 8001a00:	4b3c      	ldr	r3, [pc, #240]	; (8001af4 <MCboot+0x208>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b49      	ldr	r3, [pc, #292]	; (8001b2c <MCboot+0x240>)
 8001a06:	4933      	ldr	r1, [pc, #204]	; (8001ad4 <MCboot+0x1e8>)
 8001a08:	f7ff fbcb 	bl	80011a2 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 8001a0c:	4b4c      	ldr	r3, [pc, #304]	; (8001b40 <MCboot+0x254>)
 8001a0e:	681c      	ldr	r4, [r3, #0]
 8001a10:	4b38      	ldr	r3, [pc, #224]	; (8001af4 <MCboot+0x208>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f00d fc17 	bl	800f248 <STC_GetMecSpeedRefUnitDefault>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	4619      	mov	r1, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fbe3 	bl	80011ec <MCI_ExecSpeedRamp>
  STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /*First command to STC*/
  pMCIList[M1] = oMCInterface[M1];
 8001a26:	4b46      	ldr	r3, [pc, #280]	; (8001b40 <MCboot+0x254>)
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <MCboot+0x204>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a45      	ldr	r2, [pc, #276]	; (8001b48 <MCboot+0x25c>)
 8001a34:	6013      	str	r3, [r2, #0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001a36:	4b37      	ldr	r3, [pc, #220]	; (8001b14 <MCboot+0x228>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a43      	ldr	r2, [pc, #268]	; (8001b48 <MCboot+0x25c>)
 8001a3c:	6053      	str	r3, [r2, #4]
  MCT[M1].pPIDId = pPIDId[M1];
 8001a3e:	4b36      	ldr	r3, [pc, #216]	; (8001b18 <MCboot+0x22c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a41      	ldr	r2, [pc, #260]	; (8001b48 <MCboot+0x25c>)
 8001a44:	6093      	str	r3, [r2, #8]
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <MCboot+0x25c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	60da      	str	r2, [r3, #12]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001a4c:	4b25      	ldr	r3, [pc, #148]	; (8001ae4 <MCboot+0x1f8>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a3d      	ldr	r2, [pc, #244]	; (8001b48 <MCboot+0x25c>)
 8001a52:	6113      	str	r3, [r2, #16]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 8001a54:	4b3c      	ldr	r3, [pc, #240]	; (8001b48 <MCboot+0x25c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	615a      	str	r2, [r3, #20]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1; 
 8001a5a:	4b3b      	ldr	r3, [pc, #236]	; (8001b48 <MCboot+0x25c>)
 8001a5c:	4a27      	ldr	r2, [pc, #156]	; (8001afc <MCboot+0x210>)
 8001a5e:	619a      	str	r2, [r3, #24]
  MCT[M1].pSpeedSensorAux = MC_NULL;
 8001a60:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <MCboot+0x25c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001a66:	4b38      	ldr	r3, [pc, #224]	; (8001b48 <MCboot+0x25c>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001a6c:	4b21      	ldr	r3, [pc, #132]	; (8001af4 <MCboot+0x208>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a35      	ldr	r2, [pc, #212]	; (8001b48 <MCboot+0x25c>)
 8001a72:	6253      	str	r3, [r2, #36]	; 0x24
  MCT[M1].pStateMachine = &STM[M1];
 8001a74:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <MCboot+0x25c>)
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <MCboot+0x1e8>)
 8001a78:	629a      	str	r2, [r3, #40]	; 0x28
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001a7a:	4b2e      	ldr	r3, [pc, #184]	; (8001b34 <MCboot+0x248>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a32      	ldr	r2, [pc, #200]	; (8001b48 <MCboot+0x25c>)
 8001a80:	62d3      	str	r3, [r2, #44]	; 0x2c
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 8001a82:	4b26      	ldr	r3, [pc, #152]	; (8001b1c <MCboot+0x230>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	4b2f      	ldr	r3, [pc, #188]	; (8001b48 <MCboot+0x25c>)
 8001a8a:	631a      	str	r2, [r3, #48]	; 0x30
  MCT[M1].pBrakeDigitalOutput = MC_NULL;   /* brake is defined, oBrakeM1*/
 8001a8c:	4b2e      	ldr	r3, [pc, #184]	; (8001b48 <MCboot+0x25c>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	635a      	str	r2, [r3, #52]	; 0x34
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001a92:	4b2d      	ldr	r3, [pc, #180]	; (8001b48 <MCboot+0x25c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	639a      	str	r2, [r3, #56]	; 0x38
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001a98:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <MCboot+0x238>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2a      	ldr	r2, [pc, #168]	; (8001b48 <MCboot+0x25c>)
 8001a9e:	63d3      	str	r3, [r2, #60]	; 0x3c
  MCT[M1].pFW = MC_NULL;
 8001aa0:	4b29      	ldr	r3, [pc, #164]	; (8001b48 <MCboot+0x25c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
  MCT[M1].pFF = MC_NULL;
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <MCboot+0x25c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	645a      	str	r2, [r3, #68]	; 0x44

  MCT[M1].pPosCtrl = MC_NULL;
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <MCboot+0x25c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	649a      	str	r2, [r3, #72]	; 0x48

  MCT[M1].pSCC = MC_NULL;
 8001ab2:	4b25      	ldr	r3, [pc, #148]	; (8001b48 <MCboot+0x25c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	64da      	str	r2, [r3, #76]	; 0x4c
  MCT[M1].pOTT = MC_NULL;
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <MCboot+0x25c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	651a      	str	r2, [r3, #80]	; 0x50
  pMCTList[M1] = &MCT[M1];
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	4a21      	ldr	r2, [pc, #132]	; (8001b48 <MCboot+0x25c>)
 8001ac2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN MCboot 2 */

  /* USER CODE END MCboot 2 */

  bMCBootCompleted = 1;
 8001ac4:	4b04      	ldr	r3, [pc, #16]	; (8001ad8 <MCboot+0x1ec>)
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	701a      	strb	r2, [r3, #0]
}
 8001aca:	bf00      	nop
 8001acc:	3714      	adds	r7, #20
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd90      	pop	{r4, r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000a98 	.word	0x20000a98
 8001ad8:	2000060e 	.word	0x2000060e
 8001adc:	20000a74 	.word	0x20000a74
 8001ae0:	200003e8 	.word	0x200003e8
 8001ae4:	200009e0 	.word	0x200009e0
 8001ae8:	200001cc 	.word	0x200001cc
 8001aec:	20000114 	.word	0x20000114
 8001af0:	200009e4 	.word	0x200009e4
 8001af4:	20000aac 	.word	0x20000aac
 8001af8:	20000198 	.word	0x20000198
 8001afc:	2000027c 	.word	0x2000027c
 8001b00:	20000244 	.word	0x20000244
 8001b04:	200002f8 	.word	0x200002f8
 8001b08:	200009e8 	.word	0x200009e8
 8001b0c:	20000140 	.word	0x20000140
 8001b10:	2000016c 	.word	0x2000016c
 8001b14:	200009ec 	.word	0x200009ec
 8001b18:	20000aa8 	.word	0x20000aa8
 8001b1c:	20000a78 	.word	0x20000a78
 8001b20:	2000033c 	.word	0x2000033c
 8001b24:	20000aa4 	.word	0x20000aa4
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	200009f8 	.word	0x200009f8
 8001b30:	20000314 	.word	0x20000314
 8001b34:	200009dc 	.word	0x200009dc
 8001b38:	20000aa0 	.word	0x20000aa0
 8001b3c:	200003d0 	.word	0x200003d0
 8001b40:	200009f0 	.word	0x200009f0
 8001b44:	20000a7c 	.word	0x20000a7c
 8001b48:	20000a20 	.word	0x20000a20

08001b4c <MC_RunMotorControlTasks>:
 * - Safety Task
 * - Power Factor Correction Task (if enabled)
 * - User Interface task. 
 */
__weak void MC_RunMotorControlTasks(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  if ( bMCBootCompleted ) {
 8001b50:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <MC_RunMotorControlTasks+0x1c>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <MC_RunMotorControlTasks+0x18>
    /* ** Medium Frequency Tasks ** */
    MC_Scheduler();
 8001b58:	f000 f808 	bl	8001b6c <MC_Scheduler>

    /* Safety task is run after Medium Frequency task so that  
     * it can overcome actions they initiated if needed. */
    TSK_SafetyTask();
 8001b5c:	f000 fbaa 	bl	80022b4 <TSK_SafetyTask>
    

    /* ** User Interface Task ** */
    UI_Scheduler();
 8001b60:	f002 fc06 	bl	8004370 <UI_Scheduler>
  }
}
 8001b64:	bf00      	nop
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	2000060e 	.word	0x2000060e

08001b6c <MC_Scheduler>:
 * @brief  Executes the Medium Frequency Task functions for each drive instance. 
 *
 * It is to be clocked at the Systick frequency.
 */
__weak void MC_Scheduler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MC_Scheduler 0 */

/* USER CODE END MC_Scheduler 0 */

  if (bMCBootCompleted == 1)
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <MC_Scheduler+0x64>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d129      	bne.n	8001bcc <MC_Scheduler+0x60>
  {    
    if(hMFTaskCounterM1 > 0u)
 8001b78:	4b16      	ldr	r3, [pc, #88]	; (8001bd4 <MC_Scheduler+0x68>)
 8001b7a:	881b      	ldrh	r3, [r3, #0]
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <MC_Scheduler+0x26>
    {
      hMFTaskCounterM1--;
 8001b82:	4b14      	ldr	r3, [pc, #80]	; (8001bd4 <MC_Scheduler+0x68>)
 8001b84:	881b      	ldrh	r3, [r3, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <MC_Scheduler+0x68>)
 8001b8e:	801a      	strh	r2, [r3, #0]
 8001b90:	e004      	b.n	8001b9c <MC_Scheduler+0x30>
    }
    else
    {
      TSK_MediumFrequencyTaskM1();
 8001b92:	f000 f825 	bl	8001be0 <TSK_MediumFrequencyTaskM1>
      /* USER CODE BEGIN MC_Scheduler 1 */

      /* USER CODE END MC_Scheduler 1 */
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <MC_Scheduler+0x68>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	801a      	strh	r2, [r3, #0]
    }
    if(hBootCapDelayCounterM1 > 0u)
 8001b9c:	4b0e      	ldr	r3, [pc, #56]	; (8001bd8 <MC_Scheduler+0x6c>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d006      	beq.n	8001bb4 <MC_Scheduler+0x48>
    {
      hBootCapDelayCounterM1--;
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <MC_Scheduler+0x6c>)
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b09      	ldr	r3, [pc, #36]	; (8001bd8 <MC_Scheduler+0x6c>)
 8001bb2:	801a      	strh	r2, [r3, #0]
    }
    if(hStopPermanencyCounterM1 > 0u)
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MC_Scheduler+0x70>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	b29b      	uxth	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d006      	beq.n	8001bcc <MC_Scheduler+0x60>
    {
      hStopPermanencyCounterM1--;
 8001bbe:	4b07      	ldr	r3, [pc, #28]	; (8001bdc <MC_Scheduler+0x70>)
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <MC_Scheduler+0x70>)
 8001bca:	801a      	strh	r2, [r3, #0]
  {
  }
  /* USER CODE BEGIN MC_Scheduler 2 */

  /* USER CODE END MC_Scheduler 2 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000060e 	.word	0x2000060e
 8001bd4:	20000608 	.word	0x20000608
 8001bd8:	2000060a 	.word	0x2000060a
 8001bdc:	2000060c 	.word	0x2000060c

08001be0 <TSK_MediumFrequencyTaskM1>:
  * present state of its state machine. In particular, duties requiring a periodic 
  * execution at a medium frequency rate (such as the speed controller for instance) 
  * are executed here.
  */
__weak void TSK_MediumFrequencyTaskM1(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MediumFrequencyTask M1 0 */

  /* USER CODE END MediumFrequencyTask M1 0 */

  State_t StateM1;
  int16_t wAux = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	80bb      	strh	r3, [r7, #4]

  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001bea:	1d3b      	adds	r3, r7, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	48ba      	ldr	r0, [pc, #744]	; (8001ed8 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001bf0:	f00a f937 	bl	800be62 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001bf4:	4bb9      	ldr	r3, [pc, #740]	; (8001edc <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f00a fd95 	bl	800c728 <PQD_CalcElMotorPower>

  StateM1 = STM_GetState( &STM[M1] );
 8001bfe:	48b8      	ldr	r0, [pc, #736]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001c00:	f00d fd28 	bl	800f654 <STM_GetState>
 8001c04:	4603      	mov	r3, r0
 8001c06:	71fb      	strb	r3, [r7, #7]

  switch ( StateM1 )
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	f200 814e 	bhi.w	8001eac <TSK_MediumFrequencyTaskM1+0x2cc>
 8001c10:	a201      	add	r2, pc, #4	; (adr r2, 8001c18 <TSK_MediumFrequencyTaskM1+0x38>)
 8001c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c16:	bf00      	nop
 8001c18:	08001c65 	.word	0x08001c65
 8001c1c:	08001d2b 	.word	0x08001d2b
 8001c20:	08001dcb 	.word	0x08001dcb
 8001c24:	08001c85 	.word	0x08001c85
 8001c28:	08001dc1 	.word	0x08001dc1
 8001c2c:	08001e27 	.word	0x08001e27
 8001c30:	08001e51 	.word	0x08001e51
 8001c34:	08001e63 	.word	0x08001e63
 8001c38:	08001e8f 	.word	0x08001e8f
 8001c3c:	08001ea3 	.word	0x08001ea3
 8001c40:	08001ead 	.word	0x08001ead
 8001c44:	08001ead 	.word	0x08001ead
 8001c48:	08001ead 	.word	0x08001ead
 8001c4c:	08001d45 	.word	0x08001d45
 8001c50:	08001d67 	.word	0x08001d67
 8001c54:	08001d85 	.word	0x08001d85
 8001c58:	08001cc3 	.word	0x08001cc3
 8001c5c:	08001ce5 	.word	0x08001ce5
 8001c60:	08001d03 	.word	0x08001d03
  {
   
  case IDLE:
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 8001c64:	489f      	ldr	r0, [pc, #636]	; (8001ee4 <TSK_MediumFrequencyTaskM1+0x304>)
 8001c66:	f009 ff6c 	bl	800bb42 <EAC_GetRestartState>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 811f 	beq.w	8001eb0 <TSK_MediumFrequencyTaskM1+0x2d0>
    {
      /* The Encoder Restart State is true: the IDLE state has been entered
       * after Encoder alignment was performed. The motor can now be started. */
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 8001c72:	2100      	movs	r1, #0
 8001c74:	489b      	ldr	r0, [pc, #620]	; (8001ee4 <TSK_MediumFrequencyTaskM1+0x304>)
 8001c76:	f009 ff55 	bl	800bb24 <EAC_SetRestartState>

      /* USER CODE BEGIN MediumFrequencyTask M1 Encoder Restart */

      /* USER CODE END MediumFrequencyTask M1 Encoder Restart */

      STM_NextState( &STM[M1], IDLE_START );
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	4898      	ldr	r0, [pc, #608]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001c7e:	f00d fb49 	bl	800f314 <STM_NextState>
    }
    break;
 8001c82:	e115      	b.n	8001eb0 <TSK_MediumFrequencyTaskM1+0x2d0>

  case IDLE_START:
 
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 8001c84:	4897      	ldr	r0, [pc, #604]	; (8001ee4 <TSK_MediumFrequencyTaskM1+0x304>)
 8001c86:	f009 ff41 	bl	800bb0c <EAC_IsAligned>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f083 0301 	eor.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d008      	beq.n	8001ca8 <TSK_MediumFrequencyTaskM1+0xc8>
    {
      /* The encoder is not aligned. It needs to be and the alignment procedure will make 
       * the state machine go back to IDLE. Setting the Restart State to true ensures that
       * the start up procedure will carry on after alignment. */
      EAC_SetRestartState( &EncAlignCtrlM1, true ); 
 8001c96:	2101      	movs	r1, #1
 8001c98:	4892      	ldr	r0, [pc, #584]	; (8001ee4 <TSK_MediumFrequencyTaskM1+0x304>)
 8001c9a:	f009 ff43 	bl	800bb24 <EAC_SetRestartState>

      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 8001c9e:	2101      	movs	r1, #1
 8001ca0:	488f      	ldr	r0, [pc, #572]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001ca2:	f00d fb37 	bl	800f314 <STM_NextState>
      break;
 8001ca6:	e112      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    }

    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001ca8:	4b8f      	ldr	r3, [pc, #572]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f00c fa6a 	bl	800e186 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001cb2:	2014      	movs	r0, #20
 8001cb4:	f000 fa00 	bl	80020b8 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 8001cb8:	2110      	movs	r1, #16
 8001cba:	4889      	ldr	r0, [pc, #548]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001cbc:	f00d fb2a 	bl	800f314 <STM_NextState>
    break;
 8001cc0:	e105      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>

  case CHARGE_BOOT_CAP:
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001cc2:	f000 fa09 	bl	80020d8 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80f3 	beq.w	8001eb4 <TSK_MediumFrequencyTaskM1+0x2d4>
    {
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001cce:	4b86      	ldr	r3, [pc, #536]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00b f8ba 	bl	800ce4e <PWMC_CurrentReadingCalibr>

      /* USER CODE BEGIN MediumFrequencyTask M1 Charge BootCap elapsed */

      /* USER CODE END MediumFrequencyTask M1 Charge BootCap elapsed */

      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001cda:	2111      	movs	r1, #17
 8001cdc:	4880      	ldr	r0, [pc, #512]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001cde:	f00d fb19 	bl	800f314 <STM_NextState>
    }
    break;
 8001ce2:	e0e7      	b.n	8001eb4 <TSK_MediumFrequencyTaskM1+0x2d4>

  case OFFSET_CALIB:
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001ce4:	4b80      	ldr	r3, [pc, #512]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4618      	mov	r0, r3
 8001cec:	f00b f8af 	bl	800ce4e <PWMC_CurrentReadingCalibr>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 80e0 	beq.w	8001eb8 <TSK_MediumFrequencyTaskM1+0x2d8>
    {
      STM_NextState( &STM[M1], CLEAR );
 8001cf8:	2112      	movs	r1, #18
 8001cfa:	4879      	ldr	r0, [pc, #484]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001cfc:	f00d fb0a 	bl	800f314 <STM_NextState>
    }
    break;
 8001d00:	e0da      	b.n	8001eb8 <TSK_MediumFrequencyTaskM1+0x2d8>

  case CLEAR:
    ENC_Clear( &ENCODER_M1 );
 8001d02:	4875      	ldr	r0, [pc, #468]	; (8001ed8 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001d04:	f00a f852 	bl	800bdac <ENC_Clear>

    if ( STM_NextState( &STM[M1], START ) == true )
 8001d08:	2104      	movs	r1, #4
 8001d0a:	4875      	ldr	r0, [pc, #468]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001d0c:	f00d fb02 	bl	800f314 <STM_NextState>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80d2 	beq.w	8001ebc <TSK_MediumFrequencyTaskM1+0x2dc>
    {
      FOC_Clear( M1 );
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 f8ef 	bl	8001efc <FOC_Clear>

      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001d1e:	4b72      	ldr	r3, [pc, #456]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f00c fa85 	bl	800e232 <R3_2_SwitchOnPWM>
    }
    break;
 8001d28:	e0c8      	b.n	8001ebc <TSK_MediumFrequencyTaskM1+0x2dc>

  case IDLE_ALIGNMENT:
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001d2a:	4b6f      	ldr	r3, [pc, #444]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f00c fa29 	bl	800e186 <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001d34:	2014      	movs	r0, #20
 8001d36:	f000 f9bf 	bl	80020b8 <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 8001d3a:	210d      	movs	r1, #13
 8001d3c:	4868      	ldr	r0, [pc, #416]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001d3e:	f00d fae9 	bl	800f314 <STM_NextState>
    break;
 8001d42:	e0c4      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>

  case ALIGN_CHARGE_BOOT_CAP:
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001d44:	f000 f9c8 	bl	80020d8 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 80b8 	beq.w	8001ec0 <TSK_MediumFrequencyTaskM1+0x2e0>
    {
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 8001d50:	4b65      	ldr	r3, [pc, #404]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f00b f879 	bl	800ce4e <PWMC_CurrentReadingCalibr>

      /* USER CODE BEGIN MediumFrequencyTask M1 Align Charge BootCap elapsed */

      /* USER CODE END MediumFrequencyTask M1 Align Charge BootCap elapsed */

      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 8001d5c:	210e      	movs	r1, #14
 8001d5e:	4860      	ldr	r0, [pc, #384]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001d60:	f00d fad8 	bl	800f314 <STM_NextState>
    }
    break;
 8001d64:	e0ac      	b.n	8001ec0 <TSK_MediumFrequencyTaskM1+0x2e0>

  case ALIGN_OFFSET_CALIB:
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001d66:	4b60      	ldr	r3, [pc, #384]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f00b f86e 	bl	800ce4e <PWMC_CurrentReadingCalibr>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	f000 80a5 	beq.w	8001ec4 <TSK_MediumFrequencyTaskM1+0x2e4>
    {
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 8001d7a:	210f      	movs	r1, #15
 8001d7c:	4858      	ldr	r0, [pc, #352]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001d7e:	f00d fac9 	bl	800f314 <STM_NextState>
    }
    break;
 8001d82:	e09f      	b.n	8001ec4 <TSK_MediumFrequencyTaskM1+0x2e4>

  case ALIGN_CLEAR:
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001d84:	4b59      	ldr	r3, [pc, #356]	; (8001eec <TSK_MediumFrequencyTaskM1+0x30c>)
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001d8c:	4b58      	ldr	r3, [pc, #352]	; (8001ef0 <TSK_MediumFrequencyTaskM1+0x310>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4958      	ldr	r1, [pc, #352]	; (8001ef4 <TSK_MediumFrequencyTaskM1+0x314>)
 8001d92:	4618      	mov	r0, r3
 8001d94:	f00d f8e0 	bl	800ef58 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 8001d98:	4852      	ldr	r0, [pc, #328]	; (8001ee4 <TSK_MediumFrequencyTaskM1+0x304>)
 8001d9a:	f009 fe3d 	bl	800ba18 <EAC_StartAlignment>

    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 8001d9e:	2102      	movs	r1, #2
 8001da0:	484f      	ldr	r0, [pc, #316]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001da2:	f00d fab7 	bl	800f314 <STM_NextState>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f000 808d 	beq.w	8001ec8 <TSK_MediumFrequencyTaskM1+0x2e8>
    {
      FOC_Clear( M1 );
 8001dae:	2000      	movs	r0, #0
 8001db0:	f000 f8a4 	bl	8001efc <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 8001db4:	4b4c      	ldr	r3, [pc, #304]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f00c fa3a 	bl	800e232 <R3_2_SwitchOnPWM>
    }
    break;
 8001dbe:	e083      	b.n	8001ec8 <TSK_MediumFrequencyTaskM1+0x2e8>

  case START:
    {
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001dc0:	2105      	movs	r1, #5
 8001dc2:	4847      	ldr	r0, [pc, #284]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001dc4:	f00d faa6 	bl	800f314 <STM_NextState>
    }
    break;
 8001dc8:	e081      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    
  case ALIGNMENT:
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 8001dca:	4846      	ldr	r0, [pc, #280]	; (8001ee4 <TSK_MediumFrequencyTaskM1+0x304>)
 8001dcc:	f009 fe6e 	bl	800baac <EAC_Exec>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f083 0301 	eor.w	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00e      	beq.n	8001dfa <TSK_MediumFrequencyTaskM1+0x21a>
    {
      qd_t IqdRef;
      IqdRef.q = 0;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	803b      	strh	r3, [r7, #0]
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 8001de0:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <TSK_MediumFrequencyTaskM1+0x310>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f00d f9c7 	bl	800f178 <STC_CalcTorqueReference>
 8001dea:	4603      	mov	r3, r0
 8001dec:	807b      	strh	r3, [r7, #2]
      FOCVars[M1].Iqdref = IqdRef;	
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <TSK_MediumFrequencyTaskM1+0x30c>)
 8001df0:	3310      	adds	r3, #16
 8001df2:	463a      	mov	r2, r7
 8001df4:	6810      	ldr	r0, [r2, #0]
 8001df6:	6018      	str	r0, [r3, #0]

      /* USER CODE END MediumFrequencyTask M1 EndOfEncAlignment */

      STM_NextState( &STM[M1], ANY_STOP );
    }    
    break;
 8001df8:	e069      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001dfa:	4b3b      	ldr	r3, [pc, #236]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f00c fab8 	bl	800e374 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 8001e04:	4b3a      	ldr	r3, [pc, #232]	; (8001ef0 <TSK_MediumFrequencyTaskM1+0x310>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f00d f8f6 	bl	800effc <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 8001e10:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <TSK_MediumFrequencyTaskM1+0x310>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4930      	ldr	r1, [pc, #192]	; (8001ed8 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001e16:	4618      	mov	r0, r3
 8001e18:	f00d f89e 	bl	800ef58 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 8001e1c:	2107      	movs	r1, #7
 8001e1e:	4830      	ldr	r0, [pc, #192]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001e20:	f00d fa78 	bl	800f314 <STM_NextState>
    break;
 8001e24:	e053      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
  case START_RUN:
    {
      /* USER CODE BEGIN MediumFrequencyTask M1 1 */

      /* USER CODE END MediumFrequencyTask M1 1 */      
	  FOC_InitAdditionalMethods(M1);
 8001e26:	2000      	movs	r0, #0
 8001e28:	f000 f8fe 	bl	8002028 <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001e2c:	2000      	movs	r0, #0
 8001e2e:	f000 f907 	bl	8002040 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001e32:	2106      	movs	r1, #6
 8001e34:	482a      	ldr	r0, [pc, #168]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001e36:	f00d fa6d 	bl	800f314 <STM_NextState>
    }
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <TSK_MediumFrequencyTaskM1+0x310>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f00d fa43 	bl	800f2ca <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001e44:	4b2c      	ldr	r3, [pc, #176]	; (8001ef8 <TSK_MediumFrequencyTaskM1+0x318>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fa68 	bl	800131e <MCI_ExecBufferedCommands>
	
    break;
 8001e4e:	e03e      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
  case RUN:
    /* USER CODE BEGIN MediumFrequencyTask M1 2 */

    /* USER CODE END MediumFrequencyTask M1 2 */

    MCI_ExecBufferedCommands( oMCInterface[M1] );
 8001e50:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <TSK_MediumFrequencyTaskM1+0x318>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fa62 	bl	800131e <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f8f0 	bl	8002040 <FOC_CalcCurrRef>
 
 
    /* USER CODE BEGIN MediumFrequencyTask M1 3 */

    /* USER CODE END MediumFrequencyTask M1 3 */
    break;
 8001e60:	e035      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>

  case ANY_STOP:
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <TSK_MediumFrequencyTaskM1+0x308>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f00c fa84 	bl	800e374 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 8001e6c:	2000      	movs	r0, #0
 8001e6e:	f000 f845 	bl	8001efc <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00a f9f3 	bl	800c262 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 8001e7c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001e80:	f000 f940 	bl	8002104 <TSK_SetStopPermanencyTimeM1>

    /* USER CODE BEGIN MediumFrequencyTask M1 4 */

    /* USER CODE END MediumFrequencyTask M1 4 */

    STM_NextState( &STM[M1], STOP );
 8001e84:	2108      	movs	r1, #8
 8001e86:	4816      	ldr	r0, [pc, #88]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001e88:	f00d fa44 	bl	800f314 <STM_NextState>
    break;
 8001e8c:	e01f      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>

  case STOP:
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 8001e8e:	f000 f949 	bl	8002124 <TSK_StopPermanencyTimeHasElapsedM1>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d019      	beq.n	8001ecc <TSK_MediumFrequencyTaskM1+0x2ec>
    {
      STM_NextState( &STM[M1], STOP_IDLE );
 8001e98:	2109      	movs	r1, #9
 8001e9a:	4811      	ldr	r0, [pc, #68]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001e9c:	f00d fa3a 	bl	800f314 <STM_NextState>
    }
    break;
 8001ea0:	e014      	b.n	8001ecc <TSK_MediumFrequencyTaskM1+0x2ec>

  case STOP_IDLE:
    /* USER CODE BEGIN MediumFrequencyTask M1 5 */

    /* USER CODE END MediumFrequencyTask M1 5 */
    STM_NextState( &STM[M1], IDLE );
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	480e      	ldr	r0, [pc, #56]	; (8001ee0 <TSK_MediumFrequencyTaskM1+0x300>)
 8001ea6:	f00d fa35 	bl	800f314 <STM_NextState>
    break;
 8001eaa:	e010      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>

  default:
    break;
 8001eac:	bf00      	nop
 8001eae:	e00e      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    break;
 8001eb0:	bf00      	nop
 8001eb2:	e00c      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    break;
 8001eb4:	bf00      	nop
 8001eb6:	e00a      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    break;
 8001eb8:	bf00      	nop
 8001eba:	e008      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    break;
 8001ebc:	bf00      	nop
 8001ebe:	e006      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    break;
 8001ec0:	bf00      	nop
 8001ec2:	e004      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    break;
 8001ec4:	bf00      	nop
 8001ec6:	e002      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    break;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <TSK_MediumFrequencyTaskM1+0x2ee>
    break;
 8001ecc:	bf00      	nop
  }

  /* USER CODE BEGIN MediumFrequencyTask M1 6 */

  /* USER CODE END MediumFrequencyTask M1 6 */
}
 8001ece:	bf00      	nop
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2000027c 	.word	0x2000027c
 8001edc:	20000aa4 	.word	0x20000aa4
 8001ee0:	20000a98 	.word	0x20000a98
 8001ee4:	200002f8 	.word	0x200002f8
 8001ee8:	200009e0 	.word	0x200009e0
 8001eec:	200009f8 	.word	0x200009f8
 8001ef0:	20000aac 	.word	0x20000aac
 8001ef4:	20000244 	.word	0x20000244
 8001ef8:	200009f0 	.word	0x200009f0

08001efc <FOC_Clear>:
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_Clear 0 */

  /* USER CODE END FOC_Clear 0 */
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
 8001f06:	2300      	movs	r3, #0
 8001f08:	82bb      	strh	r3, [r7, #20]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	82fb      	strh	r3, [r7, #22]
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
 8001f0e:	2300      	movs	r3, #0
 8001f10:	823b      	strh	r3, [r7, #16]
 8001f12:	2300      	movs	r3, #0
 8001f14:	827b      	strh	r3, [r7, #18]
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};
 8001f16:	2300      	movs	r3, #0
 8001f18:	81bb      	strh	r3, [r7, #12]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	81fb      	strh	r3, [r7, #14]
  
  FOCVars[bMotor].Iab = NULL_ab;
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	4a3c      	ldr	r2, [pc, #240]	; (8002014 <FOC_Clear+0x118>)
 8001f22:	2126      	movs	r1, #38	; 0x26
 8001f24:	fb01 f303 	mul.w	r3, r1, r3
 8001f28:	4413      	add	r3, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	f107 0314 	add.w	r3, r7, #20
 8001f30:	6818      	ldr	r0, [r3, #0]
 8001f32:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	4a37      	ldr	r2, [pc, #220]	; (8002014 <FOC_Clear+0x118>)
 8001f38:	2126      	movs	r1, #38	; 0x26
 8001f3a:	fb01 f303 	mul.w	r3, r1, r3
 8001f3e:	4413      	add	r3, r2
 8001f40:	3304      	adds	r3, #4
 8001f42:	461a      	mov	r2, r3
 8001f44:	f107 030c 	add.w	r3, r7, #12
 8001f48:	6818      	ldr	r0, [r3, #0]
 8001f4a:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001f4c:	79fb      	ldrb	r3, [r7, #7]
 8001f4e:	4a31      	ldr	r2, [pc, #196]	; (8002014 <FOC_Clear+0x118>)
 8001f50:	2126      	movs	r1, #38	; 0x26
 8001f52:	fb01 f303 	mul.w	r3, r1, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	330c      	adds	r3, #12
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].Iqdref = NULL_qd;
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4a2b      	ldr	r2, [pc, #172]	; (8002014 <FOC_Clear+0x118>)
 8001f68:	2126      	movs	r1, #38	; 0x26
 8001f6a:	fb01 f303 	mul.w	r3, r1, r3
 8001f6e:	4413      	add	r3, r2
 8001f70:	3310      	adds	r3, #16
 8001f72:	461a      	mov	r2, r3
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	6818      	ldr	r0, [r3, #0]
 8001f7a:	6010      	str	r0, [r2, #0]
  FOCVars[bMotor].hTeref = (int16_t)0;
 8001f7c:	79fb      	ldrb	r3, [r7, #7]
 8001f7e:	4a25      	ldr	r2, [pc, #148]	; (8002014 <FOC_Clear+0x118>)
 8001f80:	2126      	movs	r1, #38	; 0x26
 8001f82:	fb01 f303 	mul.w	r3, r1, r3
 8001f86:	4413      	add	r3, r2
 8001f88:	331e      	adds	r3, #30
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	801a      	strh	r2, [r3, #0]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001f8e:	79fb      	ldrb	r3, [r7, #7]
 8001f90:	4a20      	ldr	r2, [pc, #128]	; (8002014 <FOC_Clear+0x118>)
 8001f92:	2126      	movs	r1, #38	; 0x26
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	3310      	adds	r3, #16
 8001f9c:	3306      	adds	r3, #6
 8001f9e:	f107 0210 	add.w	r2, r7, #16
 8001fa2:	6810      	ldr	r0, [r2, #0]
 8001fa4:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	4a1a      	ldr	r2, [pc, #104]	; (8002014 <FOC_Clear+0x118>)
 8001faa:	2126      	movs	r1, #38	; 0x26
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3318      	adds	r3, #24
 8001fb4:	3302      	adds	r3, #2
 8001fb6:	f107 020c 	add.w	r2, r7, #12
 8001fba:	6810      	ldr	r0, [r2, #0]
 8001fbc:	6018      	str	r0, [r3, #0]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4a14      	ldr	r2, [pc, #80]	; (8002014 <FOC_Clear+0x118>)
 8001fc2:	2126      	movs	r1, #38	; 0x26
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	4413      	add	r3, r2
 8001fca:	3320      	adds	r3, #32
 8001fcc:	2200      	movs	r2, #0
 8001fce:	801a      	strh	r2, [r3, #0]

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	4a11      	ldr	r2, [pc, #68]	; (8002018 <FOC_Clear+0x11c>)
 8001fd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd8:	2100      	movs	r1, #0
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f00a facf 	bl	800c57e <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <FOC_Clear+0x120>)
 8001fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f00a fac7 	bl	800c57e <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <FOC_Clear+0x124>)
 8001ff4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f00c ffc7 	bl	800ef8c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	4a08      	ldr	r2, [pc, #32]	; (8002024 <FOC_Clear+0x128>)
 8002002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002006:	4618      	mov	r0, r3
 8002008:	f00a ff15 	bl	800ce36 <PWMC_SwitchOffPWM>

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800200c:	bf00      	nop
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200009f8 	.word	0x200009f8
 8002018:	200009ec 	.word	0x200009ec
 800201c:	20000aa8 	.word	0x20000aa8
 8002020:	20000aac 	.word	0x20000aac
 8002024:	200009e0 	.word	0x200009e0

08002028 <FOC_InitAdditionalMethods>:
  *         START_TO_RUN state
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
    
  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <FOC_CalcCurrRef+0x70>)
 800204e:	2126      	movs	r1, #38	; 0x26
 8002050:	fb01 f303 	mul.w	r3, r1, r3
 8002054:	4413      	add	r3, r2
 8002056:	3324      	adds	r3, #36	; 0x24
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d123      	bne.n	80020a6 <FOC_CalcCurrRef+0x66>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	4a14      	ldr	r2, [pc, #80]	; (80020b4 <FOC_CalcCurrRef+0x74>)
 8002062:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002066:	79fc      	ldrb	r4, [r7, #7]
 8002068:	4618      	mov	r0, r3
 800206a:	f00d f885 	bl	800f178 <STC_CalcTorqueReference>
 800206e:	4603      	mov	r3, r0
 8002070:	4619      	mov	r1, r3
 8002072:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <FOC_CalcCurrRef+0x70>)
 8002074:	2326      	movs	r3, #38	; 0x26
 8002076:	fb03 f304 	mul.w	r3, r3, r4
 800207a:	4413      	add	r3, r2
 800207c:	331e      	adds	r3, #30
 800207e:	460a      	mov	r2, r1
 8002080:	801a      	strh	r2, [r3, #0]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8002082:	79fa      	ldrb	r2, [r7, #7]
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	490a      	ldr	r1, [pc, #40]	; (80020b0 <FOC_CalcCurrRef+0x70>)
 8002088:	2026      	movs	r0, #38	; 0x26
 800208a:	fb00 f202 	mul.w	r2, r0, r2
 800208e:	440a      	add	r2, r1
 8002090:	321e      	adds	r2, #30
 8002092:	f9b2 0000 	ldrsh.w	r0, [r2]
 8002096:	4a06      	ldr	r2, [pc, #24]	; (80020b0 <FOC_CalcCurrRef+0x70>)
 8002098:	2126      	movs	r1, #38	; 0x26
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	3310      	adds	r3, #16
 80020a2:	4602      	mov	r2, r0
 80020a4:	801a      	strh	r2, [r3, #0]

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80020a6:	bf00      	nop
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200009f8 	.word	0x200009f8
 80020b4:	20000aac 	.word	0x20000aac

080020b8 <TSK_SetChargeBootCapDelayM1>:
  *         for drivers boot capacitors charging of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
   hBootCapDelayCounterM1 = hTickCount;
 80020c2:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <TSK_SetChargeBootCapDelayM1+0x1c>)
 80020c4:	88fb      	ldrh	r3, [r7, #6]
 80020c6:	8013      	strh	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	2000060a 	.word	0x2000060a

080020d8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  *         capacitors of motor 1 has elapsed
  * @param  none
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
  bool retVal = false;
 80020de:	2300      	movs	r3, #0
 80020e0:	71fb      	strb	r3, [r7, #7]
  if (hBootCapDelayCounterM1 == 0)
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <TSK_ChargeBootCapDelayHasElapsedM1+0x28>)
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d101      	bne.n	80020f0 <TSK_ChargeBootCapDelayHasElapsedM1+0x18>
  {
    retVal = true;
 80020ec:	2301      	movs	r3, #1
 80020ee:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 80020f0:	79fb      	ldrb	r3, [r7, #7]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	2000060a 	.word	0x2000060a

08002104 <TSK_SetStopPermanencyTimeM1>:
  *         time in STOP state of motor 1
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	80fb      	strh	r3, [r7, #6]
  hStopPermanencyCounterM1 = hTickCount;
 800210e:	4a04      	ldr	r2, [pc, #16]	; (8002120 <TSK_SetStopPermanencyTimeM1+0x1c>)
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	8013      	strh	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	2000060c 	.word	0x2000060c

08002124 <TSK_StopPermanencyTimeHasElapsedM1>:
  *         of motor 1 has elapsed
  * @param  none
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
  bool retVal = false;
 800212a:	2300      	movs	r3, #0
 800212c:	71fb      	strb	r3, [r7, #7]
  if (hStopPermanencyCounterM1 == 0)
 800212e:	4b07      	ldr	r3, [pc, #28]	; (800214c <TSK_StopPermanencyTimeHasElapsedM1+0x28>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	2b00      	cmp	r3, #0
 8002136:	d101      	bne.n	800213c <TSK_StopPermanencyTimeHasElapsedM1+0x18>
  {
    retVal = true;
 8002138:	2301      	movs	r3, #1
 800213a:	71fb      	strb	r3, [r7, #7]
  }
  return (retVal);
 800213c:	79fb      	ldrb	r3, [r7, #7]
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	2000060c 	.word	0x2000060c

08002150 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  
  uint8_t bMotorNbr = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	71fb      	strb	r3, [r7, #7]
  uint16_t hFOCreturn;
 

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 800215a:	480a      	ldr	r0, [pc, #40]	; (8002184 <TSK_HighFrequencyTask+0x34>)
 800215c:	f009 fe46 	bl	800bdec <ENC_CalcAngle>

  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
  hFOCreturn = FOC_CurrControllerM1();
 8002160:	f000 f814 	bl	800218c <FOC_CurrControllerM1>
 8002164:	4603      	mov	r3, r0
 8002166:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */

  /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
  if(hFOCreturn == MC_FOC_DURATION)
 8002168:	88bb      	ldrh	r3, [r7, #4]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d104      	bne.n	8002178 <TSK_HighFrequencyTask+0x28>
  {
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 800216e:	2200      	movs	r2, #0
 8002170:	2101      	movs	r1, #1
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <TSK_HighFrequencyTask+0x38>)
 8002174:	f00d fa30 	bl	800f5d8 <STM_FaultProcessing>
  }
  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  return bMotorNbr;
 8002178:	79fb      	ldrb	r3, [r7, #7]
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	2000027c 	.word	0x2000027c
 8002188:	20000a98 	.word	0x20000a98

0800218c <FOC_CurrControllerM1>:
  * @param this related object of class CFOC.
  * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
  *         next PWM Update event, MC_FOC_DURATION otherwise
  */
inline uint16_t FOC_CurrControllerM1(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b088      	sub	sp, #32
 8002190:	af00      	add	r7, sp, #0

  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002192:	4b42      	ldr	r3, [pc, #264]	; (800229c <FOC_CurrControllerM1+0x110>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f00c feec 	bl	800ef74 <STC_GetSpeedSensor>
 800219c:	61f8      	str	r0, [r7, #28]
  hElAngle = SPD_GetElAngle(speedHandle);
 800219e:	69f8      	ldr	r0, [r7, #28]
 80021a0:	f00c fdff 	bl	800eda2 <SPD_GetElAngle>
 80021a4:	4603      	mov	r3, r0
 80021a6:	837b      	strh	r3, [r7, #26]
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80021a8:	4b3d      	ldr	r3, [pc, #244]	; (80022a0 <FOC_CurrControllerM1+0x114>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f107 020c 	add.w	r2, r7, #12
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f00a fc28 	bl	800ca08 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 80021b8:	68f8      	ldr	r0, [r7, #12]
 80021ba:	f7ff fa4f 	bl	800165c <MCM_Clarke>
 80021be:	4603      	mov	r3, r0
 80021c0:	60bb      	str	r3, [r7, #8]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80021c2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80021c6:	4619      	mov	r1, r3
 80021c8:	68b8      	ldr	r0, [r7, #8]
 80021ca:	f7ff fa91 	bl	80016f0 <MCM_Park>
 80021ce:	4603      	mov	r3, r0
 80021d0:	617b      	str	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80021d2:	4b34      	ldr	r3, [pc, #208]	; (80022a4 <FOC_CurrControllerM1+0x118>)
 80021d4:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80021d6:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <FOC_CurrControllerM1+0x11c>)
 80021d8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80021dc:	4619      	mov	r1, r3
 80021de:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
  Vqd.q = PI_Controller(pPIDIq[M1],
 80021e2:	1acb      	subs	r3, r1, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	4610      	mov	r0, r2
 80021e8:	f00a fa0c 	bl	800c604 <PI_Controller>
 80021ec:	4603      	mov	r3, r0
 80021ee:	823b      	strh	r3, [r7, #16]

  Vqd.d = PI_Controller(pPIDId[M1],
 80021f0:	4b2e      	ldr	r3, [pc, #184]	; (80022ac <FOC_CurrControllerM1+0x120>)
 80021f2:	681a      	ldr	r2, [r3, #0]
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <FOC_CurrControllerM1+0x11c>)
 80021f6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80021fa:	4619      	mov	r1, r3
 80021fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
  Vqd.d = PI_Controller(pPIDId[M1],
 8002200:	1acb      	subs	r3, r1, r3
 8002202:	4619      	mov	r1, r3
 8002204:	4610      	mov	r0, r2
 8002206:	f00a f9fd 	bl	800c604 <PI_Controller>
 800220a:	4603      	mov	r3, r0
 800220c:	827b      	strh	r3, [r7, #18]
  
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 800220e:	4b28      	ldr	r3, [pc, #160]	; (80022b0 <FOC_CurrControllerM1+0x124>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6939      	ldr	r1, [r7, #16]
 8002214:	4618      	mov	r0, r3
 8002216:	f009 fb2c 	bl	800b872 <Circle_Limitation>
 800221a:	4603      	mov	r3, r0
 800221c:	613b      	str	r3, [r7, #16]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800221e:	69f8      	ldr	r0, [r7, #28]
 8002220:	f00c fdd9 	bl	800edd6 <SPD_GetInstElSpeedDpp>
 8002224:	2300      	movs	r3, #0
 8002226:	b29a      	uxth	r2, r3
 8002228:	8b7b      	ldrh	r3, [r7, #26]
 800222a:	4413      	add	r3, r2
 800222c:	b29b      	uxth	r3, r3
 800222e:	837b      	strh	r3, [r7, #26]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002230:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002234:	4619      	mov	r1, r3
 8002236:	6938      	ldr	r0, [r7, #16]
 8002238:	f7ff fad2 	bl	80017e0 <MCM_Rev_Park>
 800223c:	4603      	mov	r3, r0
 800223e:	607b      	str	r3, [r7, #4]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002240:	4b17      	ldr	r3, [pc, #92]	; (80022a0 <FOC_CurrControllerM1+0x114>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4618      	mov	r0, r3
 8002248:	f00a fbec 	bl	800ca24 <PWMC_SetPhaseVoltage>
 800224c:	4603      	mov	r3, r0
 800224e:	833b      	strh	r3, [r7, #24]
  FOCVars[M1].Vqd = Vqd;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <FOC_CurrControllerM1+0x11c>)
 8002252:	3316      	adds	r3, #22
 8002254:	f107 0210 	add.w	r2, r7, #16
 8002258:	6810      	ldr	r0, [r2, #0]
 800225a:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iab = Iab;
 800225c:	4b12      	ldr	r3, [pc, #72]	; (80022a8 <FOC_CurrControllerM1+0x11c>)
 800225e:	461a      	mov	r2, r3
 8002260:	f107 030c 	add.w	r3, r7, #12
 8002264:	6818      	ldr	r0, [r3, #0]
 8002266:	6010      	str	r0, [r2, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002268:	4b0f      	ldr	r3, [pc, #60]	; (80022a8 <FOC_CurrControllerM1+0x11c>)
 800226a:	3304      	adds	r3, #4
 800226c:	f107 0208 	add.w	r2, r7, #8
 8002270:	6810      	ldr	r0, [r2, #0]
 8002272:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Iqd = Iqd;
 8002274:	4b0c      	ldr	r3, [pc, #48]	; (80022a8 <FOC_CurrControllerM1+0x11c>)
 8002276:	330c      	adds	r3, #12
 8002278:	f107 0214 	add.w	r2, r7, #20
 800227c:	6810      	ldr	r0, [r2, #0]
 800227e:	6018      	str	r0, [r3, #0]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002280:	4b09      	ldr	r3, [pc, #36]	; (80022a8 <FOC_CurrControllerM1+0x11c>)
 8002282:	331a      	adds	r3, #26
 8002284:	1d3a      	adds	r2, r7, #4
 8002286:	6810      	ldr	r0, [r2, #0]
 8002288:	6018      	str	r0, [r3, #0]
  FOCVars[M1].hElAngle = hElAngle;
 800228a:	4a07      	ldr	r2, [pc, #28]	; (80022a8 <FOC_CurrControllerM1+0x11c>)
 800228c:	8b7b      	ldrh	r3, [r7, #26]
 800228e:	8413      	strh	r3, [r2, #32]
  return(hCodeError);
 8002290:	8b3b      	ldrh	r3, [r7, #24]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	20000aac 	.word	0x20000aac
 80022a0:	200009e0 	.word	0x200009e0
 80022a4:	200009ec 	.word	0x200009ec
 80022a8:	200009f8 	.word	0x200009f8
 80022ac:	20000aa8 	.word	0x20000aa8
 80022b0:	20000a74 	.word	0x20000a74

080022b4 <TSK_SafetyTask>:
  * @brief  Executes safety checks (e.g. bus voltage and temperature) for all drive instances. 
  *
  * Faults flags are updated here.
  */
__weak void TSK_SafetyTask(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_SafetyTask 0 */

  /* USER CODE END TSK_SafetyTask 0 */
  if (bMCBootCompleted == 1)
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <TSK_SafetyTask+0x1c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d104      	bne.n	80022ca <TSK_SafetyTask+0x16>
  {  
    TSK_SafetyTask_PWMOFF(M1);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f000 f807 	bl	80022d4 <TSK_SafetyTask_PWMOFF>
    /* User conversion execution */
    RCM_ExecUserConv ();
 80022c6:	f001 fa27 	bl	8003718 <RCM_ExecUserConv>
  /* USER CODE BEGIN TSK_SafetyTask 1 */

  /* USER CODE END TSK_SafetyTask 1 */
  }
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	2000060e 	.word	0x2000060e

080022d4 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 0 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  
  uint16_t CodeReturn = MC_NO_ERROR;
 80022de:	2300      	movs	r3, #0
 80022e0:	81fb      	strh	r3, [r7, #14]
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
 80022e2:	230e      	movs	r3, #14
 80022e4:	81bb      	strh	r3, [r7, #12]

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	f107 0210 	add.w	r2, r7, #16
 80022ee:	4413      	add	r3, r2
 80022f0:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 80022f4:	79fb      	ldrb	r3, [r7, #7]
 80022f6:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <TSK_SafetyTask_PWMOFF+0x120>)
 80022f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f00a f876 	bl	800c3ee <NTC_CalcAvTemp>
 8002302:	4603      	mov	r3, r0
 8002304:	4023      	ands	r3, r4
 8002306:	b29b      	uxth	r3, r3
 8002308:	b21a      	sxth	r2, r3
 800230a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800230e:	4313      	orrs	r3, r2
 8002310:	b21b      	sxth	r3, r3
 8002312:	81fb      	strh	r3, [r7, #14]
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS 
 8002314:	79fb      	ldrb	r3, [r7, #7]
 8002316:	4a38      	ldr	r2, [pc, #224]	; (80023f8 <TSK_SafetyTask_PWMOFF+0x124>)
 8002318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231c:	4618      	mov	r0, r3
 800231e:	f00a fdd9 	bl	800ced4 <PWMC_CheckOverCurrent>
 8002322:	4603      	mov	r3, r0
 8002324:	461a      	mov	r2, r3
 8002326:	89fb      	ldrh	r3, [r7, #14]
 8002328:	4313      	orrs	r3, r2
 800232a:	81fb      	strh	r3, [r7, #14]
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800232c:	79fb      	ldrb	r3, [r7, #7]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d114      	bne.n	800235c <TSK_SafetyTask_PWMOFF+0x88>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	f107 0210 	add.w	r2, r7, #16
 800233a:	4413      	add	r3, r2
 800233c:	f833 4c04 	ldrh.w	r4, [r3, #-4]
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <TSK_SafetyTask_PWMOFF+0x128>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4618      	mov	r0, r3
 8002346:	f00c fc91 	bl	800ec6c <RVBS_CalcAvVbus>
 800234a:	4603      	mov	r3, r0
 800234c:	4023      	ands	r3, r4
 800234e:	b29b      	uxth	r3, r3
 8002350:	b21a      	sxth	r2, r3
 8002352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002356:	4313      	orrs	r3, r2
 8002358:	b21b      	sxth	r3, r3
 800235a:	81fb      	strh	r3, [r7, #14]
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800235c:	79fa      	ldrb	r2, [r7, #7]
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	4a26      	ldr	r2, [pc, #152]	; (8002400 <TSK_SafetyTask_PWMOFF+0x12c>)
 8002368:	1898      	adds	r0, r3, r2
 800236a:	89fb      	ldrh	r3, [r7, #14]
 800236c:	43db      	mvns	r3, r3
 800236e:	b29a      	uxth	r2, r3
 8002370:	89fb      	ldrh	r3, [r7, #14]
 8002372:	4619      	mov	r1, r3
 8002374:	f00d f930 	bl	800f5d8 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8002378:	79fa      	ldrb	r2, [r7, #7]
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4a1f      	ldr	r2, [pc, #124]	; (8002400 <TSK_SafetyTask_PWMOFF+0x12c>)
 8002384:	4413      	add	r3, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f00d f964 	bl	800f654 <STM_GetState>
 800238c:	4603      	mov	r3, r0
 800238e:	2b0a      	cmp	r3, #10
 8002390:	d002      	beq.n	8002398 <TSK_SafetyTask_PWMOFF+0xc4>
 8002392:	2b0b      	cmp	r3, #11
 8002394:	d021      	beq.n	80023da <TSK_SafetyTask_PWMOFF+0x106>
	/* USER CODE BEGIN TSK_SafetyTask_PWMOFF 2 */

    /* USER CODE END TSK_SafetyTask_PWMOFF 2 */
    break;
  default:
    break;
 8002396:	e028      	b.n	80023ea <TSK_SafetyTask_PWMOFF+0x116>
    if (pEAC[bMotor] != MC_NULL)
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	4a1a      	ldr	r2, [pc, #104]	; (8002404 <TSK_SafetyTask_PWMOFF+0x130>)
 800239c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d007      	beq.n	80023b4 <TSK_SafetyTask_PWMOFF+0xe0>
      EAC_SetRestartState( pEAC[bMotor], false );
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4a17      	ldr	r2, [pc, #92]	; (8002404 <TSK_SafetyTask_PWMOFF+0x130>)
 80023a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f009 fbb8 	bl	800bb24 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <TSK_SafetyTask_PWMOFF+0x124>)
 80023b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023bc:	4618      	mov	r0, r3
 80023be:	f00a fd3a 	bl	800ce36 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff fd99 	bl	8001efc <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <TSK_SafetyTask_PWMOFF+0x134>)
 80023ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f009 ff45 	bl	800c262 <MPM_Clear>
    break;
 80023d8:	e007      	b.n	80023ea <TSK_SafetyTask_PWMOFF+0x116>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4a06      	ldr	r2, [pc, #24]	; (80023f8 <TSK_SafetyTask_PWMOFF+0x124>)
 80023de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f00a fd27 	bl	800ce36 <PWMC_SwitchOffPWM>
    break;
 80023e8:	bf00      	nop
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80023ea:	bf00      	nop
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	200009dc 	.word	0x200009dc
 80023f8:	200009e0 	.word	0x200009e0
 80023fc:	20000a78 	.word	0x20000a78
 8002400:	20000a98 	.word	0x20000a98
 8002404:	200009e8 	.word	0x200009e8
 8002408:	20000aa4 	.word	0x20000aa4

0800240c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected  
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  
  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002410:	4b05      	ldr	r3, [pc, #20]	; (8002428 <TSK_HardwareFaultTask+0x1c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f00b ffad 	bl	800e374 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800241a:	2200      	movs	r2, #0
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	4803      	ldr	r0, [pc, #12]	; (800242c <TSK_HardwareFaultTask+0x20>)
 8002420:	f00d f8da 	bl	800f5d8 <STM_FaultProcessing>
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002424:	bf00      	nop
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200009e0 	.word	0x200009e0
 800242c:	20000a98 	.word	0x20000a98

08002430 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration 
  */
__weak void mc_lock_pins (void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	af00      	add	r7, sp, #0
LL_GPIO_LockPin(M1_OPAMP3_OUT_GPIO_Port, M1_OPAMP3_OUT_Pin);
 8002434:	2102      	movs	r1, #2
 8002436:	482f      	ldr	r0, [pc, #188]	; (80024f4 <mc_lock_pins+0xc4>)
 8002438:	f7ff fa3c 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OPAMP3_INT_GAIN_GPIO_Port, M1_OPAMP3_INT_GAIN_Pin);
 800243c:	2104      	movs	r1, #4
 800243e:	482d      	ldr	r0, [pc, #180]	; (80024f4 <mc_lock_pins+0xc4>)
 8002440:	f7ff fa38 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
 8002444:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002448:	482a      	ldr	r0, [pc, #168]	; (80024f4 <mc_lock_pins+0xc4>)
 800244a:	f7ff fa33 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
 800244e:	2101      	movs	r1, #1
 8002450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002454:	f7ff fa2e 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_W_GPIO_Port, M1_CURR_SHUNT_W_Pin);
 8002458:	2101      	movs	r1, #1
 800245a:	4826      	ldr	r0, [pc, #152]	; (80024f4 <mc_lock_pins+0xc4>)
 800245c:	f7ff fa2a 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_V_GPIO_Port, M1_CURR_SHUNT_V_Pin);
 8002460:	2180      	movs	r1, #128	; 0x80
 8002462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002466:	f7ff fa25 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_CURR_SHUNT_U_GPIO_Port, M1_CURR_SHUNT_U_Pin);
 800246a:	2102      	movs	r1, #2
 800246c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002470:	f7ff fa20 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OPAMP1_INT_GAIN_GPIO_Port, M1_OPAMP1_INT_GAIN_Pin);
 8002474:	2108      	movs	r1, #8
 8002476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800247a:	f7ff fa1b 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OPAMP1_OUT_GPIO_Port, M1_OPAMP1_OUT_Pin);
 800247e:	2104      	movs	r1, #4
 8002480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002484:	f7ff fa16 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OPAMP2_OUT_GPIO_Port, M1_OPAMP2_OUT_Pin);
 8002488:	2140      	movs	r1, #64	; 0x40
 800248a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248e:	f7ff fa11 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_OPAMP2_INT_GAIN_GPIO_Port, M1_OPAMP2_INT_GAIN_Pin);
 8002492:	2120      	movs	r1, #32
 8002494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002498:	f7ff fa0c 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_ENCODER_A_GPIO_Port, M1_ENCODER_A_Pin);
 800249c:	2140      	movs	r1, #64	; 0x40
 800249e:	4815      	ldr	r0, [pc, #84]	; (80024f4 <mc_lock_pins+0xc4>)
 80024a0:	f7ff fa08 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_ENCODER_B_GPIO_Port, M1_ENCODER_B_Pin);
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	4813      	ldr	r0, [pc, #76]	; (80024f4 <mc_lock_pins+0xc4>)
 80024a8:	f7ff fa04 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UH_GPIO_Port, M1_PWM_UH_Pin);
 80024ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b4:	f7ff f9fe 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
 80024b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80024bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c0:	f7ff f9f8 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
 80024c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024cc:	f7ff f9f2 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
 80024d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024d8:	f7ff f9ec 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
 80024dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024e0:	4804      	ldr	r0, [pc, #16]	; (80024f4 <mc_lock_pins+0xc4>)
 80024e2:	f7ff f9e7 	bl	80018b4 <LL_GPIO_LockPin>
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
 80024e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <mc_lock_pins+0xc8>)
 80024ec:	f7ff f9e2 	bl	80018b4 <LL_GPIO_LockPin>
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	48000400 	.word	0x48000400
 80024f8:	48000800 	.word	0x48000800

080024fc <MCP_Init>:
               FCP_SendFct_t fFcpSend, 
               FCP_ReceiveFct_t fFcpReceive, 
               FCP_AbortReceiveFct_t fFcpAbortReceive, 
               DAC_UI_Handle_t * pDAC, 
               const char* s_fwVer )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b086      	sub	sp, #24
 8002500:	af02      	add	r7, sp, #8
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
 8002508:	603b      	str	r3, [r7, #0]
  pHandle->pFCP = pFCP;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	631a      	str	r2, [r3, #48]	; 0x30
  pHandle->pDAC = pDAC;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  pHandle->s_fwVer = s_fwVer;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6a3a      	ldr	r2, [r7, #32]
 800251c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <MCP_Init+0x54>)
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <MCP_Init+0x58>)
 8002526:	4a0c      	ldr	r2, [pc, #48]	; (8002558 <MCP_Init+0x5c>)
 8002528:	68f9      	ldr	r1, [r7, #12]
 800252a:	68b8      	ldr	r0, [r7, #8]
 800252c:	f009 fe43 	bl	800c1b6 <FCP_SetClient>
                 (FCP_SentFrameCallback_t) & MCP_SentFrame,
                 (FCP_ReceivedFrameCallback_t) & MCP_ReceivedFrame,
                 (FCP_RxTimeoutCallback_t) & MCP_OnTimeOut );
  pHandle->fFcpSend = fFcpSend;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	635a      	str	r2, [r3, #52]	; 0x34
  pHandle->fFcpReceive = fFcpReceive;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	639a      	str	r2, [r3, #56]	; 0x38
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	63da      	str	r2, [r3, #60]	; 0x3c

  MCP_WaitNextFrame(pHandle);
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f000 f815 	bl	8002572 <MCP_WaitNextFrame>
}
 8002548:	bf00      	nop
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	0800255d 	.word	0x0800255d
 8002554:	080025c5 	.word	0x080025c5
 8002558:	080025a3 	.word	0x080025a3

0800255c <MCP_OnTimeOut>:
* @brief  Function used to set and report the Time Out.
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_OnTimeOut(MCP_Handle_t *pHandle)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
     MCP_WaitNextFrame(pHandle);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f804 	bl	8002572 <MCP_WaitNextFrame>
}
 800256a:	bf00      	nop
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}

08002572 <MCP_WaitNextFrame>:
* @brief  Function used to check next reception frame
*
* @param  pHandle Pointer on the handle of the component.
*/
__weak void MCP_WaitNextFrame(MCP_Handle_t *pHandle)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002582:	4610      	mov	r0, r2
 8002584:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2280      	movs	r2, #128	; 0x80
 800258a:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002596:	4610      	mov	r0, r2
 8002598:	4798      	blx	r3
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <MCP_SentFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_SentFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	60f8      	str	r0, [r7, #12]
 80025aa:	607a      	str	r2, [r7, #4]
 80025ac:	461a      	mov	r2, r3
 80025ae:	460b      	mov	r3, r1
 80025b0:	72fb      	strb	r3, [r7, #11]
 80025b2:	4613      	mov	r3, r2
 80025b4:	72bb      	strb	r3, [r7, #10]
    MCP_WaitNextFrame(pHandle);
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ffdb 	bl	8002572 <MCP_WaitNextFrame>
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 80025c4:	b590      	push	{r4, r7, lr}
 80025c6:	b0a9      	sub	sp, #164	; 0xa4
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	607a      	str	r2, [r7, #4]
 80025ce:	461a      	mov	r2, r3
 80025d0:	460b      	mov	r3, r1
 80025d2:	72fb      	strb	r3, [r7, #11]
 80025d4:	4613      	mov	r3, r2
 80025d6:	72bb      	strb	r3, [r7, #10]
  bool RequireAck = true;
 80025d8:	2301      	movs	r3, #1
 80025da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  bool bNoError = false; // Default is error
 80025de:	2300      	movs	r3, #0
 80025e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
 80025e4:	7afb      	ldrb	r3, [r7, #11]
 80025e6:	095b      	lsrs	r3, r3, #5
 80025e8:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  if (bMotorSelection != 0)
 80025ec:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d024      	beq.n	800263e <MCP_ReceivedFrame+0x7a>
  {
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 80025fa:	3b01      	subs	r3, #1
 80025fc:	461a      	mov	r2, r3
 80025fe:	2100      	movs	r1, #0
 8002600:	f001 ff60 	bl	80044c4 <UI_SetReg>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d014      	beq.n	8002634 <MCP_ReceivedFrame+0x70>
    {
      Code &= 0x1F; /* Mask: 0001|1111 */
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	72fb      	strb	r3, [r7, #11]

      /* Change also the DAC selected motor */
      if (pHandle->pDAC)
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <MCP_ReceivedFrame+0x7a>
      {
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002622:	4618      	mov	r0, r3
 8002624:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8002628:	3b01      	subs	r3, #1
 800262a:	461a      	mov	r2, r3
 800262c:	2100      	movs	r1, #0
 800262e:	f001 ff49 	bl	80044c4 <UI_SetReg>
 8002632:	e004      	b.n	800263e <MCP_ReceivedFrame+0x7a>
      }
    }
    else
    {
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
 8002634:	2300      	movs	r3, #0
 8002636:	72fb      	strb	r3, [r7, #11]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8002638:	230b      	movs	r3, #11
 800263a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
  }

  switch (Code)
 800263e:	7afb      	ldrb	r3, [r7, #11]
 8002640:	2b12      	cmp	r3, #18
 8002642:	f200 85a0 	bhi.w	8003186 <MCP_ReceivedFrame+0xbc2>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <MCP_ReceivedFrame+0x88>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	0800318f 	.word	0x0800318f
 8002650:	08002699 	.word	0x08002699
 8002654:	080029d9 	.word	0x080029d9
 8002658:	08002d8f 	.word	0x08002d8f
 800265c:	08003187 	.word	0x08003187
 8002660:	08003187 	.word	0x08003187
 8002664:	08002db3 	.word	0x08002db3
 8002668:	08002e77 	.word	0x08002e77
 800266c:	08002f29 	.word	0x08002f29
 8002670:	08002fc5 	.word	0x08002fc5
 8002674:	0800306d 	.word	0x0800306d
 8002678:	080030bb 	.word	0x080030bb
 800267c:	08003101 	.word	0x08003101
 8002680:	08002ecd 	.word	0x08002ecd
 8002684:	08003187 	.word	0x08003187
 8002688:	08003187 	.word	0x08003187
 800268c:	08003187 	.word	0x08003187
 8002690:	08003187 	.word	0x08003187
 8002694:	0800318f 	.word	0x0800318f
  {
  case MC_PROTOCOL_CODE_SET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
      bErrorCode = ERROR_CODE_WRONG_SET;
 80026a0:	2305      	movs	r3, #5
 80026a2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 80026a6:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80026aa:	2b88      	cmp	r3, #136	; 0x88
 80026ac:	f200 818f 	bhi.w	80029ce <MCP_ReceivedFrame+0x40a>
 80026b0:	a201      	add	r2, pc, #4	; (adr r2, 80026b8 <MCP_ReceivedFrame+0xf4>)
 80026b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b6:	bf00      	nop
 80026b8:	080028dd 	.word	0x080028dd
 80026bc:	080029cf 	.word	0x080029cf
 80026c0:	080029cf 	.word	0x080029cf
 80026c4:	0800290f 	.word	0x0800290f
 80026c8:	080029cf 	.word	0x080029cf
 80026cc:	08002967 	.word	0x08002967
 80026d0:	08002967 	.word	0x08002967
 80026d4:	08002967 	.word	0x08002967
 80026d8:	08002967 	.word	0x08002967
 80026dc:	08002967 	.word	0x08002967
 80026e0:	08002967 	.word	0x08002967
 80026e4:	08002967 	.word	0x08002967
 80026e8:	08002967 	.word	0x08002967
 80026ec:	08002967 	.word	0x08002967
 80026f0:	08002967 	.word	0x08002967
 80026f4:	08002967 	.word	0x08002967
 80026f8:	08002991 	.word	0x08002991
 80026fc:	08002991 	.word	0x08002991
 8002700:	080029cf 	.word	0x080029cf
 8002704:	080029cf 	.word	0x080029cf
 8002708:	08002967 	.word	0x08002967
 800270c:	08002967 	.word	0x08002967
 8002710:	08002967 	.word	0x08002967
 8002714:	08002967 	.word	0x08002967
 8002718:	08002967 	.word	0x08002967
 800271c:	080029cf 	.word	0x080029cf
 8002720:	080029cf 	.word	0x080029cf
 8002724:	080029cf 	.word	0x080029cf
 8002728:	0800292b 	.word	0x0800292b
 800272c:	08002949 	.word	0x08002949
 8002730:	080029cf 	.word	0x080029cf
 8002734:	080029cf 	.word	0x080029cf
 8002738:	080029cf 	.word	0x080029cf
 800273c:	080029cf 	.word	0x080029cf
 8002740:	080029cf 	.word	0x080029cf
 8002744:	080029cf 	.word	0x080029cf
 8002748:	080029cf 	.word	0x080029cf
 800274c:	080029cf 	.word	0x080029cf
 8002750:	080029cf 	.word	0x080029cf
 8002754:	080029cf 	.word	0x080029cf
 8002758:	080029cf 	.word	0x080029cf
 800275c:	080029cf 	.word	0x080029cf
 8002760:	080029cf 	.word	0x080029cf
 8002764:	080029cf 	.word	0x080029cf
 8002768:	080029cf 	.word	0x080029cf
 800276c:	080029cf 	.word	0x080029cf
 8002770:	080029cf 	.word	0x080029cf
 8002774:	080029cf 	.word	0x080029cf
 8002778:	080029cf 	.word	0x080029cf
 800277c:	080029cf 	.word	0x080029cf
 8002780:	080029cf 	.word	0x080029cf
 8002784:	080029cf 	.word	0x080029cf
 8002788:	080029cf 	.word	0x080029cf
 800278c:	080029cf 	.word	0x080029cf
 8002790:	080029cf 	.word	0x080029cf
 8002794:	080029cf 	.word	0x080029cf
 8002798:	080029cf 	.word	0x080029cf
 800279c:	080029cf 	.word	0x080029cf
 80027a0:	080029cf 	.word	0x080029cf
 80027a4:	080029cf 	.word	0x080029cf
 80027a8:	080029cf 	.word	0x080029cf
 80027ac:	080029cf 	.word	0x080029cf
 80027b0:	080029cf 	.word	0x080029cf
 80027b4:	080029cf 	.word	0x080029cf
 80027b8:	080029cf 	.word	0x080029cf
 80027bc:	08002967 	.word	0x08002967
 80027c0:	080029cf 	.word	0x080029cf
 80027c4:	080029cf 	.word	0x080029cf
 80027c8:	080029cf 	.word	0x080029cf
 80027cc:	080029cf 	.word	0x080029cf
 80027d0:	08002991 	.word	0x08002991
 80027d4:	08002991 	.word	0x08002991
 80027d8:	08002991 	.word	0x08002991
 80027dc:	080029cf 	.word	0x080029cf
 80027e0:	080029cf 	.word	0x080029cf
 80027e4:	080029cf 	.word	0x080029cf
 80027e8:	080029cf 	.word	0x080029cf
 80027ec:	080029cf 	.word	0x080029cf
 80027f0:	080029cf 	.word	0x080029cf
 80027f4:	08002967 	.word	0x08002967
 80027f8:	080029cf 	.word	0x080029cf
 80027fc:	080029cf 	.word	0x080029cf
 8002800:	080029cf 	.word	0x080029cf
 8002804:	08002967 	.word	0x08002967
 8002808:	08002967 	.word	0x08002967
 800280c:	08002967 	.word	0x08002967
 8002810:	08002967 	.word	0x08002967
 8002814:	08002967 	.word	0x08002967
 8002818:	08002967 	.word	0x08002967
 800281c:	08002967 	.word	0x08002967
 8002820:	080029cf 	.word	0x080029cf
 8002824:	08002991 	.word	0x08002991
 8002828:	080029cf 	.word	0x080029cf
 800282c:	080029cf 	.word	0x080029cf
 8002830:	080029cf 	.word	0x080029cf
 8002834:	080029cf 	.word	0x080029cf
 8002838:	080029cf 	.word	0x080029cf
 800283c:	08002967 	.word	0x08002967
 8002840:	080029cf 	.word	0x080029cf
 8002844:	080029cf 	.word	0x080029cf
 8002848:	08002967 	.word	0x08002967
 800284c:	08002967 	.word	0x08002967
 8002850:	080029cf 	.word	0x080029cf
 8002854:	080029cf 	.word	0x080029cf
 8002858:	080029cf 	.word	0x080029cf
 800285c:	080029cf 	.word	0x080029cf
 8002860:	080029cf 	.word	0x080029cf
 8002864:	080029cf 	.word	0x080029cf
 8002868:	080029cf 	.word	0x080029cf
 800286c:	080029cf 	.word	0x080029cf
 8002870:	080029cf 	.word	0x080029cf
 8002874:	080029cf 	.word	0x080029cf
 8002878:	080029cf 	.word	0x080029cf
 800287c:	080029cf 	.word	0x080029cf
 8002880:	080029cf 	.word	0x080029cf
 8002884:	080029cf 	.word	0x080029cf
 8002888:	0800290f 	.word	0x0800290f
 800288c:	08002991 	.word	0x08002991
 8002890:	08002991 	.word	0x08002991
 8002894:	08002991 	.word	0x08002991
 8002898:	08002991 	.word	0x08002991
 800289c:	08002991 	.word	0x08002991
 80028a0:	080029cf 	.word	0x080029cf
 80028a4:	080029cf 	.word	0x080029cf
 80028a8:	080029cf 	.word	0x080029cf
 80028ac:	08002991 	.word	0x08002991
 80028b0:	08002991 	.word	0x08002991
 80028b4:	080029cf 	.word	0x080029cf
 80028b8:	080029cf 	.word	0x080029cf
 80028bc:	080029cf 	.word	0x080029cf
 80028c0:	080029cf 	.word	0x080029cf
 80028c4:	080029cf 	.word	0x080029cf
 80028c8:	080029cf 	.word	0x080029cf
 80028cc:	080029cf 	.word	0x080029cf
 80028d0:	08002967 	.word	0x08002967
 80028d4:	08002967 	.word	0x08002967
 80028d8:	08002967 	.word	0x08002967
      {
      case MC_PROTOCOL_REG_TARGET_MOTOR:
        {
          /* Deprecated */
          int32_t wValue = (int32_t)(buffer[1]);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3301      	adds	r3, #1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	663b      	str	r3, [r7, #96]	; 0x60

          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80028ea:	4618      	mov	r0, r3
 80028ec:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80028f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80028f2:	4619      	mov	r1, r3
 80028f4:	f001 fde6 	bl	80044c4 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80028fe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fddf 	bl	80044c4 <UI_SetReg>
 8002906:	4603      	mov	r3, r0
 8002908:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 800290c:	e063      	b.n	80029d6 <MCP_ReceivedFrame+0x412>
      case MC_PROTOCOL_REG_CONTROL_MODE:
      case MC_PROTOCOL_REG_SC_PP:
        {
          /* 8bit variables */
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800290e:	68f8      	ldr	r0, [r7, #12]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	3301      	adds	r3, #1
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800291c:	4619      	mov	r1, r3
 800291e:	f001 fdd1 	bl	80044c4 <UI_SetReg>
 8002922:	4603      	mov	r3, r0
 8002924:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002928:	e055      	b.n	80029d6 <MCP_ReceivedFrame+0x412>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002930:	4618      	mov	r0, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	3301      	adds	r3, #1
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	2100      	movs	r1, #0
 800293c:	f002 fc32 	bl	80051a4 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8002940:	2301      	movs	r3, #1
 8002942:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002946:	e046      	b.n	80029d6 <MCP_ReceivedFrame+0x412>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800294e:	4618      	mov	r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3301      	adds	r3, #1
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	2101      	movs	r1, #1
 800295a:	f002 fc23 	bl	80051a4 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 800295e:	2301      	movs	r3, #1
 8002960:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 8002964:	e037      	b.n	80029d6 <MCP_ReceivedFrame+0x412>
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          /* 16bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3301      	adds	r3, #1
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3302      	adds	r3, #2
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	021b      	lsls	r3, r3, #8
 8002976:	4413      	add	r3, r2
 8002978:	667b      	str	r3, [r7, #100]	; 0x64
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 8002980:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002982:	4618      	mov	r0, r3
 8002984:	f001 fd9e 	bl	80044c4 <UI_SetReg>
 8002988:	4603      	mov	r3, r0
 800298a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 800298e:	e022      	b.n	80029d6 <MCP_ReceivedFrame+0x412>
      case MC_PROTOCOL_REG_SC_CURRBANDWIDTH:
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
        {
          /* 32bit variables */
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3301      	adds	r3, #1
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3302      	adds	r3, #2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	441a      	add	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	3303      	adds	r3, #3
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	441a      	add	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3304      	adds	r3, #4
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	061b      	lsls	r3, r3, #24
 80029b4:	4413      	add	r3, r2
 80029b6:	66bb      	str	r3, [r7, #104]	; 0x68
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f897 106d 	ldrb.w	r1, [r7, #109]	; 0x6d
 80029be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fd7f 	bl	80044c4 <UI_SetReg>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
        }
        break;
 80029cc:	e003      	b.n	80029d6 <MCP_ReceivedFrame+0x412>

      default:
        {
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 80029ce:	2302      	movs	r3, #2
 80029d0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        }
        break;
 80029d4:	bf00      	nop
      }
    }
    break;
 80029d6:	e3dd      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>

  case MC_PROTOCOL_CODE_GET_REG:
    {
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 80029e0:	2303      	movs	r3, #3
 80029e2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

      switch (bRegID)
 80029e6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80029ea:	2b88      	cmp	r3, #136	; 0x88
 80029ec:	f200 81bf 	bhi.w	8002d6e <MCP_ReceivedFrame+0x7aa>
 80029f0:	a201      	add	r2, pc, #4	; (adr r2, 80029f8 <MCP_ReceivedFrame+0x434>)
 80029f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002c1d 	.word	0x08002c1d
 80029fc:	08002d03 	.word	0x08002d03
 8002a00:	08002c1d 	.word	0x08002c1d
 8002a04:	08002c1d 	.word	0x08002c1d
 8002a08:	08002d03 	.word	0x08002d03
 8002a0c:	08002ccd 	.word	0x08002ccd
 8002a10:	08002ccd 	.word	0x08002ccd
 8002a14:	08002ccd 	.word	0x08002ccd
 8002a18:	08002ccd 	.word	0x08002ccd
 8002a1c:	08002ccd 	.word	0x08002ccd
 8002a20:	08002ccd 	.word	0x08002ccd
 8002a24:	08002ccd 	.word	0x08002ccd
 8002a28:	08002ccd 	.word	0x08002ccd
 8002a2c:	08002ccd 	.word	0x08002ccd
 8002a30:	08002ccd 	.word	0x08002ccd
 8002a34:	08002ccd 	.word	0x08002ccd
 8002a38:	08002ccd 	.word	0x08002ccd
 8002a3c:	08002ccd 	.word	0x08002ccd
 8002a40:	08002ccd 	.word	0x08002ccd
 8002a44:	08002ccd 	.word	0x08002ccd
 8002a48:	08002ccd 	.word	0x08002ccd
 8002a4c:	08002ccd 	.word	0x08002ccd
 8002a50:	08002ccd 	.word	0x08002ccd
 8002a54:	08002ccd 	.word	0x08002ccd
 8002a58:	08002ccd 	.word	0x08002ccd
 8002a5c:	08002ccd 	.word	0x08002ccd
 8002a60:	08002ccd 	.word	0x08002ccd
 8002a64:	08002ccd 	.word	0x08002ccd
 8002a68:	08002c55 	.word	0x08002c55
 8002a6c:	08002c95 	.word	0x08002c95
 8002a70:	08002d03 	.word	0x08002d03
 8002a74:	08002ccd 	.word	0x08002ccd
 8002a78:	08002ccd 	.word	0x08002ccd
 8002a7c:	08002ccd 	.word	0x08002ccd
 8002a80:	08002c1d 	.word	0x08002c1d
 8002a84:	08002d6f 	.word	0x08002d6f
 8002a88:	08002d6f 	.word	0x08002d6f
 8002a8c:	08002d6f 	.word	0x08002d6f
 8002a90:	08002d6f 	.word	0x08002d6f
 8002a94:	08002d6f 	.word	0x08002d6f
 8002a98:	08002d6f 	.word	0x08002d6f
 8002a9c:	08002d6f 	.word	0x08002d6f
 8002aa0:	08002d6f 	.word	0x08002d6f
 8002aa4:	08002d6f 	.word	0x08002d6f
 8002aa8:	08002d6f 	.word	0x08002d6f
 8002aac:	08002d6f 	.word	0x08002d6f
 8002ab0:	08002d6f 	.word	0x08002d6f
 8002ab4:	08002d6f 	.word	0x08002d6f
 8002ab8:	08002d6f 	.word	0x08002d6f
 8002abc:	08002d6f 	.word	0x08002d6f
 8002ac0:	08002d6f 	.word	0x08002d6f
 8002ac4:	08002d6f 	.word	0x08002d6f
 8002ac8:	08002d6f 	.word	0x08002d6f
 8002acc:	08002d6f 	.word	0x08002d6f
 8002ad0:	08002d6f 	.word	0x08002d6f
 8002ad4:	08002d6f 	.word	0x08002d6f
 8002ad8:	08002d6f 	.word	0x08002d6f
 8002adc:	08002d6f 	.word	0x08002d6f
 8002ae0:	08002d6f 	.word	0x08002d6f
 8002ae4:	08002d6f 	.word	0x08002d6f
 8002ae8:	08002d6f 	.word	0x08002d6f
 8002aec:	08002d6f 	.word	0x08002d6f
 8002af0:	08002d6f 	.word	0x08002d6f
 8002af4:	08002d6f 	.word	0x08002d6f
 8002af8:	08002d6f 	.word	0x08002d6f
 8002afc:	08002ccd 	.word	0x08002ccd
 8002b00:	08002d6f 	.word	0x08002d6f
 8002b04:	08002d6f 	.word	0x08002d6f
 8002b08:	08002d6f 	.word	0x08002d6f
 8002b0c:	08002d6f 	.word	0x08002d6f
 8002b10:	08002d03 	.word	0x08002d03
 8002b14:	08002d03 	.word	0x08002d03
 8002b18:	08002d03 	.word	0x08002d03
 8002b1c:	08002ccd 	.word	0x08002ccd
 8002b20:	08002ccd 	.word	0x08002ccd
 8002b24:	08002ccd 	.word	0x08002ccd
 8002b28:	08002ccd 	.word	0x08002ccd
 8002b2c:	08002c1d 	.word	0x08002c1d
 8002b30:	08002d03 	.word	0x08002d03
 8002b34:	08002ccd 	.word	0x08002ccd
 8002b38:	08002ccd 	.word	0x08002ccd
 8002b3c:	08002ccd 	.word	0x08002ccd
 8002b40:	08002ccd 	.word	0x08002ccd
 8002b44:	08002ccd 	.word	0x08002ccd
 8002b48:	08002ccd 	.word	0x08002ccd
 8002b4c:	08002ccd 	.word	0x08002ccd
 8002b50:	08002ccd 	.word	0x08002ccd
 8002b54:	08002ccd 	.word	0x08002ccd
 8002b58:	08002ccd 	.word	0x08002ccd
 8002b5c:	08002ccd 	.word	0x08002ccd
 8002b60:	08002c1d 	.word	0x08002c1d
 8002b64:	08002d03 	.word	0x08002d03
 8002b68:	08002d6f 	.word	0x08002d6f
 8002b6c:	08002ccd 	.word	0x08002ccd
 8002b70:	08002ccd 	.word	0x08002ccd
 8002b74:	08002ccd 	.word	0x08002ccd
 8002b78:	08002ccd 	.word	0x08002ccd
 8002b7c:	08002ccd 	.word	0x08002ccd
 8002b80:	08002d6f 	.word	0x08002d6f
 8002b84:	08002d6f 	.word	0x08002d6f
 8002b88:	08002ccd 	.word	0x08002ccd
 8002b8c:	08002ccd 	.word	0x08002ccd
 8002b90:	08002c1d 	.word	0x08002c1d
 8002b94:	08002c1d 	.word	0x08002c1d
 8002b98:	08002d03 	.word	0x08002d03
 8002b9c:	08002d03 	.word	0x08002d03
 8002ba0:	08002d03 	.word	0x08002d03
 8002ba4:	08002d03 	.word	0x08002d03
 8002ba8:	08002d03 	.word	0x08002d03
 8002bac:	08002c1d 	.word	0x08002c1d
 8002bb0:	08002ccd 	.word	0x08002ccd
 8002bb4:	08002ccd 	.word	0x08002ccd
 8002bb8:	08002d03 	.word	0x08002d03
 8002bbc:	08002d6f 	.word	0x08002d6f
 8002bc0:	08002ccd 	.word	0x08002ccd
 8002bc4:	08002ccd 	.word	0x08002ccd
 8002bc8:	08002c1d 	.word	0x08002c1d
 8002bcc:	08002d03 	.word	0x08002d03
 8002bd0:	08002d03 	.word	0x08002d03
 8002bd4:	08002d03 	.word	0x08002d03
 8002bd8:	08002d03 	.word	0x08002d03
 8002bdc:	08002d03 	.word	0x08002d03
 8002be0:	08002d03 	.word	0x08002d03
 8002be4:	08002d03 	.word	0x08002d03
 8002be8:	08002d03 	.word	0x08002d03
 8002bec:	08002d03 	.word	0x08002d03
 8002bf0:	08002d03 	.word	0x08002d03
 8002bf4:	08002d03 	.word	0x08002d03
 8002bf8:	08002c1d 	.word	0x08002c1d
 8002bfc:	08002d6f 	.word	0x08002d6f
 8002c00:	08002c1d 	.word	0x08002c1d
 8002c04:	08002d39 	.word	0x08002d39
 8002c08:	08002d39 	.word	0x08002d39
 8002c0c:	08002d39 	.word	0x08002d39
 8002c10:	08002ccd 	.word	0x08002ccd
 8002c14:	08002ccd 	.word	0x08002ccd
 8002c18:	08002ccd 	.word	0x08002ccd
      case MC_PROTOCOL_REG_SC_PP:
      case MC_PROTOCOL_REG_SC_FOC_REP_RATE:
      case MC_PROTOCOL_REG_SC_COMPLETED:
        {
          /* 8bit variables */
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002c22:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002c26:	4618      	mov	r0, r3
 8002c28:	f001 fde0 	bl	80047ec <UI_GetReg>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	65bb      	str	r3, [r7, #88]	; 0x58
           if ( bNoError == true )
 8002c30:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	f000 809e 	beq.w	8002d76 <MCP_ReceivedFrame+0x7b2>
          {
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c42:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8002c46:	2301      	movs	r3, #1
 8002c48:	21f0      	movs	r1, #240	; 0xf0
 8002c4a:	47a0      	blx	r4
            RequireAck = false;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8002c52:	e090      	b.n	8002d76 <MCP_ReceivedFrame+0x7b2>

      case MC_PROTOCOL_REG_DAC_OUT1:
        {
          if (pHandle->pDAC)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 808d 	beq.w	8002d7a <MCP_ReceivedFrame+0x7b6>
          {
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002c66:	2100      	movs	r1, #0
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f002 fab1 	bl	80051d0 <UI_GetDAC>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c7c:	f107 0257 	add.w	r2, r7, #87	; 0x57
 8002c80:	2301      	movs	r3, #1
 8002c82:	21f0      	movs	r1, #240	; 0xf0
 8002c84:	47a0      	blx	r4
            bNoError = true;
 8002c86:	2301      	movs	r3, #1
 8002c88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
            RequireAck = false;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8002c92:	e072      	b.n	8002d7a <MCP_ReceivedFrame+0x7b6>

      case MC_PROTOCOL_REG_DAC_OUT2:
        {
          if (pHandle->pDAC)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d06f      	beq.n	8002d7e <MCP_ReceivedFrame+0x7ba>
          {
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f002 fa92 	bl	80051d0 <UI_GetDAC>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cba:	f107 0256 	add.w	r2, r7, #86	; 0x56
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	21f0      	movs	r1, #240	; 0xf0
 8002cc2:	47a0      	blx	r4
            bNoError = true;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
          }
        }
        break;
 8002cca:	e058      	b.n	8002d7e <MCP_ReceivedFrame+0x7ba>
      case MC_PROTOCOL_REG_PWBDID:
      case MC_PROTOCOL_REG_POSITION_KP:
      case MC_PROTOCOL_REG_POSITION_KI:
      case MC_PROTOCOL_REG_POSITION_KD:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002cd2:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f001 fd88 	bl	80047ec <UI_GetReg>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	653b      	str	r3, [r7, #80]	; 0x50
          if ( bNoError == true )
 8002ce0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d04c      	beq.n	8002d82 <MCP_ReceivedFrame+0x7be>
          {
            /* 16bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cf0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	21f0      	movs	r1, #240	; 0xf0
 8002cf8:	47a0      	blx	r4
            RequireAck = false;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8002d00:	e03f      	b.n	8002d82 <MCP_ReceivedFrame+0x7be>
      case MC_PROTOCOL_REG_SC_STARTUP_SPEED:
      case MC_PROTOCOL_REG_SC_STARTUP_ACC:
      case MC_PROTOCOL_REG_SC_PWM_FREQUENCY:
      case MC_PROTOCOL_REG_UID:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002d08:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f001 fd6d 	bl	80047ec <UI_GetReg>
 8002d12:	4603      	mov	r3, r0
 8002d14:	64fb      	str	r3, [r7, #76]	; 0x4c
          if ( bNoError == true )
 8002d16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d033      	beq.n	8002d86 <MCP_ReceivedFrame+0x7c2>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d26:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002d2a:	2304      	movs	r3, #4
 8002d2c:	21f0      	movs	r1, #240	; 0xf0
 8002d2e:	47a0      	blx	r4
            RequireAck = false;
 8002d30:	2300      	movs	r3, #0
 8002d32:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8002d36:	e026      	b.n	8002d86 <MCP_ReceivedFrame+0x7c2>

      case MC_PROTOCOL_REG_CURRENT_POSITION:
      case MC_PROTOCOL_REG_TARGET_POSITION:
      case MC_PROTOCOL_REG_MOVE_DURATION:
        {
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8002d3e:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 8002d42:	4618      	mov	r0, r3
 8002d44:	f001 fd52 	bl	80047ec <UI_GetReg>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	64bb      	str	r3, [r7, #72]	; 0x48
          if ( bNoError == true )
 8002d4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d01a      	beq.n	8002d8a <MCP_ReceivedFrame+0x7c6>
          {
            /* 32bit variables */
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002d5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d60:	2304      	movs	r3, #4
 8002d62:	21f0      	movs	r1, #240	; 0xf0
 8002d64:	47a0      	blx	r4
            RequireAck = false;
 8002d66:	2300      	movs	r3, #0
 8002d68:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
          }
        }
        break;
 8002d6c:	e00d      	b.n	8002d8a <MCP_ReceivedFrame+0x7c6>

      default:
        bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        break;
 8002d74:	e00a      	b.n	8002d8c <MCP_ReceivedFrame+0x7c8>
        break;
 8002d76:	bf00      	nop
 8002d78:	e20c      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
        break;
 8002d7a:	bf00      	nop
 8002d7c:	e20a      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
        break;
 8002d7e:	bf00      	nop
 8002d80:	e208      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
        break;
 8002d82:	bf00      	nop
 8002d84:	e206      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
        break;
 8002d86:	bf00      	nop
 8002d88:	e204      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
        break;
 8002d8a:	bf00      	nop
      }
    }
    break;
 8002d8c:	e202      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>

  case MC_PROTOCOL_CODE_EXECUTE_CMD:
    {
      uint8_t bCmdID = buffer[0];
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8002d96:	2307      	movs	r3, #7
 8002d98:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 f897 	bl	8004ed8 <UI_ExecCmd>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002db0:	e1f0      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
  case MC_PROTOCOL_CODE_GET_BOARD_INFO:
    {
      /* GetBoardInfo */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; i < 32; i++)
 8002db2:	2300      	movs	r3, #0
 8002db4:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002db8:	e00c      	b.n	8002dd4 <MCP_ReceivedFrame+0x810>
      {
        outBuff[i] = 0;
 8002dba:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002dbe:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8002dc2:	4413      	add	r3, r2
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f803 2c88 	strb.w	r2, [r3, #-136]
      for (i = 0; i < 32; i++)
 8002dca:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002dce:	3301      	adds	r3, #1
 8002dd0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002dd4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002dd8:	2b1f      	cmp	r3, #31
 8002dda:	d9ee      	bls.n	8002dba <MCP_ReceivedFrame+0x7f6>
      }
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002de2:	e013      	b.n	8002e0c <MCP_ReceivedFrame+0x848>
      {
        outBuff[3+i] = pHandle->s_fwVer[i];
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002dea:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002dee:	441a      	add	r2, r3
 8002df0:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002df4:	3303      	adds	r3, #3
 8002df6:	7812      	ldrb	r2, [r2, #0]
 8002df8:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8002dfc:	440b      	add	r3, r1
 8002dfe:	f803 2c88 	strb.w	r2, [r3, #-136]
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8002e02:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002e06:	3301      	adds	r3, #1
 8002e08:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8002e0c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002e10:	2b1c      	cmp	r3, #28
 8002e12:	d808      	bhi.n	8002e26 <MCP_ReceivedFrame+0x862>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e1a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002e1e:	4413      	add	r3, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b09      	cmp	r3, #9
 8002e24:	d1de      	bne.n	8002de4 <MCP_ReceivedFrame+0x820>
      }
      outBuff[0] = pHandle->s_fwVer[i+5];
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e2c:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002e30:	3305      	adds	r3, #5
 8002e32:	4413      	add	r3, r2
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	743b      	strb	r3, [r7, #16]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e3e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002e42:	3307      	adds	r3, #7
 8002e44:	4413      	add	r3, r2
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	747b      	strb	r3, [r7, #17]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002e50:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8002e54:	3309      	adds	r3, #9
 8002e56:	4413      	add	r3, r2
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	74bb      	strb	r3, [r7, #18]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e64:	f107 0210 	add.w	r2, r7, #16
 8002e68:	2320      	movs	r3, #32
 8002e6a:	21f0      	movs	r1, #240	; 0xf0
 8002e6c:	47a0      	blx	r4
      bNoError = true;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002e74:	e18e      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>

  case MC_PROTOCOL_CODE_SET_SPEED_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	3304      	adds	r3, #4
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3305      	adds	r3, #5
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	021b      	lsls	r3, r3, #8
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	461a      	mov	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3302      	adds	r3, #2
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	041b      	lsls	r3, r3, #16
 8002ea8:	441a      	add	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3303      	adds	r3, #3
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	061b      	lsls	r3, r3, #24
 8002eb2:	4413      	add	r3, r2
 8002eb4:	673b      	str	r3, [r7, #112]	; 0x70
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8002ebc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 f876 	bl	8004fb0 <UI_ExecSpeedRamp>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002eca:	e163      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
    }
    break;

  case MC_PROTOCOL_CODE_SET_TORQUE_RAMP:
    {
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	3305      	adds	r3, #5
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	021b      	lsls	r3, r3, #8
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	441a      	add	r2, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	3302      	adds	r3, #2
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	441a      	add	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3303      	adds	r3, #3
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	061b      	lsls	r3, r3, #24
 8002f08:	4413      	add	r3, r2
 8002f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8002f14:	b211      	sxth	r1, r2
 8002f16:	f8b7 2092 	ldrh.w	r2, [r7, #146]	; 0x92
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f002 f872 	bl	8005004 <UI_ExecTorqueRamp>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8002f26:	e135      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
      uint8_t outBuff[8];
      uint16_t Durationms;
      int16_t FinalMecSpeedUnit;
      int16_t FinalTorque;
      int32_t rpm;
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8002f28:	68f8      	ldr	r0, [r7, #12]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	7819      	ldrb	r1, [r3, #0]
 8002f2e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002f32:	f107 023e 	add.w	r2, r7, #62	; 0x3e
 8002f36:	f107 033a 	add.w	r3, r7, #58	; 0x3a
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4623      	mov	r3, r4
 8002f3e:	f002 f87e 	bl	800503e <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8002f42:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8002f46:	461a      	mov	r2, r3
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4a9f      	ldr	r2, [pc, #636]	; (80031d0 <MCP_ReceivedFrame+0xc0c>)
 8002f52:	fb82 1203 	smull	r1, r2, r2, r3
 8002f56:	1092      	asrs	r2, r2, #2
 8002f58:	17db      	asrs	r3, r3, #31
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	67bb      	str	r3, [r7, #120]	; 0x78
      outBuff[0] = (uint8_t)(rpm);
 8002f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
      outBuff[1] = (uint8_t)(rpm >> 8);
 8002f66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f68:	121b      	asrs	r3, r3, #8
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
      outBuff[2] = (uint8_t)(rpm >> 16);
 8002f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f72:	141b      	asrs	r3, r3, #16
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      outBuff[3] = (uint8_t)(rpm >> 24);
 8002f7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f7c:	161b      	asrs	r3, r3, #24
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
      outBuff[4] = (uint8_t)(FinalTorque);
 8002f84:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8002f8e:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8002f92:	121b      	asrs	r3, r3, #8
 8002f94:	b21b      	sxth	r3, r3
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
      outBuff[6] = (uint8_t)(Durationms);
 8002f9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8002fa4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002fb8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002fbc:	2308      	movs	r3, #8
 8002fbe:	21f0      	movs	r1, #240	; 0xf0
 8002fc0:	47a0      	blx	r4
    }
    break;
 8002fc2:	e0e7      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
      uint8_t bStage;
      uint16_t hDurationms;
      int16_t hFinalMecSpeedUnit;
      int16_t hFinalTorque;
      int32_t rpm;
      bStage = buffer[0];
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
      hDurationms = buffer[7] + (buffer[8] << 8);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3307      	adds	r3, #7
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3301      	adds	r3, #1
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	461a      	mov	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	021b      	lsls	r3, r3, #8
 8002ff6:	441a      	add	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3303      	adds	r3, #3
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	041b      	lsls	r3, r3, #16
 8003000:	441a      	add	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3304      	adds	r3, #4
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	061b      	lsls	r3, r3, #24
 800300a:	4413      	add	r3, r2
 800300c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8003010:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4a6d      	ldr	r2, [pc, #436]	; (80031d4 <MCP_ReceivedFrame+0xc10>)
 800301e:	fb82 1203 	smull	r1, r2, r2, r3
 8003022:	441a      	add	r2, r3
 8003024:	1152      	asrs	r2, r2, #5
 8003026:	17db      	asrs	r3, r3, #31
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	3305      	adds	r3, #5
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b29a      	uxth	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	3306      	adds	r3, #6
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	b29b      	uxth	r3, r3
 800303e:	021b      	lsls	r3, r3, #8
 8003040:	b29b      	uxth	r3, r3
 8003042:	4413      	add	r3, r2
 8003044:	b29b      	uxth	r3, r3
 8003046:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f9b7 407e 	ldrsh.w	r4, [r7, #126]	; 0x7e
 8003050:	f8b7 2084 	ldrh.w	r2, [r7, #132]	; 0x84
 8003054:	f897 1087 	ldrb.w	r1, [r7, #135]	; 0x87
 8003058:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	4623      	mov	r3, r4
 8003060:	f002 f827 	bl	80050b2 <UI_SetRevupData>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 800306a:	e093      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>

  case MC_PROTOCOL_CODE_SET_CURRENT_REF:
    {
      int16_t hIqRef;
      int16_t hIdRef;
      hIqRef = buffer[0] + (buffer[1] << 8);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	b29a      	uxth	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3301      	adds	r3, #1
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b29b      	uxth	r3, r3
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	b29b      	uxth	r3, r3
 800307e:	4413      	add	r3, r2
 8003080:	b29b      	uxth	r3, r3
 8003082:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
      hIdRef = buffer[2] + (buffer[3] << 8);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3302      	adds	r3, #2
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	b29a      	uxth	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3303      	adds	r3, #3
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	b29b      	uxth	r3, r3
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	b29b      	uxth	r3, r3
 800309a:	4413      	add	r3, r2
 800309c:	b29b      	uxth	r3, r3
 800309e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f9b7 2088 	ldrsh.w	r2, [r7, #136]	; 0x88
 80030a8:	f9b7 108a 	ldrsh.w	r1, [r7, #138]	; 0x8a
 80030ac:	4618      	mov	r0, r3
 80030ae:	f002 f830 	bl	8005112 <UI_SetCurrentReferences>
      bNoError = true;
 80030b2:	2301      	movs	r3, #1
 80030b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 80030b8:	e06c      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>

  case MC_PROTOCOL_CODE_GET_MP_INFO:
    {
      MPInfo_t stepList;
      stepList.data = buffer;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	633b      	str	r3, [r7, #48]	; 0x30
      stepList.len = Size;
 80030be:	7abb      	ldrb	r3, [r7, #10]
 80030c0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
      bErrorCode = ERROR_MP_NOT_ENABLED;
 80030c4:	230c      	movs	r3, #12
 80030c6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 80030ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80030ce:	4942      	ldr	r1, [pc, #264]	; (80031d8 <MCP_ReceivedFrame+0xc14>)
 80030d0:	4618      	mov	r0, r3
 80030d2:	f002 f83b 	bl	800514c <UI_GetMPInfo>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

      if (bNoError)
 80030dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d056      	beq.n	8003192 <MCP_ReceivedFrame+0xbce>
      {
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80030ec:	4b3a      	ldr	r3, [pc, #232]	; (80031d8 <MCP_ReceivedFrame+0xc14>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	4b39      	ldr	r3, [pc, #228]	; (80031d8 <MCP_ReceivedFrame+0xc14>)
 80030f2:	791b      	ldrb	r3, [r3, #4]
 80030f4:	21f0      	movs	r1, #240	; 0xf0
 80030f6:	47a0      	blx	r4
        RequireAck = false;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      }
    }
    break;
 80030fe:	e048      	b.n	8003192 <MCP_ReceivedFrame+0xbce>
    case MC_PROTOCOL_CODE_GET_FW_VERSION:
    {
      /* Get Firmware Version */
      unsigned char i;
      uint8_t outBuff[32];
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8003100:	2300      	movs	r3, #0
 8003102:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003106:	e012      	b.n	800312e <MCP_ReceivedFrame+0xb6a>
      {
        outBuff[i] = pHandle->s_fwVer[i];
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800310e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003112:	441a      	add	r2, r3
 8003114:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003118:	7812      	ldrb	r2, [r2, #0]
 800311a:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800311e:	440b      	add	r3, r1
 8003120:	f803 2c88 	strb.w	r2, [r3, #-136]
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8003124:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003128:	3301      	adds	r3, #1
 800312a:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 800312e:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003132:	2b1f      	cmp	r3, #31
 8003134:	d816      	bhi.n	8003164 <MCP_ReceivedFrame+0xba0>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800313c:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003140:	4413      	add	r3, r2
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1df      	bne.n	8003108 <MCP_ReceivedFrame+0xb44>
      }
      
      for (; i < 32; i++)
 8003148:	e00c      	b.n	8003164 <MCP_ReceivedFrame+0xba0>
      {
        outBuff[i] = 0;
 800314a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800314e:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8003152:	4413      	add	r3, r2
 8003154:	2200      	movs	r2, #0
 8003156:	f803 2c88 	strb.w	r2, [r3, #-136]
      for (; i < 32; i++)
 800315a:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 800315e:	3301      	adds	r3, #1
 8003160:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
 8003164:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8003168:	2b1f      	cmp	r3, #31
 800316a:	d9ee      	bls.n	800314a <MCP_ReceivedFrame+0xb86>
      }

      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003174:	f107 0210 	add.w	r2, r7, #16
 8003178:	2320      	movs	r3, #32
 800317a:	21f0      	movs	r1, #240	; 0xf0
 800317c:	47a0      	blx	r4
      bNoError = true;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    }
    break;
 8003184:	e006      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
    }
    break;
 800318c:	e002      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
    break;
 800318e:	bf00      	nop
 8003190:	e000      	b.n	8003194 <MCP_ReceivedFrame+0xbd0>
    break;
 8003192:	bf00      	nop
  }

  if (RequireAck)
 8003194:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8003198:	2b00      	cmp	r3, #0
 800319a:	d015      	beq.n	80031c8 <MCP_ReceivedFrame+0xc04>
  {
    if (bNoError)
 800319c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d008      	beq.n	80031b6 <MCP_ReceivedFrame+0xbf2>
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031ac:	2300      	movs	r3, #0
 80031ae:	2200      	movs	r2, #0
 80031b0:	21f0      	movs	r1, #240	; 0xf0
 80031b2:	47a0      	blx	r4
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
    }
  }
}
 80031b4:	e008      	b.n	80031c8 <MCP_ReceivedFrame+0xc04>
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031be:	f107 025e 	add.w	r2, r7, #94	; 0x5e
 80031c2:	2301      	movs	r3, #1
 80031c4:	21ff      	movs	r1, #255	; 0xff
 80031c6:	47a0      	blx	r4
}
 80031c8:	bf00      	nop
 80031ca:	379c      	adds	r7, #156	; 0x9c
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd90      	pop	{r4, r7, pc}
 80031d0:	66666667 	.word	0x66666667
 80031d4:	88888889 	.word	0x88888889
 80031d8:	20000610 	.word	0x20000610

080031dc <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and 
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void) 
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af02      	add	r7, sp, #8
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 80031e2:	f005 fb93 	bl	800890c <HAL_RCC_GetHCLKFreq>
 80031e6:	4602      	mov	r2, r0
 80031e8:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <MX_MotorControl_Init+0x3c>)
 80031ea:	fba3 2302 	umull	r2, r3, r3, r2
 80031ee:	09db      	lsrs	r3, r3, #7
 80031f0:	4618      	mov	r0, r3
 80031f2:	f004 f848 	bl	8007286 <HAL_SYSTICK_Config>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 80031f6:	4909      	ldr	r1, [pc, #36]	; (800321c <MX_MotorControl_Init+0x40>)
 80031f8:	4809      	ldr	r0, [pc, #36]	; (8003220 <MX_MotorControl_Init+0x44>)
 80031fa:	f7fe fb77 	bl	80018ec <MCboot>
  mc_lock_pins();
 80031fe:	f7ff f917 	bl	8002430 <mc_lock_pins>
  
  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 8003202:	4b08      	ldr	r3, [pc, #32]	; (8003224 <MX_MotorControl_Init+0x48>)
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	4b05      	ldr	r3, [pc, #20]	; (800321c <MX_MotorControl_Init+0x40>)
 8003208:	4a05      	ldr	r2, [pc, #20]	; (8003220 <MX_MotorControl_Init+0x44>)
 800320a:	2101      	movs	r1, #1
 800320c:	4806      	ldr	r0, [pc, #24]	; (8003228 <MX_MotorControl_Init+0x4c>)
 800320e:	f001 f839 	bl	8004284 <UI_TaskInit>
}
 8003212:	bf00      	nop
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	10624dd3 	.word	0x10624dd3
 800321c:	20000ab4 	.word	0x20000ab4
 8003220:	20000ab0 	.word	0x20000ab0
 8003224:	0800fe88 	.word	0x0800fe88
 8003228:	200005d8 	.word	0x200005d8

0800322c <LL_ADC_REG_SetSequencerLength>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323a:	f023 020f 	bic.w	r2, r3, #15
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	431a      	orrs	r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003246:	bf00      	nop
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003252:	b490      	push	{r4, r7}
 8003254:	b084      	sub	sp, #16
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	3330      	adds	r3, #48	; 0x30
 8003262:	461a      	mov	r2, r3
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	0a1b      	lsrs	r3, r3, #8
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	f003 030c 	and.w	r3, r3, #12
 800326e:	4413      	add	r3, r2
 8003270:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8003272:	6822      	ldr	r2, [r4, #0]
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	211f      	movs	r1, #31
 800327c:	fa01 f303 	lsl.w	r3, r1, r3
 8003280:	43db      	mvns	r3, r3
 8003282:	401a      	ands	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	f003 011f 	and.w	r1, r3, #31
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	fa01 f303 	lsl.w	r3, r1, r3
 8003296:	4313      	orrs	r3, r2
 8003298:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800329a:	bf00      	nop
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bc90      	pop	{r4, r7}
 80032a2:	4770      	bx	lr

080032a4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80032a4:	b490      	push	{r4, r7}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	60f8      	str	r0, [r7, #12]
 80032ac:	60b9      	str	r1, [r7, #8]
 80032ae:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	3314      	adds	r3, #20
 80032b4:	461a      	mov	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	0e5b      	lsrs	r3, r3, #25
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	4413      	add	r3, r2
 80032c2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	0d1b      	lsrs	r3, r3, #20
 80032ca:	f003 031f 	and.w	r3, r3, #31
 80032ce:	2107      	movs	r1, #7
 80032d0:	fa01 f303 	lsl.w	r3, r1, r3
 80032d4:	43db      	mvns	r3, r3
 80032d6:	401a      	ands	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	0d1b      	lsrs	r3, r3, #20
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	fa01 f303 	lsl.w	r3, r1, r3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80032ea:	bf00      	nop
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bc90      	pop	{r4, r7}
 80032f2:	4770      	bx	lr

080032f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003308:	f043 0201 	orr.w	r2, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b01      	cmp	r3, #1
 800332e:	d101      	bne.n	8003334 <LL_ADC_IsEnabled+0x18>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <LL_ADC_IsEnabled+0x1a>
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
 800334a:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003354:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003358:	683a      	ldr	r2, [r7, #0]
 800335a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800335e:	4313      	orrs	r3, r2
 8003360:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003388:	d101      	bne.n	800338e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80033ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80033b0:	f043 0204 	orr.w	r2, r3, #4
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80033b8:	bf00      	nop
 80033ba:	370c      	adds	r7, #12
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <LL_ADC_REG_ReadConversionData12>:
  * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
  * @param  ADCx ADC instance
  * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
  */
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	b29b      	uxth	r3, r3
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d101      	bne.n	80033f6 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 80033f6:	2300      	movs	r3, #0
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_ADC_IsActiveFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b04      	cmp	r3, #4
 8003416:	d101      	bne.n	800341c <LL_ADC_IsActiveFlag_EOC+0x18>
 8003418:	2301      	movs	r3, #1
 800341a:	e000      	b.n	800341e <LL_ADC_IsActiveFlag_EOC+0x1a>
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <LL_ADC_ClearFlag_EOC>:
  * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2204      	movs	r2, #4
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_ClearFlag_JEOC>:
  * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2220      	movs	r2, #32
 8003450:	601a      	str	r2, [r3, #0]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <LL_ADC_DisableIT_EOC>:
  * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f023 0204 	bic.w	r2, r3, #4
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	605a      	str	r2, [r3, #4]
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr

0800347e <LL_ADC_DisableIT_JEOC>:
  * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f023 0220 	bic.w	r2, r3, #32
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	605a      	str	r2, [r3, #4]
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <RCM_RegisterRegConv>:
  *         Contains ADC, Channel and sampling time to be used.
  *
  *  @retval the handle of the registered conversion or 255 if the registration failed
  */
uint8_t RCM_RegisterRegConv(RegConv_t * regConv)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint8_t handle=255;
 80034a8:	23ff      	movs	r3, #255	; 0xff
 80034aa:	73fb      	strb	r3, [r7, #15]
  uint8_t i=0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	73bb      	strb	r3, [r7, #14]
  
    /* Parse the array to be sure that same 
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
 80034b0:	e029      	b.n	8003506 <RCM_RegisterRegConv+0x66>
    { 
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)  
 80034b2:	7bbb      	ldrb	r3, [r7, #14]
 80034b4:	4a57      	ldr	r2, [pc, #348]	; (8003614 <RCM_RegisterRegConv+0x174>)
 80034b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d104      	bne.n	80034c8 <RCM_RegisterRegConv+0x28>
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d901      	bls.n	80034c8 <RCM_RegisterRegConv+0x28>
      {
        handle = i; /* First location available, but still looping to check that this config does not already exist*/ 
 80034c4:	7bbb      	ldrb	r3, [r7, #14]
 80034c6:	73fb      	strb	r3, [r7, #15]
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
 80034c8:	7bbb      	ldrb	r3, [r7, #14]
 80034ca:	4a52      	ldr	r2, [pc, #328]	; (8003614 <RCM_RegisterRegConv+0x174>)
 80034cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d015      	beq.n	8003500 <RCM_RegisterRegConv+0x60>
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 80034d4:	7bbb      	ldrb	r3, [r7, #14]
 80034d6:	4a4f      	ldr	r2, [pc, #316]	; (8003614 <RCM_RegisterRegConv+0x174>)
 80034d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034dc:	791a      	ldrb	r2, [r3, #4]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	791b      	ldrb	r3, [r3, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d10c      	bne.n	8003500 <RCM_RegisterRegConv+0x60>
            (RCM_handle_array [i]->regADC == regConv->regADC))
 80034e6:	7bbb      	ldrb	r3, [r7, #14]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <RCM_RegisterRegConv+0x174>)
 80034ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
        if ((RCM_handle_array [i]->channel == regConv->channel) && 
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d103      	bne.n	8003500 <RCM_RegisterRegConv+0x60>
          {
           handle =i; /* Reuse the same handle */
 80034f8:	7bbb      	ldrb	r3, [r7, #14]
 80034fa:	73fb      	strb	r3, [r7, #15]
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
 80034fc:	2304      	movs	r3, #4
 80034fe:	73bb      	strb	r3, [r7, #14]
          }
      }
      i++;
 8003500:	7bbb      	ldrb	r3, [r7, #14]
 8003502:	3301      	adds	r3, #1
 8003504:	73bb      	strb	r3, [r7, #14]
    while (i < RCM_MAX_CONV)
 8003506:	7bbb      	ldrb	r3, [r7, #14]
 8003508:	2b03      	cmp	r3, #3
 800350a:	d9d2      	bls.n	80034b2 <RCM_RegisterRegConv+0x12>
    }    
    if (handle < RCM_MAX_CONV )
 800350c:	7bfb      	ldrb	r3, [r7, #15]
 800350e:	2b03      	cmp	r3, #3
 8003510:	d87b      	bhi.n	800360a <RCM_RegisterRegConv+0x16a>
    {    
      RCM_handle_array [handle] = regConv;
 8003512:	7bfb      	ldrb	r3, [r7, #15]
 8003514:	493f      	ldr	r1, [pc, #252]	; (8003614 <RCM_RegisterRegConv+0x174>)
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 800351c:	7bfb      	ldrb	r3, [r7, #15]
 800351e:	4a3e      	ldr	r2, [pc, #248]	; (8003618 <RCM_RegisterRegConv+0x178>)
 8003520:	2100      	movs	r1, #0
 8003522:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff fef6 	bl	800331c <LL_ADC_IsEnabled>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d130      	bne.n	8003598 <RCM_RegisterRegConv+0xf8>
      {
       LL_ADC_DisableIT_EOC(regConv->regADC);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff ff8f 	bl	800345e <LL_ADC_DisableIT_EOC>
       LL_ADC_ClearFlag_EOC(regConv->regADC);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff ff70 	bl	800342a <LL_ADC_ClearFlag_EOC>
       LL_ADC_DisableIT_JEOC(regConv->regADC);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff ff95 	bl	800347e <LL_ADC_DisableIT_JEOC>
       LL_ADC_ClearFlag_JEOC(regConv->regADC);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4618      	mov	r0, r3
 800355a:	f7ff ff73 	bl	8003444 <LL_ADC_ClearFlag_JEOC>

        LL_ADC_StartCalibration( regConv->regADC, LL_ADC_SINGLE_ENDED );
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	217f      	movs	r1, #127	; 0x7f
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff feec 	bl	8003342 <LL_ADC_StartCalibration>
        while ( LL_ADC_IsCalibrationOnGoing( regConv->regADC ) )  
 800356a:	bf00      	nop
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff feff 	bl	8003374 <LL_ADC_IsCalibrationOnGoing>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f7      	bne.n	800356c <RCM_RegisterRegConv+0xcc>
        /* ADC Enable (must be done after calibration) */
        /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
        * following a calibration phase, could have no effect on ADC 
        * within certain AHB/ADC clock ratio.
        */
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)  
 800357c:	e004      	b.n	8003588 <RCM_RegisterRegConv+0xe8>
        { 
          LL_ADC_Enable( regConv->regADC );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff feb6 	bl	80032f4 <LL_ADC_Enable>
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)  
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff26 	bl	80033de <LL_ADC_IsActiveFlag_ADRDY>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0f2      	beq.n	800357e <RCM_RegisterRegConv+0xde>
      }
      else 
      {
      }
      /* reset regular conversion sequencer length set by cubeMX */
      LL_ADC_REG_SetSequencerLength( regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE );
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fe44 	bl	800322c <LL_ADC_REG_SetSequencerLength>
      /* configure the sampling time (should already be configured by for non user conversions)*/
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	791b      	ldrb	r3, [r3, #4]
 80035ac:	2b09      	cmp	r3, #9
 80035ae:	d812      	bhi.n	80035d6 <RCM_RegisterRegConv+0x136>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	791b      	ldrb	r3, [r3, #4]
 80035b4:	069b      	lsls	r3, r3, #26
 80035b6:	461a      	mov	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	791b      	ldrb	r3, [r3, #4]
 80035bc:	4619      	mov	r1, r3
 80035be:	2301      	movs	r3, #1
 80035c0:	408b      	lsls	r3, r1
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	791b      	ldrb	r3, [r3, #4]
 80035c8:	4619      	mov	r1, r3
 80035ca:	460b      	mov	r3, r1
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	440b      	add	r3, r1
 80035d0:	051b      	lsls	r3, r3, #20
 80035d2:	4313      	orrs	r3, r2
 80035d4:	e014      	b.n	8003600 <RCM_RegisterRegConv+0x160>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	791b      	ldrb	r3, [r3, #4]
 80035da:	069b      	lsls	r3, r3, #26
 80035dc:	461a      	mov	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	791b      	ldrb	r3, [r3, #4]
 80035e2:	4619      	mov	r1, r3
 80035e4:	2301      	movs	r3, #1
 80035e6:	408b      	lsls	r3, r1
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	791b      	ldrb	r3, [r3, #4]
 80035ee:	4619      	mov	r1, r3
 80035f0:	460b      	mov	r3, r1
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	440b      	add	r3, r1
 80035f6:	3b1e      	subs	r3, #30
 80035f8:	051b      	lsls	r3, r3, #20
 80035fa:	4313      	orrs	r3, r2
 80035fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003600:	687a      	ldr	r2, [r7, #4]
 8003602:	6892      	ldr	r2, [r2, #8]
 8003604:	4619      	mov	r1, r3
 8003606:	f7ff fe4d 	bl	80032a4 <LL_ADC_SetChannelSamplingTime>
    }
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
 800360a:	7bfb      	ldrb	r3, [r7, #15]
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000ae0 	.word	0x20000ae0
 8003618:	20000abc 	.word	0x20000abc

0800361c <RCM_ExecRegularConv>:
 * There is no issue to execute regular conversion asynchronously.
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  uint16_t retVal;
 
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 800362a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800362e:	6818      	ldr	r0, [r3, #0]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003630:	79fb      	ldrb	r3, [r7, #7]
 8003632:	4a38      	ldr	r2, [pc, #224]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 8003634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003638:	791b      	ldrb	r3, [r3, #4]
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800363a:	2b09      	cmp	r3, #9
 800363c:	d81c      	bhi.n	8003678 <RCM_ExecRegularConv+0x5c>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	4a34      	ldr	r2, [pc, #208]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 8003642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003646:	791b      	ldrb	r3, [r3, #4]
 8003648:	069b      	lsls	r3, r3, #26
 800364a:	4619      	mov	r1, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	4a31      	ldr	r2, [pc, #196]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 8003650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003654:	791b      	ldrb	r3, [r3, #4]
 8003656:	461a      	mov	r2, r3
 8003658:	2301      	movs	r3, #1
 800365a:	4093      	lsls	r3, r2
 800365c:	ea41 0203 	orr.w	r2, r1, r3
 8003660:	79fb      	ldrb	r3, [r7, #7]
 8003662:	492c      	ldr	r1, [pc, #176]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 8003664:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003668:	791b      	ldrb	r3, [r3, #4]
 800366a:	4619      	mov	r1, r3
 800366c:	460b      	mov	r3, r1
 800366e:	005b      	lsls	r3, r3, #1
 8003670:	440b      	add	r3, r1
 8003672:	051b      	lsls	r3, r3, #20
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8003674:	4313      	orrs	r3, r2
 8003676:	e01e      	b.n	80036b6 <RCM_ExecRegularConv+0x9a>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8003678:	79fb      	ldrb	r3, [r7, #7]
 800367a:	4a26      	ldr	r2, [pc, #152]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 800367c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003680:	791b      	ldrb	r3, [r3, #4]
 8003682:	069b      	lsls	r3, r3, #26
 8003684:	4619      	mov	r1, r3
 8003686:	79fb      	ldrb	r3, [r7, #7]
 8003688:	4a22      	ldr	r2, [pc, #136]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 800368a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800368e:	791b      	ldrb	r3, [r3, #4]
 8003690:	461a      	mov	r2, r3
 8003692:	2301      	movs	r3, #1
 8003694:	4093      	lsls	r3, r2
 8003696:	ea41 0203 	orr.w	r2, r1, r3
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	491d      	ldr	r1, [pc, #116]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 800369e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80036a2:	791b      	ldrb	r3, [r3, #4]
 80036a4:	4619      	mov	r1, r3
 80036a6:	460b      	mov	r3, r1
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	440b      	add	r3, r1
 80036ac:	3b1e      	subs	r3, #30
 80036ae:	051b      	lsls	r3, r3, #20
 80036b0:	4313      	orrs	r3, r2
  LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80036b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80036b6:	461a      	mov	r2, r3
 80036b8:	2106      	movs	r1, #6
 80036ba:	f7ff fdca 	bl	8003252 <LL_ADC_REG_SetSequencerRanks>

  LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 80036be:	79fb      	ldrb	r3, [r7, #7]
 80036c0:	4a14      	ldr	r2, [pc, #80]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 80036c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f7ff fe7b 	bl	80033c4 <LL_ADC_REG_ReadConversionData12>

    LL_ADC_REG_StartConversion( RCM_handle_array[handle]->regADC );
 80036ce:	79fb      	ldrb	r3, [r7, #7]
 80036d0:	4a10      	ldr	r2, [pc, #64]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 80036d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	f7ff fe5f 	bl	800339c <LL_ADC_REG_StartConversion>
  /* Wait until end of regular conversion */
  while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == 0u ) {}
 80036de:	bf00      	nop
 80036e0:	79fb      	ldrb	r3, [r7, #7]
 80036e2:	4a0c      	ldr	r2, [pc, #48]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 80036e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f7ff fe8a 	bl	8003404 <LL_ADC_IsActiveFlag_EOC>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f4      	beq.n	80036e0 <RCM_ExecRegularConv+0xc4>
  retVal = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );   
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	4a06      	ldr	r2, [pc, #24]	; (8003714 <RCM_ExecRegularConv+0xf8>)
 80036fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f7ff fe5f 	bl	80033c4 <LL_ADC_REG_ReadConversionData12>
 8003706:	4603      	mov	r3, r0
 8003708:	81fb      	strh	r3, [r7, #14]
return retVal;
 800370a:	89fb      	ldrh	r3, [r7, #14]
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}
 8003714:	20000ae0 	.word	0x20000ae0

08003718 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it. 
 */
void RCM_ExecUserConv ()
{
 8003718:	b598      	push	{r3, r4, r7, lr}
 800371a:	af00      	add	r7, sp, #0
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 800371c:	4b17      	ldr	r3, [pc, #92]	; (800377c <RCM_ExecUserConv+0x64>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b01      	cmp	r3, #1
 8003722:	d128      	bne.n	8003776 <RCM_ExecUserConv+0x5e>
  {
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 8003724:	4b16      	ldr	r3, [pc, #88]	; (8003780 <RCM_ExecUserConv+0x68>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff ff77 	bl	800361c <RCM_ExecRegularConv>
 800372e:	4603      	mov	r3, r0
 8003730:	461a      	mov	r2, r3
 8003732:	4b14      	ldr	r3, [pc, #80]	; (8003784 <RCM_ExecUserConv+0x6c>)
 8003734:	801a      	strh	r2, [r3, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <RCM_ExecUserConv+0x64>)
 8003738:	2202      	movs	r2, #2
 800373a:	701a      	strb	r2, [r3, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 800373c:	4b10      	ldr	r3, [pc, #64]	; (8003780 <RCM_ExecUserConv+0x68>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	461a      	mov	r2, r3
 8003742:	4b11      	ldr	r3, [pc, #68]	; (8003788 <RCM_ExecUserConv+0x70>)
 8003744:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d014      	beq.n	8003776 <RCM_ExecUserConv+0x5e>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800374c:	4b0b      	ldr	r3, [pc, #44]	; (800377c <RCM_ExecUserConv+0x64>)
 800374e:	2200      	movs	r2, #0
 8003750:	701a      	strb	r2, [r3, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <RCM_ExecUserConv+0x68>)
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <RCM_ExecUserConv+0x70>)
 800375a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800375e:	4b08      	ldr	r3, [pc, #32]	; (8003780 <RCM_ExecUserConv+0x68>)
 8003760:	7818      	ldrb	r0, [r3, #0]
 8003762:	4b08      	ldr	r3, [pc, #32]	; (8003784 <RCM_ExecUserConv+0x6c>)
 8003764:	8819      	ldrh	r1, [r3, #0]
 8003766:	4b06      	ldr	r3, [pc, #24]	; (8003780 <RCM_ExecUserConv+0x68>)
 8003768:	781b      	ldrb	r3, [r3, #0]
 800376a:	4a07      	ldr	r2, [pc, #28]	; (8003788 <RCM_ExecUserConv+0x70>)
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	461a      	mov	r2, r3
 8003774:	47a0      	blx	r4
    }
  }
}
 8003776:	bf00      	nop
 8003778:	bd98      	pop	{r3, r4, r7, pc}
 800377a:	bf00      	nop
 800377c:	20000adc 	.word	0x20000adc
 8003780:	20000ab8 	.word	0x20000ab8
 8003784:	20000af0 	.word	0x20000af0
 8003788:	20000abc 	.word	0x20000abc

0800378c <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800378c:	b480      	push	{r7}
 800378e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8003796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800379a:	6093      	str	r3, [r2, #8]
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40007000 	.word	0x40007000

080037ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	4b10      	ldr	r3, [pc, #64]	; (80037f4 <HAL_MspInit+0x48>)
 80037b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b6:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <HAL_MspInit+0x48>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6613      	str	r3, [r2, #96]	; 0x60
 80037be:	4b0d      	ldr	r3, [pc, #52]	; (80037f4 <HAL_MspInit+0x48>)
 80037c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <HAL_MspInit+0x48>)
 80037cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_MspInit+0x48>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d4:	6593      	str	r3, [r2, #88]	; 0x58
 80037d6:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_MspInit+0x48>)
 80037d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037de:	603b      	str	r3, [r7, #0]
 80037e0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80037e2:	2004      	movs	r0, #4
 80037e4:	f003 fd1c 	bl	8007220 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80037e8:	f7ff ffd0 	bl	800378c <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40021000 	.word	0x40021000

080037f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08c      	sub	sp, #48	; 0x30
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	f107 031c 	add.w	r3, r7, #28
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003818:	d147      	bne.n	80038aa <HAL_ADC_MspInit+0xb2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800381a:	4b3f      	ldr	r3, [pc, #252]	; (8003918 <HAL_ADC_MspInit+0x120>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3301      	adds	r3, #1
 8003820:	4a3d      	ldr	r2, [pc, #244]	; (8003918 <HAL_ADC_MspInit+0x120>)
 8003822:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003824:	4b3c      	ldr	r3, [pc, #240]	; (8003918 <HAL_ADC_MspInit+0x120>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d10b      	bne.n	8003844 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800382c:	4b3b      	ldr	r3, [pc, #236]	; (800391c <HAL_ADC_MspInit+0x124>)
 800382e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003830:	4a3a      	ldr	r2, [pc, #232]	; (800391c <HAL_ADC_MspInit+0x124>)
 8003832:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003836:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003838:	4b38      	ldr	r3, [pc, #224]	; (800391c <HAL_ADC_MspInit+0x124>)
 800383a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800383c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <HAL_ADC_MspInit+0x124>)
 8003846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003848:	4a34      	ldr	r2, [pc, #208]	; (800391c <HAL_ADC_MspInit+0x124>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003850:	4b32      	ldr	r3, [pc, #200]	; (800391c <HAL_ADC_MspInit+0x124>)
 8003852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800385c:	4b2f      	ldr	r3, [pc, #188]	; (800391c <HAL_ADC_MspInit+0x124>)
 800385e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003860:	4a2e      	ldr	r2, [pc, #184]	; (800391c <HAL_ADC_MspInit+0x124>)
 8003862:	f043 0302 	orr.w	r3, r3, #2
 8003866:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003868:	4b2c      	ldr	r3, [pc, #176]	; (800391c <HAL_ADC_MspInit+0x124>)
 800386a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	693b      	ldr	r3, [r7, #16]
    PA0     ------> ADC1_IN1
    PA2     ------> ADC1_IN3
    PB1     ------> ADC1_IN12
    PB14     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8003874:	2305      	movs	r3, #5
 8003876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003878:	2303      	movs	r3, #3
 800387a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387c:	2300      	movs	r3, #0
 800387e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	4619      	mov	r1, r3
 8003886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800388a:	f004 f893 	bl	80079b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 800388e:	f244 0302 	movw	r3, #16386	; 0x4002
 8003892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003894:	2303      	movs	r3, #3
 8003896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003898:	2300      	movs	r3, #0
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800389c:	f107 031c 	add.w	r3, r7, #28
 80038a0:	4619      	mov	r1, r3
 80038a2:	481f      	ldr	r0, [pc, #124]	; (8003920 <HAL_ADC_MspInit+0x128>)
 80038a4:	f004 f886 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80038a8:	e032      	b.n	8003910 <HAL_ADC_MspInit+0x118>
  else if(hadc->Instance==ADC2)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <HAL_ADC_MspInit+0x12c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d12d      	bne.n	8003910 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_ADC_MspInit+0x120>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	4a17      	ldr	r2, [pc, #92]	; (8003918 <HAL_ADC_MspInit+0x120>)
 80038bc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80038be:	4b16      	ldr	r3, [pc, #88]	; (8003918 <HAL_ADC_MspInit+0x120>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d10b      	bne.n	80038de <HAL_ADC_MspInit+0xe6>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_ADC_MspInit+0x124>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	4a14      	ldr	r2, [pc, #80]	; (800391c <HAL_ADC_MspInit+0x124>)
 80038cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038d2:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_ADC_MspInit+0x124>)
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <HAL_ADC_MspInit+0x124>)
 80038e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038e2:	4a0e      	ldr	r2, [pc, #56]	; (800391c <HAL_ADC_MspInit+0x124>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038ea:	4b0c      	ldr	r3, [pc, #48]	; (800391c <HAL_ADC_MspInit+0x124>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	60bb      	str	r3, [r7, #8]
 80038f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80038f6:	2340      	movs	r3, #64	; 0x40
 80038f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038fa:	2303      	movs	r3, #3
 80038fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fe:	2300      	movs	r3, #0
 8003900:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8003902:	f107 031c 	add.w	r3, r7, #28
 8003906:	4619      	mov	r1, r3
 8003908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800390c:	f004 f852 	bl	80079b4 <HAL_GPIO_Init>
}
 8003910:	bf00      	nop
 8003912:	3730      	adds	r7, #48	; 0x30
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	20000618 	.word	0x20000618
 800391c:	40021000 	.word	0x40021000
 8003920:	48000400 	.word	0x48000400
 8003924:	50000100 	.word	0x50000100

08003928 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003930:	f107 0314 	add.w	r3, r7, #20
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
  if(hcomp->Instance==COMP1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a2e      	ldr	r2, [pc, #184]	; (8003a00 <HAL_COMP_MspInit+0xd8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d119      	bne.n	800397e <HAL_COMP_MspInit+0x56>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	4b2e      	ldr	r3, [pc, #184]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	4a2d      	ldr	r2, [pc, #180]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003956:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	613b      	str	r3, [r7, #16]
 8003960:	693b      	ldr	r3, [r7, #16]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003962:	2302      	movs	r3, #2
 8003964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003966:	2303      	movs	r3, #3
 8003968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396a:	2300      	movs	r3, #0
 800396c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800396e:	f107 0314 	add.w	r3, r7, #20
 8003972:	4619      	mov	r1, r3
 8003974:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003978:	f004 f81c 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800397c:	e03b      	b.n	80039f6 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP2)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a21      	ldr	r2, [pc, #132]	; (8003a08 <HAL_COMP_MspInit+0xe0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d119      	bne.n	80039bc <HAL_COMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003988:	4b1e      	ldr	r3, [pc, #120]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 800398a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800398c:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003994:	4b1b      	ldr	r3, [pc, #108]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 8003996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	60fb      	str	r3, [r7, #12]
 800399e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 80039a0:	2380      	movs	r3, #128	; 0x80
 80039a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039a4:	2303      	movs	r3, #3
 80039a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a8:	2300      	movs	r3, #0
 80039aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 80039ac:	f107 0314 	add.w	r3, r7, #20
 80039b0:	4619      	mov	r1, r3
 80039b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b6:	f003 fffd 	bl	80079b4 <HAL_GPIO_Init>
}
 80039ba:	e01c      	b.n	80039f6 <HAL_COMP_MspInit+0xce>
  else if(hcomp->Instance==COMP4)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <HAL_COMP_MspInit+0xe4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d117      	bne.n	80039f6 <HAL_COMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039c6:	4b0f      	ldr	r3, [pc, #60]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 80039c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ca:	4a0e      	ldr	r2, [pc, #56]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 80039cc:	f043 0302 	orr.w	r3, r3, #2
 80039d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039d2:	4b0c      	ldr	r3, [pc, #48]	; (8003a04 <HAL_COMP_MspInit+0xdc>)
 80039d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	60bb      	str	r3, [r7, #8]
 80039dc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80039de:	2301      	movs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039e2:	2303      	movs	r3, #3
 80039e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e6:	2300      	movs	r3, #0
 80039e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80039ea:	f107 0314 	add.w	r3, r7, #20
 80039ee:	4619      	mov	r1, r3
 80039f0:	4807      	ldr	r0, [pc, #28]	; (8003a10 <HAL_COMP_MspInit+0xe8>)
 80039f2:	f003 ffdf 	bl	80079b4 <HAL_GPIO_Init>
}
 80039f6:	bf00      	nop
 80039f8:	3728      	adds	r7, #40	; 0x28
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	40010200 	.word	0x40010200
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40010204 	.word	0x40010204
 8003a0c:	4001020c 	.word	0x4001020c
 8003a10:	48000400 	.word	0x48000400

08003a14 <HAL_CORDIC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  if(hcordic->Instance==CORDIC)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a0a      	ldr	r2, [pc, #40]	; (8003a4c <HAL_CORDIC_MspInit+0x38>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d10b      	bne.n	8003a3e <HAL_CORDIC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8003a26:	4b0a      	ldr	r3, [pc, #40]	; (8003a50 <HAL_CORDIC_MspInit+0x3c>)
 8003a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a2a:	4a09      	ldr	r2, [pc, #36]	; (8003a50 <HAL_CORDIC_MspInit+0x3c>)
 8003a2c:	f043 0308 	orr.w	r3, r3, #8
 8003a30:	6493      	str	r3, [r2, #72]	; 0x48
 8003a32:	4b07      	ldr	r3, [pc, #28]	; (8003a50 <HAL_CORDIC_MspInit+0x3c>)
 8003a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	60fb      	str	r3, [r7, #12]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	40020c00 	.word	0x40020c00
 8003a50:	40021000 	.word	0x40021000

08003a54 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08a      	sub	sp, #40	; 0x28
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a5c:	f107 0314 	add.w	r3, r7, #20
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	605a      	str	r2, [r3, #4]
 8003a66:	609a      	str	r2, [r3, #8]
 8003a68:	60da      	str	r2, [r3, #12]
 8003a6a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <HAL_DAC_MspInit+0x74>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d124      	bne.n	8003ac0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <HAL_DAC_MspInit+0x78>)
 8003a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a7a:	4a14      	ldr	r2, [pc, #80]	; (8003acc <HAL_DAC_MspInit+0x78>)
 8003a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a82:	4b12      	ldr	r3, [pc, #72]	; (8003acc <HAL_DAC_MspInit+0x78>)
 8003a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_DAC_MspInit+0x78>)
 8003a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a92:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <HAL_DAC_MspInit+0x78>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a9a:	4b0c      	ldr	r3, [pc, #48]	; (8003acc <HAL_DAC_MspInit+0x78>)
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	60fb      	str	r3, [r7, #12]
 8003aa4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 8003aa6:	2310      	movs	r3, #16
 8003aa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8003ab2:	f107 0314 	add.w	r3, r7, #20
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003abc:	f003 ff7a 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003ac0:	bf00      	nop
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	50000800 	.word	0x50000800
 8003acc:	40021000 	.word	0x40021000

08003ad0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	; 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <HAL_FDCAN_MspInit+0xb8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d146      	bne.n	8003b80 <HAL_FDCAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003af2:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	4a25      	ldr	r2, [pc, #148]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003af8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003afc:	6593      	str	r3, [r2, #88]	; 0x58
 8003afe:	4b23      	ldr	r3, [pc, #140]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003b10:	f043 0301 	orr.w	r3, r3, #1
 8003b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b22:	4b1a      	ldr	r3, [pc, #104]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b26:	4a19      	ldr	r2, [pc, #100]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003b28:	f043 0302 	orr.w	r3, r3, #2
 8003b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b2e:	4b17      	ldr	r3, [pc, #92]	; (8003b8c <HAL_FDCAN_MspInit+0xbc>)
 8003b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	60bb      	str	r3, [r7, #8]
 8003b38:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration    
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003b4c:	2309      	movs	r3, #9
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b50:	f107 0314 	add.w	r3, r7, #20
 8003b54:	4619      	mov	r1, r3
 8003b56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b5a:	f003 ff2b 	bl	80079b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003b5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b64:	2302      	movs	r3, #2
 8003b66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003b70:	2309      	movs	r3, #9
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4805      	ldr	r0, [pc, #20]	; (8003b90 <HAL_FDCAN_MspInit+0xc0>)
 8003b7c:	f003 ff1a 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8003b80:	bf00      	nop
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	40006400 	.word	0x40006400
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	48000400 	.word	0x48000400

08003b94 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08a      	sub	sp, #40	; 0x28
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	605a      	str	r2, [r3, #4]
 8003ba6:	609a      	str	r2, [r3, #8]
 8003ba8:	60da      	str	r2, [r3, #12]
 8003baa:	611a      	str	r2, [r3, #16]
  if(hopamp->Instance==OPAMP1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a2e      	ldr	r2, [pc, #184]	; (8003c6c <HAL_OPAMP_MspInit+0xd8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d119      	bne.n	8003bea <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	4a2d      	ldr	r2, [pc, #180]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bbc:	f043 0301 	orr.w	r3, r3, #1
 8003bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc2:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	f003 0301 	and.w	r3, r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration    
    PA1     ------> OPAMP1_VINP
    PA2     ------> OPAMP1_VOUT
    PA3     ------> OPAMP1_VINM 
    */
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8003bce:	230e      	movs	r3, #14
 8003bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bda:	f107 0314 	add.w	r3, r7, #20
 8003bde:	4619      	mov	r1, r3
 8003be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be4:	f003 fee6 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8003be8:	e03b      	b.n	8003c62 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_OPAMP_MspInit+0xe0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d119      	bne.n	8003c28 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf8:	4a1d      	ldr	r2, [pc, #116]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003bfa:	f043 0301 	orr.w	r3, r3, #1
 8003bfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003c02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8003c0c:	23e0      	movs	r3, #224	; 0xe0
 8003c0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c10:	2303      	movs	r3, #3
 8003c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c22:	f003 fec7 	bl	80079b4 <HAL_GPIO_Init>
}
 8003c26:	e01c      	b.n	8003c62 <HAL_OPAMP_MspInit+0xce>
  else if(hopamp->Instance==OPAMP3)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <HAL_OPAMP_MspInit+0xe4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d117      	bne.n	8003c62 <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c32:	4b0f      	ldr	r3, [pc, #60]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003c38:	f043 0302 	orr.w	r3, r3, #2
 8003c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <HAL_OPAMP_MspInit+0xdc>)
 8003c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c42:	f003 0302 	and.w	r3, r3, #2
 8003c46:	60bb      	str	r3, [r7, #8]
 8003c48:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8003c4a:	2307      	movs	r3, #7
 8003c4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c56:	f107 0314 	add.w	r3, r7, #20
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4807      	ldr	r0, [pc, #28]	; (8003c7c <HAL_OPAMP_MspInit+0xe8>)
 8003c5e:	f003 fea9 	bl	80079b4 <HAL_GPIO_Init>
}
 8003c62:	bf00      	nop
 8003c64:	3728      	adds	r7, #40	; 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40010300 	.word	0x40010300
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40010304 	.word	0x40010304
 8003c78:	40010308 	.word	0x40010308
 8003c7c:	48000400 	.word	0x48000400

08003c80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b085      	sub	sp, #20
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a0a      	ldr	r2, [pc, #40]	; (8003cb8 <HAL_TIM_Base_MspInit+0x38>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d10b      	bne.n	8003caa <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003c92:	4b0a      	ldr	r3, [pc, #40]	; (8003cbc <HAL_TIM_Base_MspInit+0x3c>)
 8003c94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c96:	4a09      	ldr	r2, [pc, #36]	; (8003cbc <HAL_TIM_Base_MspInit+0x3c>)
 8003c98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c9c:	6613      	str	r3, [r2, #96]	; 0x60
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <HAL_TIM_Base_MspInit+0x3c>)
 8003ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003caa:	bf00      	nop
 8003cac:	3714      	adds	r7, #20
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr
 8003cb6:	bf00      	nop
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40021000 	.word	0x40021000

08003cc0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b08a      	sub	sp, #40	; 0x28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cc8:	f107 0314 	add.w	r3, r7, #20
 8003ccc:	2200      	movs	r2, #0
 8003cce:	601a      	str	r2, [r3, #0]
 8003cd0:	605a      	str	r2, [r3, #4]
 8003cd2:	609a      	str	r2, [r3, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
 8003cd6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a17      	ldr	r2, [pc, #92]	; (8003d3c <HAL_TIM_Encoder_MspInit+0x7c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d127      	bne.n	8003d32 <HAL_TIM_Encoder_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <HAL_TIM_Encoder_MspInit+0x80>)
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <HAL_TIM_Encoder_MspInit+0x80>)
 8003ce8:	f043 0304 	orr.w	r3, r3, #4
 8003cec:	6593      	str	r3, [r2, #88]	; 0x58
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <HAL_TIM_Encoder_MspInit+0x80>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	f003 0304 	and.w	r3, r3, #4
 8003cf6:	613b      	str	r3, [r7, #16]
 8003cf8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cfa:	4b11      	ldr	r3, [pc, #68]	; (8003d40 <HAL_TIM_Encoder_MspInit+0x80>)
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	4a10      	ldr	r2, [pc, #64]	; (8003d40 <HAL_TIM_Encoder_MspInit+0x80>)
 8003d00:	f043 0302 	orr.w	r3, r3, #2
 8003d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_TIM_Encoder_MspInit+0x80>)
 8003d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8003d12:	23c0      	movs	r3, #192	; 0xc0
 8003d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003d22:	2302      	movs	r3, #2
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4805      	ldr	r0, [pc, #20]	; (8003d44 <HAL_TIM_Encoder_MspInit+0x84>)
 8003d2e:	f003 fe41 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d32:	bf00      	nop
 8003d34:	3728      	adds	r7, #40	; 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40000800 	.word	0x40000800
 8003d40:	40021000 	.word	0x40021000
 8003d44:	48000400 	.word	0x48000400

08003d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b08a      	sub	sp, #40	; 0x28
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	f107 0314 	add.w	r3, r7, #20
 8003d54:	2200      	movs	r2, #0
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	605a      	str	r2, [r3, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
 8003d5c:	60da      	str	r2, [r3, #12]
 8003d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2f      	ldr	r2, [pc, #188]	; (8003e24 <HAL_TIM_MspPostInit+0xdc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d157      	bne.n	8003e1a <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6a:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6e:	4a2e      	ldr	r2, [pc, #184]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003d84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d86:	4a28      	ldr	r2, [pc, #160]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	60fb      	str	r3, [r7, #12]
 8003d98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	4a22      	ldr	r2, [pc, #136]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003da0:	f043 0301 	orr.w	r3, r3, #1
 8003da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <HAL_TIM_MspPostInit+0xe0>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N 
    */
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003db2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db8:	2302      	movs	r3, #2
 8003dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003dc0:	2302      	movs	r3, #2
 8003dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003dc4:	2304      	movs	r3, #4
 8003dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003dc8:	f107 0314 	add.w	r3, r7, #20
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4817      	ldr	r0, [pc, #92]	; (8003e2c <HAL_TIM_MspPostInit+0xe4>)
 8003dd0:	f003 fdf0 	bl	80079b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003dde:	2302      	movs	r3, #2
 8003de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003de2:	2302      	movs	r3, #2
 8003de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003de6:	2304      	movs	r3, #4
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003dea:	f107 0314 	add.w	r3, r7, #20
 8003dee:	4619      	mov	r1, r3
 8003df0:	480f      	ldr	r0, [pc, #60]	; (8003e30 <HAL_TIM_MspPostInit+0xe8>)
 8003df2:	f003 fddf 	bl	80079b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003df6:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8003dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003e00:	2302      	movs	r3, #2
 8003e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e04:	2302      	movs	r3, #2
 8003e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003e08:	2306      	movs	r3, #6
 8003e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0c:	f107 0314 	add.w	r3, r7, #20
 8003e10:	4619      	mov	r1, r3
 8003e12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e16:	f003 fdcd 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003e1a:	bf00      	nop
 8003e1c:	3728      	adds	r7, #40	; 0x28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	48000800 	.word	0x48000800
 8003e30:	48000400 	.word	0x48000400

08003e34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08a      	sub	sp, #40	; 0x28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
 8003e44:	605a      	str	r2, [r3, #4]
 8003e46:	609a      	str	r2, [r3, #8]
 8003e48:	60da      	str	r2, [r3, #12]
 8003e4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <HAL_UART_MspInit+0x7c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d127      	bne.n	8003ea6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e56:	4b17      	ldr	r3, [pc, #92]	; (8003eb4 <HAL_UART_MspInit+0x80>)
 8003e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5a:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <HAL_UART_MspInit+0x80>)
 8003e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e60:	6593      	str	r3, [r2, #88]	; 0x58
 8003e62:	4b14      	ldr	r3, [pc, #80]	; (8003eb4 <HAL_UART_MspInit+0x80>)
 8003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6e:	4b11      	ldr	r3, [pc, #68]	; (8003eb4 <HAL_UART_MspInit+0x80>)
 8003e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e72:	4a10      	ldr	r2, [pc, #64]	; (8003eb4 <HAL_UART_MspInit+0x80>)
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e7a:	4b0e      	ldr	r3, [pc, #56]	; (8003eb4 <HAL_UART_MspInit+0x80>)
 8003e7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	60fb      	str	r3, [r7, #12]
 8003e84:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003e86:	2318      	movs	r3, #24
 8003e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e96:	2307      	movs	r3, #7
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9a:	f107 0314 	add.w	r3, r7, #20
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4805      	ldr	r0, [pc, #20]	; (8003eb8 <HAL_UART_MspInit+0x84>)
 8003ea2:	f003 fd87 	bl	80079b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ea6:	bf00      	nop
 8003ea8:	3728      	adds	r7, #40	; 0x28
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	40004400 	.word	0x40004400
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	48000400 	.word	0x48000400

08003ebc <LL_ADC_ClearFlag_JEOS>:
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2240      	movs	r2, #64	; 0x40
 8003ec8:	601a      	str	r2, [r3, #0]
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f06f 0201 	mvn.w	r2, #1
 8003ee4:	611a      	str	r2, [r3, #16]
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f003 0301 	and.w	r3, r3, #1
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8003f06:	2301      	movs	r3, #1
 8003f08:	e000      	b.n	8003f0c <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <LL_TIM_ClearFlag_BRK>:
  * @rmtoll SR           BIF           LL_TIM_ClearFlag_BRK
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK(TIM_TypeDef *TIMx)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f26:	611a      	str	r2, [r3, #16]
}
 8003f28:	bf00      	nop
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <LL_TIM_IsActiveFlag_BRK>:
  * @rmtoll SR           BIF           LL_TIM_IsActiveFlag_BRK
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f44:	2b80      	cmp	r3, #128	; 0x80
 8003f46:	d101      	bne.n	8003f4c <LL_TIM_IsActiveFlag_BRK+0x18>
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <LL_TIM_IsActiveFlag_BRK+0x1a>
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_TIM_ClearFlag_BRK2>:
  * @rmtoll SR           B2IF          LL_TIM_ClearFlag_BRK2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_BRK2(TIM_TypeDef *TIMx)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003f68:	611a      	str	r2, [r3, #16]
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_TIM_IsActiveFlag_BRK2>:
  * @rmtoll SR           B2IF          LL_TIM_IsActiveFlag_BRK2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f8a:	d101      	bne.n	8003f90 <LL_TIM_IsActiveFlag_BRK2+0x1a>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <LL_TIM_IsActiveFlag_BRK2+0x1c>
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_TIM_IsEnabledIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_IsEnabledIT_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <LL_TIM_IsEnabledIT_UPDATE+0x18>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <LL_TIM_IsEnabledIT_UPDATE+0x1a>
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <LL_USART_IsActiveFlag_ORE>:
  * @rmtoll ISR          ORE           LL_USART_IsActiveFlag_ORE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(USART_TypeDef *USARTx)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	69db      	ldr	r3, [r3, #28]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b08      	cmp	r3, #8
 8003fd6:	d101      	bne.n	8003fdc <LL_USART_IsActiveFlag_ORE+0x18>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <LL_USART_IsActiveFlag_ORE+0x1a>
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b20      	cmp	r3, #32
 8003ffc:	d101      	bne.n	8004002 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8004002:	2300      	movs	r3, #0
}
 8004004:	4618      	mov	r0, r3
 8004006:	370c      	adds	r7, #12
 8004008:	46bd      	mov	sp, r7
 800400a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400e:	4770      	bx	lr

08004010 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	69db      	ldr	r3, [r3, #28]
 800401c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004020:	2b80      	cmp	r3, #128	; 0x80
 8004022:	d101      	bne.n	8004028 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8004024:	2301      	movs	r3, #1
 8004026:	e000      	b.n	800402a <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <LL_USART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_USART_ClearFlag_ORE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2208      	movs	r2, #8
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	bf00      	nop
 8004046:	370c      	adds	r7, #12
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr

08004050 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	b2db      	uxtb	r3, r3
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr

0800406a <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  
  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );
 800406e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004072:	f7ff ff23 	bl	8003ebc <LL_ADC_ClearFlag_JEOS>

  // Highfrequency task 
  UI_DACUpdate(TSK_HighFrequencyTask());
 8004076:	f7fe f86b 	bl	8002150 <TSK_HighFrequencyTask>
 800407a:	4603      	mov	r3, r0
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f9a9 	bl	80043d4 <UI_DACUpdate>
 /* USER CODE END HighFreq  */  
 
 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
	...

08004088 <TIM1_UP_TIM16_IRQHandler>:
  * @brief  This function handles first motor TIMx Update interrupt request.
  * @param  None
  * @retval None 
  */
void TIMx_UP_M1_IRQHandler(void)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */ 
 
    LL_TIM_ClearFlag_UPDATE(TIM1);
 800408c:	4803      	ldr	r0, [pc, #12]	; (800409c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800408e:	f7ff ff22 	bl	8003ed6 <LL_TIM_ClearFlag_UPDATE>
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004092:	4803      	ldr	r0, [pc, #12]	; (80040a0 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8004094:	f00a f9bf 	bl	800e416 <R3_2_TIMx_UP_IRQHandler>

 /* USER CODE BEGIN TIMx_UP_M1_IRQn 1 */

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */ 
}
 8004098:	bf00      	nop
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	200001cc 	.word	0x200001cc

080040a4 <TIM1_BRK_TIM15_IRQHandler>:

void TIMx_BRK_M1_IRQHandler(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */ 
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
 80040a8:	480d      	ldr	r0, [pc, #52]	; (80040e0 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80040aa:	f7ff ff43 	bl	8003f34 <LL_TIM_IsActiveFlag_BRK>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d005      	beq.n	80040c0 <TIM1_BRK_TIM15_IRQHandler+0x1c>
  {
    LL_TIM_ClearFlag_BRK(TIM1);
 80040b4:	480a      	ldr	r0, [pc, #40]	; (80040e0 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80040b6:	f7ff ff2f 	bl	8003f18 <LL_TIM_ClearFlag_BRK>
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 80040ba:	480a      	ldr	r0, [pc, #40]	; (80040e4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80040bc:	f00a fa6a 	bl	800e594 <R3_2_BRK_IRQHandler>
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
 80040c0:	4807      	ldr	r0, [pc, #28]	; (80040e0 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80040c2:	f7ff ff58 	bl	8003f76 <LL_TIM_IsActiveFlag_BRK2>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d005      	beq.n	80040d8 <TIM1_BRK_TIM15_IRQHandler+0x34>
  {
    LL_TIM_ClearFlag_BRK2(TIM1);  
 80040cc:	4804      	ldr	r0, [pc, #16]	; (80040e0 <TIM1_BRK_TIM15_IRQHandler+0x3c>)
 80040ce:	f7ff ff44 	bl	8003f5a <LL_TIM_ClearFlag_BRK2>
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1); 
 80040d2:	4804      	ldr	r0, [pc, #16]	; (80040e4 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 80040d4:	f00a fa21 	bl	800e51a <R3_2_BRK2_IRQHandler>
  }
  /* Systick is not executed due low priority so is necessary to call MC_Scheduler here.*/
  MC_Scheduler();
 80040d8:	f7fd fd48 	bl	8001b6c <MC_Scheduler>
  
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */ 
}
 80040dc:	bf00      	nop
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40012c00 	.word	0x40012c00
 80040e4:	200001cc 	.word	0x200001cc

080040e8 <TIM4_IRQHandler>:
  * @brief  This function handles TIMx global interrupt request for M1 Speed Sensor.
  * @param  None
  * @retval None
  */
void SPD_TIM_M1_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */ 
  
 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 80040ec:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <TIM4_IRQHandler+0x38>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7ff ff54 	bl	8003f9e <LL_TIM_IsEnabledIT_UPDATE>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00f      	beq.n	800411c <TIM4_IRQHandler+0x34>
 80040fc:	4b08      	ldr	r3, [pc, #32]	; (8004120 <TIM4_IRQHandler+0x38>)
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	4618      	mov	r0, r3
 8004102:	f7ff fef6 	bl	8003ef2 <LL_TIM_IsActiveFlag_UPDATE>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d007      	beq.n	800411c <TIM4_IRQHandler+0x34>
  { 
    LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
 800410c:	4b04      	ldr	r3, [pc, #16]	; (8004120 <TIM4_IRQHandler+0x38>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4618      	mov	r0, r3
 8004112:	f7ff fee0 	bl	8003ed6 <LL_TIM_ClearFlag_UPDATE>
    ENC_IRQHandler(&ENCODER_M1);
 8004116:	4802      	ldr	r0, [pc, #8]	; (8004120 <TIM4_IRQHandler+0x38>)
 8004118:	f008 f804 	bl	800c124 <ENC_IRQHandler>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */ 
}
 800411c:	bf00      	nop
 800411e:	bd80      	pop	{r7, pc}
 8004120:	2000027c 	.word	0x2000027c

08004124 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 800412a:	4b23      	ldr	r3, [pc, #140]	; (80041b8 <USART2_IRQHandler+0x94>)
 800412c:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004130:	4618      	mov	r0, r3
 8004132:	f7ff ff5a 	bl	8003fea <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d018      	beq.n	800416e <USART2_IRQHandler+0x4a>
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 800413c:	4b1e      	ldr	r3, [pc, #120]	; (80041b8 <USART2_IRQHandler+0x94>)
 800413e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004142:	4618      	mov	r0, r3
 8004144:	f7ff ff84 	bl	8004050 <LL_USART_ReceiveData8>
 8004148:	4603      	mov	r3, r0
 800414a:	b29b      	uxth	r3, r3
 800414c:	4619      	mov	r1, r3
 800414e:	481a      	ldr	r0, [pc, #104]	; (80041b8 <USART2_IRQHandler+0x94>)
 8004150:	f00b fb14 	bl	800f77c <UFCP_RX_IRQ_Handler>
 8004154:	4603      	mov	r3, r0
 8004156:	881b      	ldrh	r3, [r3, #0]
 8004158:	80fb      	strh	r3, [r7, #6]
    if (retVal == 1)
 800415a:	88fb      	ldrh	r3, [r7, #6]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <USART2_IRQHandler+0x40>
    {
      UI_SerialCommunicationTimeOutStart();
 8004160:	f000 f95e 	bl	8004420 <UI_SerialCommunicationTimeOutStart>
    }
    if (retVal == 2)
 8004164:	88fb      	ldrh	r3, [r7, #6]
 8004166:	2b02      	cmp	r3, #2
 8004168:	d101      	bne.n	800416e <USART2_IRQHandler+0x4a>
    {
      UI_SerialCommunicationTimeOutStop();
 800416a:	f000 f94d 	bl	8004408 <UI_SerialCommunicationTimeOutStop>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */ 
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <USART2_IRQHandler+0x94>)
 8004170:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff4b 	bl	8004010 <LL_USART_IsActiveFlag_TXE_TXFNF>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <USART2_IRQHandler+0x62>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8004180:	480d      	ldr	r0, [pc, #52]	; (80041b8 <USART2_IRQHandler+0x94>)
 8004182:	f00b fb9f 	bl	800f8c4 <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }
  
  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <USART2_IRQHandler+0x94>)
 8004188:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff ff19 	bl	8003fc4 <LL_USART_IsActiveFlag_ORE>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00a      	beq.n	80041ae <USART2_IRQHandler+0x8a>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8004198:	4807      	ldr	r0, [pc, #28]	; (80041b8 <USART2_IRQHandler+0x94>)
 800419a:	f00b fbf3 	bl	800f984 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <USART2_IRQHandler+0x94>)
 80041a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff ff46 	bl	8004036 <LL_USART_ClearFlag_ORE>
    UI_SerialCommunicationTimeOutStop();
 80041aa:	f000 f92d 	bl	8004408 <UI_SerialCommunicationTimeOutStop>
    /* USER CODE END USART_ORE   */   
  }
  /* USER CODE BEGIN USART_IRQn 1 */
  
  /* USER CODE END USART_IRQn 1 */
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	2000049c 	.word	0x2000049c

080041bc <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80041c2:	f7fe f923 	bl	800240c <TSK_HardwareFaultTask>
  
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 80041c6:	4b21      	ldr	r3, [pc, #132]	; (800424c <HardFault_Handler+0x90>)
 80041c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fef9 	bl	8003fc4 <LL_USART_IsActiveFlag_ORE>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HardFault_Handler+0x32>
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 80041d8:	481c      	ldr	r0, [pc, #112]	; (800424c <HardFault_Handler+0x90>)
 80041da:	f00b fbd3 	bl	800f984 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 80041de:	4b1b      	ldr	r3, [pc, #108]	; (800424c <HardFault_Handler+0x90>)
 80041e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ff26 	bl	8004036 <LL_USART_ClearFlag_ORE>
        UI_SerialCommunicationTimeOutStop();
 80041ea:	f000 f90d 	bl	8004408 <UI_SerialCommunicationTimeOutStop>
      }
      
      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 80041ee:	4b17      	ldr	r3, [pc, #92]	; (800424c <HardFault_Handler+0x90>)
 80041f0:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80041f4:	4618      	mov	r0, r3
 80041f6:	f7ff ff0b 	bl	8004010 <LL_USART_IsActiveFlag_TXE_TXFNF>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HardFault_Handler+0x4a>
      {   
        UFCP_TX_IRQ_Handler(&pUSART);
 8004200:	4812      	ldr	r0, [pc, #72]	; (800424c <HardFault_Handler+0x90>)
 8004202:	f00b fb5f 	bl	800f8c4 <UFCP_TX_IRQ_Handler>
      }  
      
      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8004206:	4b11      	ldr	r3, [pc, #68]	; (800424c <HardFault_Handler+0x90>)
 8004208:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800420c:	4618      	mov	r0, r3
 800420e:	f7ff feec 	bl	8003fea <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0d6      	beq.n	80041c6 <HardFault_Handler+0xa>
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8004218:	4b0c      	ldr	r3, [pc, #48]	; (800424c <HardFault_Handler+0x90>)
 800421a:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ff16 	bl	8004050 <LL_USART_ReceiveData8>
 8004224:	4603      	mov	r3, r0
 8004226:	b29b      	uxth	r3, r3
 8004228:	4619      	mov	r1, r3
 800422a:	4808      	ldr	r0, [pc, #32]	; (800424c <HardFault_Handler+0x90>)
 800422c:	f00b faa6 	bl	800f77c <UFCP_RX_IRQ_Handler>
 8004230:	4603      	mov	r3, r0
 8004232:	881b      	ldrh	r3, [r3, #0]
 8004234:	80fb      	strh	r3, [r7, #6]
        if (retVal == 1)
 8004236:	88fb      	ldrh	r3, [r7, #6]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HardFault_Handler+0x84>
        {
          UI_SerialCommunicationTimeOutStart();
 800423c:	f000 f8f0 	bl	8004420 <UI_SerialCommunicationTimeOutStart>
        }
        if (retVal == 2)
 8004240:	88fb      	ldrh	r3, [r7, #6]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d1bf      	bne.n	80041c6 <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8004246:	f000 f8df 	bl	8004408 <UI_SerialCommunicationTimeOutStop>
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 800424a:	e7bc      	b.n	80041c6 <HardFault_Handler+0xa>
 800424c:	2000049c 	.word	0x2000049c

08004250 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004254:	4b0a      	ldr	r3, [pc, #40]	; (8004280 <SysTick_Handler+0x30>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d106      	bne.n	800426a <SysTick_Handler+0x1a>
  {
    HAL_IncTick();
 800425c:	f001 f83a 	bl	80052d4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004260:	f003 f81d 	bl	800729e <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8004264:	4b06      	ldr	r3, [pc, #24]	; (8004280 <SysTick_Handler+0x30>)
 8004266:	2200      	movs	r2, #0
 8004268:	701a      	strb	r2, [r3, #0]
  }
  SystickDividerCounter ++;  
 800426a:	4b05      	ldr	r3, [pc, #20]	; (8004280 <SysTick_Handler+0x30>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	3301      	adds	r3, #1
 8004270:	b2da      	uxtb	r2, r3
 8004272:	4b03      	ldr	r3, [pc, #12]	; (8004280 <SysTick_Handler+0x30>)
 8004274:	701a      	strb	r2, [r3, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8004276:	f7fd fc69 	bl	8001b4c <MC_RunMotorControlTasks>

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 800427a:	bf00      	nop
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	200005dc 	.word	0x200005dc

08004284 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8004284:	b5b0      	push	{r4, r5, r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af04      	add	r7, sp, #16
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	607a      	str	r2, [r7, #4]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	460b      	mov	r3, r1
 8004292:	72fb      	strb	r3, [r7, #11]
      pDAC = &DAC_UI_Params;      
 8004294:	4b2d      	ldr	r3, [pc, #180]	; (800434c <UI_TaskInit+0xc8>)
 8004296:	4a2e      	ldr	r2, [pc, #184]	; (8004350 <UI_TaskInit+0xcc>)
 8004298:	601a      	str	r2, [r3, #0]
      pDAC->_Super = UI_Params;
 800429a:	4b2c      	ldr	r3, [pc, #176]	; (800434c <UI_TaskInit+0xc8>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a2d      	ldr	r2, [pc, #180]	; (8004354 <UI_TaskInit+0xd0>)
 80042a0:	461c      	mov	r4, r3
 80042a2:	4615      	mov	r5, r2
 80042a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80042aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80042ac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80042b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 80042b4:	4b25      	ldr	r3, [pc, #148]	; (800434c <UI_TaskInit+0xc8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4618      	mov	r0, r3
 80042ba:	7af9      	ldrb	r1, [r7, #11]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	f000 f8b8 	bl	8004438 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <UI_TaskInit+0xc8>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 ff49 	bl	8005164 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_OBS_EL_ANGLE );
 80042d2:	4b1e      	ldr	r3, [pc, #120]	; (800434c <UI_TaskInit+0xc8>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2231      	movs	r2, #49	; 0x31
 80042d8:	2100      	movs	r1, #0
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 ff62 	bl	80051a4 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 80042e0:	4b1a      	ldr	r3, [pc, #104]	; (800434c <UI_TaskInit+0xc8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2224      	movs	r2, #36	; 0x24
 80042e6:	2101      	movs	r1, #1
 80042e8:	4618      	mov	r0, r3
 80042ea:	f000 ff5b 	bl	80051a4 <UI_SetDAC>

    pMCP = &MCP_UI_Params;
 80042ee:	4b1a      	ldr	r3, [pc, #104]	; (8004358 <UI_TaskInit+0xd4>)
 80042f0:	4a1a      	ldr	r2, [pc, #104]	; (800435c <UI_TaskInit+0xd8>)
 80042f2:	601a      	str	r2, [r3, #0]
    pMCP->_Super = UI_Params;
 80042f4:	4b18      	ldr	r3, [pc, #96]	; (8004358 <UI_TaskInit+0xd4>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a16      	ldr	r2, [pc, #88]	; (8004354 <UI_TaskInit+0xd0>)
 80042fa:	461c      	mov	r4, r3
 80042fc:	4615      	mov	r5, r2
 80042fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004300:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004302:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004304:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004306:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800430a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    UFCP_Init( & pUSART );
 800430e:	4814      	ldr	r0, [pc, #80]	; (8004360 <UI_TaskInit+0xdc>)
 8004310:	f00b fa28 	bl	800f764 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8004314:	4b10      	ldr	r3, [pc, #64]	; (8004358 <UI_TaskInit+0xd4>)
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <UI_TaskInit+0xc8>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a3a      	ldr	r2, [r7, #32]
 800431e:	9202      	str	r2, [sp, #8]
 8004320:	9301      	str	r3, [sp, #4]
 8004322:	4b10      	ldr	r3, [pc, #64]	; (8004364 <UI_TaskInit+0xe0>)
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	4b10      	ldr	r3, [pc, #64]	; (8004368 <UI_TaskInit+0xe4>)
 8004328:	4a10      	ldr	r2, [pc, #64]	; (800436c <UI_TaskInit+0xe8>)
 800432a:	490d      	ldr	r1, [pc, #52]	; (8004360 <UI_TaskInit+0xdc>)
 800432c:	f7fe f8e6 	bl	80024fc <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8004330:	4b09      	ldr	r3, [pc, #36]	; (8004358 <UI_TaskInit+0xd4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	7af9      	ldrb	r1, [r7, #11]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	9300      	str	r3, [sp, #0]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	f000 f87a 	bl	8004438 <UI_Init>

}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bdb0      	pop	{r4, r5, r7, pc}
 800434c:	2000061c 	.word	0x2000061c
 8004350:	20000394 	.word	0x20000394
 8004354:	20000364 	.word	0x20000364
 8004358:	20000620 	.word	0x20000620
 800435c:	20000af4 	.word	0x20000af4
 8004360:	2000049c 	.word	0x2000049c
 8004364:	0800fa85 	.word	0x0800fa85
 8004368:	0800f9ab 	.word	0x0800f9ab
 800436c:	0800f9f1 	.word	0x0800f9f1

08004370 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
 8004370:	b480      	push	{r7}
 8004372:	af00      	add	r7, sp, #0
  if(bUITaskCounter > 0u)
 8004374:	4b14      	ldr	r3, [pc, #80]	; (80043c8 <UI_Scheduler+0x58>)
 8004376:	881b      	ldrh	r3, [r3, #0]
 8004378:	b29b      	uxth	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d006      	beq.n	800438c <UI_Scheduler+0x1c>
  {
    bUITaskCounter--;
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <UI_Scheduler+0x58>)
 8004380:	881b      	ldrh	r3, [r3, #0]
 8004382:	b29b      	uxth	r3, r3
 8004384:	3b01      	subs	r3, #1
 8004386:	b29a      	uxth	r2, r3
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <UI_Scheduler+0x58>)
 800438a:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 800438c:	4b0f      	ldr	r3, [pc, #60]	; (80043cc <UI_Scheduler+0x5c>)
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b01      	cmp	r3, #1
 8004394:	d906      	bls.n	80043a4 <UI_Scheduler+0x34>
  {
    bCOMTimeoutCounter--;
 8004396:	4b0d      	ldr	r3, [pc, #52]	; (80043cc <UI_Scheduler+0x5c>)
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	3b01      	subs	r3, #1
 800439e:	b29a      	uxth	r2, r3
 80043a0:	4b0a      	ldr	r3, [pc, #40]	; (80043cc <UI_Scheduler+0x5c>)
 80043a2:	801a      	strh	r2, [r3, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 80043a4:	4b0a      	ldr	r3, [pc, #40]	; (80043d0 <UI_Scheduler+0x60>)
 80043a6:	881b      	ldrh	r3, [r3, #0]
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d906      	bls.n	80043bc <UI_Scheduler+0x4c>
  {
    bCOMATRTimeCounter--;
 80043ae:	4b08      	ldr	r3, [pc, #32]	; (80043d0 <UI_Scheduler+0x60>)
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <UI_Scheduler+0x60>)
 80043ba:	801a      	strh	r2, [r3, #0]
  }
}
 80043bc:	bf00      	nop
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000624 	.word	0x20000624
 80043cc:	20000626 	.word	0x20000626
 80043d0:	200005de 	.word	0x200005de

080043d4 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b082      	sub	sp, #8
 80043d8:	af00      	add	r7, sp, #0
 80043da:	4603      	mov	r3, r0
 80043dc:	71fb      	strb	r3, [r7, #7]
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <UI_DACUpdate+0x30>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f861 	bl	80044aa <UI_GetSelectedMC>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	79fb      	ldrb	r3, [r7, #7]
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d104      	bne.n	80043fc <UI_DACUpdate+0x28>
  {  
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <UI_DACUpdate+0x30>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fec4 	bl	8005184 <UI_DACExec>
  }
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	2000061c 	.word	0x2000061c

08004408 <UI_SerialCommunicationTimeOutStop>:
  }
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
 8004408:	b480      	push	{r7}
 800440a:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = 0u;
 800440c:	4b03      	ldr	r3, [pc, #12]	; (800441c <UI_SerialCommunicationTimeOutStop+0x14>)
 800440e:	2200      	movs	r2, #0
 8004410:	801a      	strh	r2, [r3, #0]
}
 8004412:	bf00      	nop
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	20000626 	.word	0x20000626

08004420 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
 8004420:	b480      	push	{r7}
 8004422:	af00      	add	r7, sp, #0
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8004424:	4b03      	ldr	r3, [pc, #12]	; (8004434 <UI_SerialCommunicationTimeOutStart+0x14>)
 8004426:	224f      	movs	r2, #79	; 0x4f
 8004428:	801a      	strh	r2, [r3, #0]
}
 800442a:	bf00      	nop
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20000626 	.word	0x20000626

08004438 <UI_Init>:
  *         Each element of the list must be a bit field containing one (or more) of
  *         the exported configuration option UI_CFGOPT_xxx (eventually OR-ed).
  * @retval none.
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	607a      	str	r2, [r7, #4]
 8004442:	603b      	str	r3, [r7, #0]
 8004444:	460b      	mov	r3, r1
 8004446:	72fb      	strb	r3, [r7, #11]
  pHandle->bDriveNum = bMCNum;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	7afa      	ldrb	r2, [r7, #11]
 800444c:	771a      	strb	r2, [r3, #28]
  pHandle->pMCI = pMCI;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	621a      	str	r2, [r3, #32]
  pHandle->pMCT = pMCT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	625a      	str	r2, [r3, #36]	; 0x24
  pHandle->bSelectedDrive = 0u;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pHandle->pUICfg = pUICfg;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004468:	bf00      	nop
 800446a:	3714      	adds	r7, #20
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <UI_SelectMC>:
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @param  bSelectMC: The new selected MC, zero based, on which UI operates.
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
  if (bSelectMC  >= pHandle->bDriveNum)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	7f1b      	ldrb	r3, [r3, #28]
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <UI_SelectMC+0x20>
  {
    retVal = false;
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]
 8004492:	e003      	b.n	800449c <UI_SelectMC+0x28>
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  return retVal;
 800449c:	7bfb      	ldrb	r3, [r7, #15]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <UI_GetSelectedMC>:
  * @brief  Allow to retrieve the MC on which UI currently operates.
  * @param  pHandle: Pointer on Handle structure of UI component.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  return (pHandle->bSelectedDrive);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b08a      	sub	sp, #40	; 0x28
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	60f8      	str	r0, [r7, #12]
 80044cc:	460b      	mov	r3, r1
 80044ce:	607a      	str	r2, [r7, #4]
 80044d0:	72fb      	strb	r3, [r7, #11]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6a1a      	ldr	r2, [r3, #32]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	623b      	str	r3, [r7, #32]
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4413      	add	r3, r2
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	61fb      	str	r3, [r7, #28]

  bool retVal = true;
 80044f6:	2301      	movs	r3, #1
 80044f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  switch (bRegID)
 80044fc:	7afb      	ldrb	r3, [r7, #11]
 80044fe:	2b5b      	cmp	r3, #91	; 0x5b
 8004500:	f200 8166 	bhi.w	80047d0 <UI_SetReg+0x30c>
 8004504:	a201      	add	r2, pc, #4	; (adr r2, 800450c <UI_SetReg+0x48>)
 8004506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450a:	bf00      	nop
 800450c:	0800467d 	.word	0x0800467d
 8004510:	080047d1 	.word	0x080047d1
 8004514:	080047d1 	.word	0x080047d1
 8004518:	080046ed 	.word	0x080046ed
 800451c:	080047d1 	.word	0x080047d1
 8004520:	080046b7 	.word	0x080046b7
 8004524:	080046c9 	.word	0x080046c9
 8004528:	080046db 	.word	0x080046db
 800452c:	08004723 	.word	0x08004723
 8004530:	0800473d 	.word	0x0800473d
 8004534:	0800474f 	.word	0x0800474f
 8004538:	08004761 	.word	0x08004761
 800453c:	08004773 	.word	0x08004773
 8004540:	0800478d 	.word	0x0800478d
 8004544:	0800479f 	.word	0x0800479f
 8004548:	080047b1 	.word	0x080047b1
 800454c:	080047d1 	.word	0x080047d1
 8004550:	080047d1 	.word	0x080047d1
 8004554:	080047d1 	.word	0x080047d1
 8004558:	080047d1 	.word	0x080047d1
 800455c:	080047d1 	.word	0x080047d1
 8004560:	080047d1 	.word	0x080047d1
 8004564:	080047d1 	.word	0x080047d1
 8004568:	080047d1 	.word	0x080047d1
 800456c:	080047d1 	.word	0x080047d1
 8004570:	080047d1 	.word	0x080047d1
 8004574:	080047d1 	.word	0x080047d1
 8004578:	080047d1 	.word	0x080047d1
 800457c:	080047d1 	.word	0x080047d1
 8004580:	080047d1 	.word	0x080047d1
 8004584:	080047d1 	.word	0x080047d1
 8004588:	080047d1 	.word	0x080047d1
 800458c:	080047d1 	.word	0x080047d1
 8004590:	080047d1 	.word	0x080047d1
 8004594:	080047d1 	.word	0x080047d1
 8004598:	080047d1 	.word	0x080047d1
 800459c:	080047d1 	.word	0x080047d1
 80045a0:	080047d1 	.word	0x080047d1
 80045a4:	080047d1 	.word	0x080047d1
 80045a8:	080047d1 	.word	0x080047d1
 80045ac:	080047d1 	.word	0x080047d1
 80045b0:	080047d1 	.word	0x080047d1
 80045b4:	080047d1 	.word	0x080047d1
 80045b8:	080047d1 	.word	0x080047d1
 80045bc:	080047d1 	.word	0x080047d1
 80045c0:	080047d1 	.word	0x080047d1
 80045c4:	080047d1 	.word	0x080047d1
 80045c8:	080047d1 	.word	0x080047d1
 80045cc:	080047d1 	.word	0x080047d1
 80045d0:	080047d1 	.word	0x080047d1
 80045d4:	080047d1 	.word	0x080047d1
 80045d8:	080047d1 	.word	0x080047d1
 80045dc:	080047d1 	.word	0x080047d1
 80045e0:	080047d1 	.word	0x080047d1
 80045e4:	080047d1 	.word	0x080047d1
 80045e8:	080047d1 	.word	0x080047d1
 80045ec:	080047d1 	.word	0x080047d1
 80045f0:	080047d1 	.word	0x080047d1
 80045f4:	080047d1 	.word	0x080047d1
 80045f8:	080047d1 	.word	0x080047d1
 80045fc:	080047d1 	.word	0x080047d1
 8004600:	080047d1 	.word	0x080047d1
 8004604:	080047d1 	.word	0x080047d1
 8004608:	080047d1 	.word	0x080047d1
 800460c:	080047d1 	.word	0x080047d1
 8004610:	080047c3 	.word	0x080047c3
 8004614:	080047d1 	.word	0x080047d1
 8004618:	080047d1 	.word	0x080047d1
 800461c:	080047d1 	.word	0x080047d1
 8004620:	080047d1 	.word	0x080047d1
 8004624:	080047d1 	.word	0x080047d1
 8004628:	080047d1 	.word	0x080047d1
 800462c:	080047d1 	.word	0x080047d1
 8004630:	080047d1 	.word	0x080047d1
 8004634:	080047d1 	.word	0x080047d1
 8004638:	080047d1 	.word	0x080047d1
 800463c:	080047d1 	.word	0x080047d1
 8004640:	080047d1 	.word	0x080047d1
 8004644:	080047d1 	.word	0x080047d1
 8004648:	080047d1 	.word	0x080047d1
 800464c:	080047d1 	.word	0x080047d1
 8004650:	080047d1 	.word	0x080047d1
 8004654:	080047d1 	.word	0x080047d1
 8004658:	080047d1 	.word	0x080047d1
 800465c:	080047d1 	.word	0x080047d1
 8004660:	080047d1 	.word	0x080047d1
 8004664:	080047d1 	.word	0x080047d1
 8004668:	080047d1 	.word	0x080047d1
 800466c:	080047d1 	.word	0x080047d1
 8004670:	080047d1 	.word	0x080047d1
 8004674:	080047d1 	.word	0x080047d1
 8004678:	08004691 	.word	0x08004691
  {
  case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	b2db      	uxtb	r3, r3
 8004680:	4619      	mov	r1, r3
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff fef6 	bl	8004474 <UI_SelectMC>
 8004688:	4603      	mov	r3, r0
 800468a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    break;
 800468e:	e0a4      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	4613      	mov	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	4a53      	ldr	r2, [pc, #332]	; (80047e8 <UI_SetReg+0x324>)
 800469c:	fb82 1203 	smull	r1, r2, r2, r3
 80046a0:	441a      	add	r2, r3
 80046a2:	1152      	asrs	r2, r2, #5
 80046a4:	17db      	asrs	r3, r3, #31
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	b21b      	sxth	r3, r3
 80046aa:	2200      	movs	r2, #0
 80046ac:	4619      	mov	r1, r3
 80046ae:	6a38      	ldr	r0, [r7, #32]
 80046b0:	f7fc fd9c 	bl	80011ec <MCI_ExecSpeedRamp>
    }
    break;
 80046b4:	e091      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_SPEED_KP:
    {
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	b212      	sxth	r2, r2
 80046be:	4611      	mov	r1, r2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f007 ff24 	bl	800c50e <PID_SetKP>
    }
    break;
 80046c6:	e088      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_SPEED_KI:
    {
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	b212      	sxth	r2, r2
 80046d0:	4611      	mov	r1, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f007 ff2a 	bl	800c52c <PID_SetKI>
    }
    break;
 80046d8:	e07f      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_SPEED_KD:
    {
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	b212      	sxth	r2, r2
 80046e2:	4611      	mov	r1, r2
 80046e4:	4618      	mov	r0, r3
 80046e6:	f007 ff70 	bl	800c5ca <PID_SetKD>
    }
    break;
 80046ea:	e076      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d108      	bne.n	8004706 <UI_SetReg+0x242>
      {
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 80046f4:	6a38      	ldr	r0, [r7, #32]
 80046f6:	f7fc ff60 	bl	80015ba <MCI_GetTeref>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2200      	movs	r2, #0
 80046fe:	4619      	mov	r1, r3
 8004700:	6a38      	ldr	r0, [r7, #32]
 8004702:	f7fc fd90 	bl	8001226 <MCI_ExecTorqueRamp>
      }
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	b2db      	uxtb	r3, r3
 800470a:	2b01      	cmp	r3, #1
 800470c:	d164      	bne.n	80047d8 <UI_SetReg+0x314>
      {
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 800470e:	6a38      	ldr	r0, [r7, #32]
 8004710:	f7fc feb6 	bl	8001480 <MCI_GetMecSpeedRefUnit>
 8004714:	4603      	mov	r3, r0
 8004716:	2200      	movs	r2, #0
 8004718:	4619      	mov	r1, r3
 800471a:	6a38      	ldr	r0, [r7, #32]
 800471c:	f7fc fd66 	bl	80011ec <MCI_ExecSpeedRamp>
      }
    }
    break;
 8004720:	e05a      	b.n	80047d8 <UI_SetReg+0x314>

  case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004722:	6a38      	ldr	r0, [r7, #32]
 8004724:	f7fc ff01 	bl	800152a <MCI_GetIqdref>
 8004728:	4603      	mov	r3, r0
 800472a:	61bb      	str	r3, [r7, #24]
      currComp.q = (int16_t)wValue;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	b21b      	sxth	r3, r3
 8004730:	833b      	strh	r3, [r7, #24]
      MCI_SetCurrentReferences(pMCI,currComp);
 8004732:	69b9      	ldr	r1, [r7, #24]
 8004734:	6a38      	ldr	r0, [r7, #32]
 8004736:	f7fc fd93 	bl	8001260 <MCI_SetCurrentReferences>
    }
    break;
 800473a:	e04e      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_TORQUE_KP:
    {
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	b212      	sxth	r2, r2
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f007 fee1 	bl	800c50e <PID_SetKP>
    }
    break;
 800474c:	e045      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_TORQUE_KI:
    {
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	b212      	sxth	r2, r2
 8004756:	4611      	mov	r1, r2
 8004758:	4618      	mov	r0, r3
 800475a:	f007 fee7 	bl	800c52c <PID_SetKI>
    }
    break;
 800475e:	e03c      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_TORQUE_KD:
    {
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	b212      	sxth	r2, r2
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f007 ff2d 	bl	800c5ca <PID_SetKD>
    }
    break;
 8004770:	e033      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004772:	6a38      	ldr	r0, [r7, #32]
 8004774:	f7fc fed9 	bl	800152a <MCI_GetIqdref>
 8004778:	4603      	mov	r3, r0
 800477a:	617b      	str	r3, [r7, #20]
      currComp.d = (int16_t)wValue;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	b21b      	sxth	r3, r3
 8004780:	82fb      	strh	r3, [r7, #22]
      MCI_SetCurrentReferences(pMCI,currComp);
 8004782:	6979      	ldr	r1, [r7, #20]
 8004784:	6a38      	ldr	r0, [r7, #32]
 8004786:	f7fc fd6b 	bl	8001260 <MCI_SetCurrentReferences>
    }
    break;
 800478a:	e026      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_FLUX_KP:
    {
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	b212      	sxth	r2, r2
 8004794:	4611      	mov	r1, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f007 feb9 	bl	800c50e <PID_SetKP>
    }
    break;
 800479c:	e01d      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_FLUX_KI:
    {
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	b212      	sxth	r2, r2
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f007 febf 	bl	800c52c <PID_SetKI>
    }
    break;
 80047ae:	e014      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_FLUX_KD:
    {
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	b212      	sxth	r2, r2
 80047b8:	4611      	mov	r1, r2
 80047ba:	4618      	mov	r0, r3
 80047bc:	f007 ff05 	bl	800c5ca <PID_SetKD>
    }
    break;
 80047c0:	e00b      	b.n	80047da <UI_SetReg+0x316>

  case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      MCI_SetIdref(pMCI,(int16_t)wValue);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	b21b      	sxth	r3, r3
 80047c6:	4619      	mov	r1, r3
 80047c8:	6a38      	ldr	r0, [r7, #32]
 80047ca:	f7fc ff04 	bl	80015d6 <MCI_SetIdref>
    }
    break;
 80047ce:	e004      	b.n	80047da <UI_SetReg+0x316>

  default:
    retVal = false;
 80047d0:	2300      	movs	r3, #0
 80047d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    break;
 80047d6:	e000      	b.n	80047da <UI_SetReg+0x316>
    break;
 80047d8:	bf00      	nop
  }

  return retVal;
 80047da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3728      	adds	r7, #40	; 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	88888889 	.word	0x88888889

080047ec <UI_GetReg>:

/* Used to execute a GetReg command coming from the user. */
__weak int32_t UI_GetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, bool * success)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b09c      	sub	sp, #112	; 0x70
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	460b      	mov	r3, r1
 80047f6:	607a      	str	r2, [r7, #4]
 80047f8:	72fb      	strb	r3, [r7, #11]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	663b      	str	r3, [r7, #96]	; 0x60
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	6a1a      	ldr	r2, [r3, #32]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	65fb      	str	r3, [r7, #92]	; 0x5c

  int32_t bRetVal = 0;
 800481e:	2300      	movs	r3, #0
 8004820:	66fb      	str	r3, [r7, #108]	; 0x6c

  if ( success != (bool *) 0 ) 
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <UI_GetReg+0x42>
  {
    *success = true;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	701a      	strb	r2, [r3, #0]
  }

  switch (bRegID)
 800482e:	7afb      	ldrb	r3, [r7, #11]
 8004830:	2b81      	cmp	r3, #129	; 0x81
 8004832:	f200 833d 	bhi.w	8004eb0 <UI_GetReg+0x6c4>
 8004836:	a201      	add	r2, pc, #4	; (adr r2, 800483c <UI_GetReg+0x50>)
 8004838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483c:	08004a45 	.word	0x08004a45
 8004840:	08004a51 	.word	0x08004a51
 8004844:	08004a61 	.word	0x08004a61
 8004848:	08004b45 	.word	0x08004b45
 800484c:	08004a71 	.word	0x08004a71
 8004850:	08004a93 	.word	0x08004a93
 8004854:	08004aa3 	.word	0x08004aa3
 8004858:	08004ab3 	.word	0x08004ab3
 800485c:	08004b21 	.word	0x08004b21
 8004860:	08004bc1 	.word	0x08004bc1
 8004864:	08004bd1 	.word	0x08004bd1
 8004868:	08004be1 	.word	0x08004be1
 800486c:	08004b33 	.word	0x08004b33
 8004870:	08004c03 	.word	0x08004c03
 8004874:	08004c13 	.word	0x08004c13
 8004878:	08004c23 	.word	0x08004c23
 800487c:	08004eb1 	.word	0x08004eb1
 8004880:	08004eb1 	.word	0x08004eb1
 8004884:	08004eb1 	.word	0x08004eb1
 8004888:	08004eb1 	.word	0x08004eb1
 800488c:	08004eb1 	.word	0x08004eb1
 8004890:	08004eb1 	.word	0x08004eb1
 8004894:	08004eb1 	.word	0x08004eb1
 8004898:	08004eb1 	.word	0x08004eb1
 800489c:	08004eb1 	.word	0x08004eb1
 80048a0:	08004ac3 	.word	0x08004ac3
 80048a4:	08004ad3 	.word	0x08004ad3
 80048a8:	08004c33 	.word	0x08004c33
 80048ac:	08004c43 	.word	0x08004c43
 80048b0:	08004c59 	.word	0x08004c59
 80048b4:	08004ae3 	.word	0x08004ae3
 80048b8:	08004dbb 	.word	0x08004dbb
 80048bc:	08004dcd 	.word	0x08004dcd
 80048c0:	08004eb1 	.word	0x08004eb1
 80048c4:	08004ddf 	.word	0x08004ddf
 80048c8:	08004dfd 	.word	0x08004dfd
 80048cc:	08004e0f 	.word	0x08004e0f
 80048d0:	08004e21 	.word	0x08004e21
 80048d4:	08004e33 	.word	0x08004e33
 80048d8:	08004dbb 	.word	0x08004dbb
 80048dc:	08004dcd 	.word	0x08004dcd
 80048e0:	08004e45 	.word	0x08004e45
 80048e4:	08004e57 	.word	0x08004e57
 80048e8:	08004e69 	.word	0x08004e69
 80048ec:	08004e7b 	.word	0x08004e7b
 80048f0:	08004e8d 	.word	0x08004e8d
 80048f4:	08004e9f 	.word	0x08004e9f
 80048f8:	08004cab 	.word	0x08004cab
 80048fc:	08004d11 	.word	0x08004d11
 8004900:	08004eb1 	.word	0x08004eb1
 8004904:	08004eb1 	.word	0x08004eb1
 8004908:	08004eb1 	.word	0x08004eb1
 800490c:	08004eb1 	.word	0x08004eb1
 8004910:	08004eb1 	.word	0x08004eb1
 8004914:	08004eb1 	.word	0x08004eb1
 8004918:	08004eb1 	.word	0x08004eb1
 800491c:	08004eb1 	.word	0x08004eb1
 8004920:	08004eb1 	.word	0x08004eb1
 8004924:	08004eb1 	.word	0x08004eb1
 8004928:	08004eb1 	.word	0x08004eb1
 800492c:	08004eb1 	.word	0x08004eb1
 8004930:	08004c6f 	.word	0x08004c6f
 8004934:	08004c8d 	.word	0x08004c8d
 8004938:	08004d6f 	.word	0x08004d6f
 800493c:	08004d95 	.word	0x08004d95
 8004940:	08004bf1 	.word	0x08004bf1
 8004944:	08004eb1 	.word	0x08004eb1
 8004948:	08004eb1 	.word	0x08004eb1
 800494c:	08004eb1 	.word	0x08004eb1
 8004950:	08004eb1 	.word	0x08004eb1
 8004954:	08004eb1 	.word	0x08004eb1
 8004958:	08004eb1 	.word	0x08004eb1
 800495c:	08004eb1 	.word	0x08004eb1
 8004960:	08004eb1 	.word	0x08004eb1
 8004964:	08004eb1 	.word	0x08004eb1
 8004968:	08004eb1 	.word	0x08004eb1
 800496c:	08004eb1 	.word	0x08004eb1
 8004970:	08004eb1 	.word	0x08004eb1
 8004974:	08004eb1 	.word	0x08004eb1
 8004978:	08004eb1 	.word	0x08004eb1
 800497c:	08004eb1 	.word	0x08004eb1
 8004980:	08004eb1 	.word	0x08004eb1
 8004984:	08004eb1 	.word	0x08004eb1
 8004988:	08004eb1 	.word	0x08004eb1
 800498c:	08004eb1 	.word	0x08004eb1
 8004990:	08004eb1 	.word	0x08004eb1
 8004994:	08004eb1 	.word	0x08004eb1
 8004998:	08004eb1 	.word	0x08004eb1
 800499c:	08004eb1 	.word	0x08004eb1
 80049a0:	08004eb1 	.word	0x08004eb1
 80049a4:	08004eb1 	.word	0x08004eb1
 80049a8:	08004b51 	.word	0x08004b51
 80049ac:	08004eb1 	.word	0x08004eb1
 80049b0:	08004eb1 	.word	0x08004eb1
 80049b4:	08004eb1 	.word	0x08004eb1
 80049b8:	08004eb1 	.word	0x08004eb1
 80049bc:	08004eb1 	.word	0x08004eb1
 80049c0:	08004eb1 	.word	0x08004eb1
 80049c4:	08004eb1 	.word	0x08004eb1
 80049c8:	08004eb1 	.word	0x08004eb1
 80049cc:	08004eb1 	.word	0x08004eb1
 80049d0:	08004eb1 	.word	0x08004eb1
 80049d4:	08004eb1 	.word	0x08004eb1
 80049d8:	08004eb1 	.word	0x08004eb1
 80049dc:	08004eb1 	.word	0x08004eb1
 80049e0:	08004eb1 	.word	0x08004eb1
 80049e4:	08004eb1 	.word	0x08004eb1
 80049e8:	08004eb1 	.word	0x08004eb1
 80049ec:	08004eb1 	.word	0x08004eb1
 80049f0:	08004eb1 	.word	0x08004eb1
 80049f4:	08004ba1 	.word	0x08004ba1
 80049f8:	08004bb1 	.word	0x08004bb1
 80049fc:	08004b05 	.word	0x08004b05
 8004a00:	08004eb1 	.word	0x08004eb1
 8004a04:	08004b0b 	.word	0x08004b0b
 8004a08:	08004b13 	.word	0x08004b13
 8004a0c:	08004eb1 	.word	0x08004eb1
 8004a10:	08004eb1 	.word	0x08004eb1
 8004a14:	08004eb1 	.word	0x08004eb1
 8004a18:	08004eb1 	.word	0x08004eb1
 8004a1c:	08004eb1 	.word	0x08004eb1
 8004a20:	08004eb1 	.word	0x08004eb1
 8004a24:	08004eb1 	.word	0x08004eb1
 8004a28:	08004eb1 	.word	0x08004eb1
 8004a2c:	08004eb1 	.word	0x08004eb1
 8004a30:	08004eb1 	.word	0x08004eb1
 8004a34:	08004eb1 	.word	0x08004eb1
 8004a38:	08004eb1 	.word	0x08004eb1
 8004a3c:	08004eb1 	.word	0x08004eb1
 8004a40:	08004b1b 	.word	0x08004b1b
  {
    case MC_PROTOCOL_REG_TARGET_MOTOR:
    {
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f7ff fd30 	bl	80044aa <UI_GetSelectedMC>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004a4e:	e23b      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_FLAGS:
    {
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 8004a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	4618      	mov	r0, r3
 8004a56:	f00a fe22 	bl	800f69e <STM_GetFaultState>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
	break;
 8004a5e:	e233      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_STATUS:
    {
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8004a60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a64:	4618      	mov	r0, r3
 8004a66:	f00a fdf5 	bl	800f654 <STM_GetState>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
	break;
 8004a6e:	e22b      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_SPEED_REF:
    {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 8004a70:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004a72:	f7fc fd05 	bl	8001480 <MCI_GetMecSpeedRefUnit>
 8004a76:	4603      	mov	r3, r0
 8004a78:	461a      	mov	r2, r3
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	011b      	lsls	r3, r3, #4
 8004a7e:	1a9b      	subs	r3, r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4aa1      	ldr	r2, [pc, #644]	; (8004d08 <UI_GetReg+0x51c>)
 8004a84:	fb82 1203 	smull	r1, r2, r2, r3
 8004a88:	1092      	asrs	r2, r2, #2
 8004a8a:	17db      	asrs	r3, r3, #31
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004a90:	e21a      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_SPEED_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8004a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f007 fd57 	bl	800c54a <PID_GetKP>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004aa0:	e212      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_SPEED_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 8004aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f007 fd5c 	bl	800c564 <PID_GetKI>
 8004aac:	4603      	mov	r3, r0
 8004aae:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004ab0:	e20a      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_SPEED_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8004ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f007 fd96 	bl	800c5e8 <PID_GetKD>
 8004abc:	4603      	mov	r3, r0
 8004abe:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004ac0:	e202      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_BUS_VOLTAGE:
    {
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8004ac2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f006 feba 	bl	800b840 <VBS_GetAvBusVoltage_V>
 8004acc:	4603      	mov	r3, r0
 8004ace:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004ad0:	e1fa      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_HEATS_TEMP:
    {
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 8004ad2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f007 fcc9 	bl	800c46e <NTC_GetAvTemp_C>
 8004adc:	4603      	mov	r3, r0
 8004ade:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004ae0:	e1f2      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_SPEED_MEAS:
    {
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 8004ae2:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004ae4:	f7fc fcba 	bl	800145c <MCI_GetAvrgMecSpeedUnit>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	461a      	mov	r2, r3
 8004aec:	4613      	mov	r3, r2
 8004aee:	011b      	lsls	r3, r3, #4
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4a84      	ldr	r2, [pc, #528]	; (8004d08 <UI_GetReg+0x51c>)
 8004af6:	fb82 1203 	smull	r1, r2, r2, r3
 8004afa:	1092      	asrs	r2, r2, #2
 8004afc:	17db      	asrs	r3, r3, #31
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004b02:	e1e1      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_UID:
    {
      bRetVal = (int32_t)(MC_UID);
 8004b04:	4b81      	ldr	r3, [pc, #516]	; (8004d0c <UI_GetReg+0x520>)
 8004b06:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004b08:	e1de      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_CTRBDID:
    {
      bRetVal = CTRBDID;
 8004b0a:	f242 731f 	movw	r3, #10015	; 0x271f
 8004b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004b10:	e1da      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_PWBDID:
    {
      bRetVal = PWBDID;
 8004b12:	f242 731f 	movw	r3, #10015	; 0x271f
 8004b16:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004b18:	e1d6      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_PWBDID2:
    {
      bRetVal = (uint32_t) 0;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004b1e:	e1d3      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_TORQUE_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004b20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004b22:	f7fc fd02 	bl	800152a <MCI_GetIqdref>
 8004b26:	4603      	mov	r3, r0
 8004b28:	61fb      	str	r3, [r7, #28]
      bRetVal = (int32_t)currComp.q;
 8004b2a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8004b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004b30:	e1ca      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_FLUX_REF:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004b32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004b34:	f7fc fcf9 	bl	800152a <MCI_GetIqdref>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	61bb      	str	r3, [r7, #24]
      bRetVal = (int32_t)currComp.d;
 8004b3c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004b40:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004b42:	e1c1      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_CONTROL_MODE:
    {
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8004b44:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004b46:	f7fc fc5b 	bl	8001400 <MCI_GetControlMode>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004b4e:	e1bb      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_RAMP_FINAL_SPEED:
    {
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 8004b50:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004b52:	f7fc fc55 	bl	8001400 <MCI_GetControlMode>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d110      	bne.n	8004b7e <UI_GetReg+0x392>
      {
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 8004b5c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004b5e:	f7fc fc5b 	bl	8001418 <MCI_GetLastRampFinalSpeed>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	4613      	mov	r3, r2
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4a66      	ldr	r2, [pc, #408]	; (8004d08 <UI_GetReg+0x51c>)
 8004b70:	fb82 1203 	smull	r1, r2, r2, r3
 8004b74:	1092      	asrs	r2, r2, #2
 8004b76:	17db      	asrs	r3, r3, #31
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	66fb      	str	r3, [r7, #108]	; 0x6c
      else
      {
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
      }
    }
    break;
 8004b7c:	e1a4      	b.n	8004ec8 <UI_GetReg+0x6dc>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 8004b7e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004b80:	f7fc fc7e 	bl	8001480 <MCI_GetMecSpeedRefUnit>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4a5d      	ldr	r2, [pc, #372]	; (8004d08 <UI_GetReg+0x51c>)
 8004b92:	fb82 1203 	smull	r1, r2, r2, r3
 8004b96:	1092      	asrs	r2, r2, #2
 8004b98:	17db      	asrs	r3, r3, #31
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    break;
 8004b9e:	e193      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_SPEED_KP_DIV:
    {
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8004ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	f007 fcf8 	bl	800c59a <PID_GetKPDivisor>
 8004baa:	4603      	mov	r3, r0
 8004bac:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004bae:	e18b      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_SPEED_KI_DIV:
    {
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8004bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f007 fcfc 	bl	800c5b2 <PID_GetKIDivisor>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004bbe:	e183      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_TORQUE_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8004bc0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f007 fcc0 	bl	800c54a <PID_GetKP>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004bce:	e17b      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_TORQUE_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8004bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f007 fcc5 	bl	800c564 <PID_GetKI>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004bde:	e173      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_TORQUE_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8004be0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f007 fcff 	bl	800c5e8 <PID_GetKD>
 8004bea:	4603      	mov	r3, r0
 8004bec:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004bee:	e16b      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_IQ_SPEEDMODE:
    {
      qd_t currComp;
      currComp = MCI_GetIqdref(pMCI);
 8004bf0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004bf2:	f7fc fc9a 	bl	800152a <MCI_GetIqdref>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	617b      	str	r3, [r7, #20]
      bRetVal = (int32_t)currComp.d;
 8004bfa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004c00:	e162      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_FLUX_KP:
    {
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 8004c02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f007 fc9f 	bl	800c54a <PID_GetKP>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004c10:	e15a      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_FLUX_KI:
    {
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8004c12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f007 fca4 	bl	800c564 <PID_GetKI>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004c20:	e152      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_FLUX_KD:
    {
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 8004c22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f007 fcde 	bl	800c5e8 <PID_GetKD>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004c30:	e14a      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_MOTOR_POWER:
    {
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 8004c32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c36:	4618      	mov	r0, r3
 8004c38:	f007 fb7e 	bl	800c338 <MPM_GetAvrgElMotorPowerW>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004c40:	e142      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_DAC_OUT1:
    {
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 8004c42:	2100      	movs	r1, #0
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fac3 	bl	80051d0 <UI_GetDAC>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
      bRetVal = value;
 8004c50:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8004c54:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004c56:	e137      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_DAC_OUT2:
    {
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 8004c58:	2101      	movs	r1, #1
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fab8 	bl	80051d0 <UI_GetDAC>
 8004c60:	4603      	mov	r3, r0
 8004c62:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
      bRetVal = value;
 8004c66:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004c6a:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004c6c:	e12c      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_DAC_USER1:
    {
      if (pHandle->pFctDACGetUserChannelValue)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d007      	beq.n	8004c86 <UI_GetReg+0x49a>
      {
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	4798      	blx	r3
 8004c80:	4603      	mov	r3, r0
 8004c82:	66fb      	str	r3, [r7, #108]	; 0x6c
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 8004c84:	e120      	b.n	8004ec8 <UI_GetReg+0x6dc>
        bRetVal = (uint32_t) 0;
 8004c86:	2300      	movs	r3, #0
 8004c88:	66fb      	str	r3, [r7, #108]	; 0x6c
    break;
 8004c8a:	e11d      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_DAC_USER2:
    {
      if (pHandle->pFctDACGetUserChannelValue)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <UI_GetReg+0x4b8>
      {
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2101      	movs	r1, #1
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	4798      	blx	r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	66fb      	str	r3, [r7, #108]	; 0x6c
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 8004ca2:	e111      	b.n	8004ec8 <UI_GetReg+0x6dc>
        bRetVal = (uint32_t) 0;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	66fb      	str	r3, [r7, #108]	; 0x6c
    break;
 8004ca8:	e10e      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_MEAS_EL_ANGLE:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4413      	add	r3, r2
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	657b      	str	r3, [r7, #84]	; 0x54
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	66bb      	str	r3, [r7, #104]	; 0x68
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	0f1b      	lsrs	r3, r3, #28
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d003      	beq.n	8004cd0 <UI_GetReg+0x4e4>
          (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_HALL))
 8004cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cca:	0f1b      	lsrs	r3, r3, #28
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <UI_GetReg+0x4ea>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004cd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cd2:	699b      	ldr	r3, [r3, #24]
 8004cd4:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004cd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd8:	0e1b      	lsrs	r3, r3, #24
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d005      	beq.n	8004cee <UI_GetReg+0x502>
          (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_HALL))
 8004ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce4:	0e1b      	lsrs	r3, r3, #24
 8004ce6:	f003 030f 	and.w	r3, r3, #15
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d102      	bne.n	8004cf4 <UI_GetReg+0x508>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004cee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004cf0:	69db      	ldr	r3, [r3, #28]
 8004cf2:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      if (pSPD != MC_NULL)
 8004cf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	f000 80e1 	beq.w	8004ebe <UI_GetReg+0x6d2>
      {
        bRetVal = SPD_GetElAngle(pSPD);
 8004cfc:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8004cfe:	f00a f850 	bl	800eda2 <SPD_GetElAngle>
 8004d02:	4603      	mov	r3, r0
 8004d04:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
    }
    break;
 8004d06:	e0da      	b.n	8004ebe <UI_GetReg+0x6d2>
 8004d08:	66666667 	.word	0x66666667
 8004d0c:	34a6847a 	.word	0x34a6847a

    case MC_PROTOCOL_REG_MEAS_ROT_SPEED:
    {
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d1a:	009b      	lsls	r3, r3, #2
 8004d1c:	4413      	add	r3, r2
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	65bb      	str	r3, [r7, #88]	; 0x58
      SpeednPosFdbk_Handle_t* pSPD = MC_NULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	667b      	str	r3, [r7, #100]	; 0x64
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d28:	0f1b      	lsrs	r3, r3, #28
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d003      	beq.n	8004d36 <UI_GetReg+0x54a>
          (MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_HALL))
 8004d2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d30:	0f1b      	lsrs	r3, r3, #28
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d102      	bne.n	8004d3c <UI_GetReg+0x550>
      {
        pSPD = pMCT->pSpeedSensorMain;
 8004d36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	667b      	str	r3, [r7, #100]	; 0x64
      }
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d3e:	0e1b      	lsrs	r3, r3, #24
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d005      	beq.n	8004d54 <UI_GetReg+0x568>
          (AUX_SCFG_VALUE(hUICfg) == UI_SCODE_HALL))
 8004d48:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d4a:	0e1b      	lsrs	r3, r3, #24
 8004d4c:	f003 030f 	and.w	r3, r3, #15
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d102      	bne.n	8004d5a <UI_GetReg+0x56e>
      {
        pSPD = pMCT->pSpeedSensorAux;
 8004d54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	667b      	str	r3, [r7, #100]	; 0x64
      }
      if (pSPD != MC_NULL)
 8004d5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 80b0 	beq.w	8004ec2 <UI_GetReg+0x6d6>
      {
        bRetVal = SPD_GetS16Speed(pSPD);
 8004d62:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8004d64:	f00a f8af 	bl	800eec6 <SPD_GetS16Speed>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	66fb      	str	r3, [r7, #108]	; 0x6c
      }
    }
    break;
 8004d6c:	e0a9      	b.n	8004ec2 <UI_GetReg+0x6d6>

    case MC_PROTOCOL_REG_MAX_APP_SPEED:
    {
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 8004d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d72:	4618      	mov	r0, r3
 8004d74:	f00a fa75 	bl	800f262 <STC_GetMaxAppPositiveMecSpeedUnit>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4a53      	ldr	r2, [pc, #332]	; (8004ed4 <UI_GetReg+0x6e8>)
 8004d86:	fb82 1203 	smull	r1, r2, r2, r3
 8004d8a:	1092      	asrs	r2, r2, #2
 8004d8c:	17db      	asrs	r3, r3, #31
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004d92:	e099      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_MIN_APP_SPEED:
    {
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 8004d94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f00a fa6e 	bl	800f27a <STC_GetMinAppNegativeMecSpeedUnit>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	4613      	mov	r3, r2
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4a4a      	ldr	r2, [pc, #296]	; (8004ed4 <UI_GetReg+0x6e8>)
 8004dac:	fb82 1203 	smull	r1, r2, r2, r3
 8004db0:	1092      	asrs	r2, r2, #2
 8004db2:	17db      	asrs	r3, r3, #31
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004db8:	e086      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_TORQUE_MEAS:
    case MC_PROTOCOL_REG_I_Q:
    {
      bRetVal = MCI_GetIqd(pMCI).q;
 8004dba:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004dbc:	f7fc fb9d 	bl	80014fa <MCI_GetIqd>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	623b      	str	r3, [r7, #32]
 8004dc4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8004dc8:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004dca:	e07d      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_FLUX_MEAS:
    case MC_PROTOCOL_REG_I_D:
    {
      bRetVal = MCI_GetIqd(pMCI).d;
 8004dcc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004dce:	f7fc fb94 	bl	80014fa <MCI_GetIqd>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004dda:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004ddc:	e074      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_RUC_STAGE_NBR:
    {
      if (pMCT->pRevupCtrl)
 8004dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <UI_GetReg+0x60a>
      {
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 8004de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004de8:	695b      	ldr	r3, [r3, #20]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f00a ff70 	bl	800fcd0 <RUC_GetNumberOfPhases>
 8004df0:	4603      	mov	r3, r0
 8004df2:	66fb      	str	r3, [r7, #108]	; 0x6c
      else
      {
        bRetVal = (uint32_t) 0;
      }
    }
    break;
 8004df4:	e068      	b.n	8004ec8 <UI_GetReg+0x6dc>
        bRetVal = (uint32_t) 0;
 8004df6:	2300      	movs	r3, #0
 8004df8:	66fb      	str	r3, [r7, #108]	; 0x6c
    break;
 8004dfa:	e065      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_I_A:
    {
      bRetVal = MCI_GetIab(pMCI).a;
 8004dfc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004dfe:	f7fc fb4d 	bl	800149c <MCI_GetIab>
 8004e02:	4603      	mov	r3, r0
 8004e04:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e06:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8004e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e0c:	e05c      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_I_B:
    {
      bRetVal = MCI_GetIab(pMCI).b;
 8004e0e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e10:	f7fc fb44 	bl	800149c <MCI_GetIab>
 8004e14:	4603      	mov	r3, r0
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e18:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004e1c:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e1e:	e053      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_I_ALPHA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 8004e20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e22:	f7fc fb52 	bl	80014ca <MCI_GetIalphabeta>
 8004e26:	4603      	mov	r3, r0
 8004e28:	633b      	str	r3, [r7, #48]	; 0x30
 8004e2a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8004e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e30:	e04a      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_I_BETA:
    {
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 8004e32:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e34:	f7fc fb49 	bl	80014ca <MCI_GetIalphabeta>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004e40:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e42:	e041      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_I_Q_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).q;
 8004e44:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e46:	f7fc fb70 	bl	800152a <MCI_GetIqdref>
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e4e:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8004e52:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e54:	e038      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_I_D_REF:
    {
      bRetVal = MCI_GetIqdref(pMCI).d;
 8004e56:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e58:	f7fc fb67 	bl	800152a <MCI_GetIqdref>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e60:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8004e64:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e66:	e02f      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_V_Q:
    {
      bRetVal = MCI_GetVqd(pMCI).q;
 8004e68:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e6a:	f7fc fb76 	bl	800155a <MCI_GetVqd>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	643b      	str	r3, [r7, #64]	; 0x40
 8004e72:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8004e76:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e78:	e026      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_V_D:
    {
      bRetVal = MCI_GetVqd(pMCI).d;
 8004e7a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e7c:	f7fc fb6d 	bl	800155a <MCI_GetVqd>
 8004e80:	4603      	mov	r3, r0
 8004e82:	647b      	str	r3, [r7, #68]	; 0x44
 8004e84:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8004e88:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e8a:	e01d      	b.n	8004ec8 <UI_GetReg+0x6dc>

   case MC_PROTOCOL_REG_V_ALPHA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 8004e8c:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004e8e:	f7fc fb7c 	bl	800158a <MCI_GetValphabeta>
 8004e92:	4603      	mov	r3, r0
 8004e94:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e96:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8004e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004e9c:	e014      	b.n	8004ec8 <UI_GetReg+0x6dc>

    case MC_PROTOCOL_REG_V_BETA:
    {
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8004e9e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8004ea0:	f7fc fb73 	bl	800158a <MCI_GetValphabeta>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ea8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8004eac:	66fb      	str	r3, [r7, #108]	; 0x6c
    }
    break;
 8004eae:	e00b      	b.n	8004ec8 <UI_GetReg+0x6dc>

    default:
	{
      if ( success != (bool *) 0 ) 
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d007      	beq.n	8004ec6 <UI_GetReg+0x6da>
      {
        *success = false;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	701a      	strb	r2, [r3, #0]
      }
	}
    break;
 8004ebc:	e003      	b.n	8004ec6 <UI_GetReg+0x6da>
    break;
 8004ebe:	bf00      	nop
 8004ec0:	e002      	b.n	8004ec8 <UI_GetReg+0x6dc>
    break;
 8004ec2:	bf00      	nop
 8004ec4:	e000      	b.n	8004ec8 <UI_GetReg+0x6dc>
    break;
 8004ec6:	bf00      	nop
  }
  return bRetVal;
 8004ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3770      	adds	r7, #112	; 0x70
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	66666667 	.word	0x66666667

08004ed8 <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	70fb      	strb	r3, [r7, #3]
  bool retVal = true;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60bb      	str	r3, [r7, #8]

  switch (bCmdID)
 8004efa:	78fb      	ldrb	r3, [r7, #3]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	2b0d      	cmp	r3, #13
 8004f00:	d84a      	bhi.n	8004f98 <UI_ExecCmd+0xc0>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UI_ExecCmd+0x30>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f41 	.word	0x08004f41
 8004f0c:	08004f49 	.word	0x08004f49
 8004f10:	08004f51 	.word	0x08004f51
 8004f14:	08004f9f 	.word	0x08004f9f
 8004f18:	08004f9f 	.word	0x08004f9f
 8004f1c:	08004f65 	.word	0x08004f65
 8004f20:	08004f81 	.word	0x08004f81
 8004f24:	08004f89 	.word	0x08004f89
 8004f28:	08004f91 	.word	0x08004f91
 8004f2c:	08004f99 	.word	0x08004f99
 8004f30:	08004f99 	.word	0x08004f99
 8004f34:	08004f99 	.word	0x08004f99
 8004f38:	08004f99 	.word	0x08004f99
 8004f3c:	08004f49 	.word	0x08004f49
  {
  case MC_PROTOCOL_CMD_START_MOTOR:
    {
      /* Call MCI Start motor; */
      MCI_StartMotor(pMCI);
 8004f40:	68b8      	ldr	r0, [r7, #8]
 8004f42:	f7fc f9a9 	bl	8001298 <MCI_StartMotor>
    }
    break;
 8004f46:	e02d      	b.n	8004fa4 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_MOTOR:
  case MC_PROTOCOL_CMD_SC_STOP:
    {
      /* Call MCI Stop motor; */
      MCI_StopMotor(pMCI);
 8004f48:	68b8      	ldr	r0, [r7, #8]
 8004f4a:	f7fc f9bc 	bl	80012c6 <MCI_StopMotor>
    }
    break;
 8004f4e:	e029      	b.n	8004fa4 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_STOP_RAMP:
    {
      if (MCI_GetSTMState(pMCI) == RUN)
 8004f50:	68b8      	ldr	r0, [r7, #8]
 8004f52:	f7fc fa47 	bl	80013e4 <MCI_GetSTMState>
 8004f56:	4603      	mov	r3, r0
 8004f58:	2b06      	cmp	r3, #6
 8004f5a:	d122      	bne.n	8004fa2 <UI_ExecCmd+0xca>
      {
        MCI_StopRamp(pMCI);
 8004f5c:	68b8      	ldr	r0, [r7, #8]
 8004f5e:	f7fc fa70 	bl	8001442 <MCI_StopRamp>
      }
    }
    break;
 8004f62:	e01e      	b.n	8004fa2 <UI_ExecCmd+0xca>
    break;

  case MC_PROTOCOL_CMD_START_STOP:
    {
      /* Queries the STM and a command start or stop depending on the state. */
      if (MCI_GetSTMState(pMCI) == IDLE)
 8004f64:	68b8      	ldr	r0, [r7, #8]
 8004f66:	f7fc fa3d 	bl	80013e4 <MCI_GetSTMState>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d103      	bne.n	8004f78 <UI_ExecCmd+0xa0>
      {
        MCI_StartMotor(pMCI);
 8004f70:	68b8      	ldr	r0, [r7, #8]
 8004f72:	f7fc f991 	bl	8001298 <MCI_StartMotor>
      else
      {
        MCI_StopMotor(pMCI);
      }
    }
    break;
 8004f76:	e015      	b.n	8004fa4 <UI_ExecCmd+0xcc>
        MCI_StopMotor(pMCI);
 8004f78:	68b8      	ldr	r0, [r7, #8]
 8004f7a:	f7fc f9a4 	bl	80012c6 <MCI_StopMotor>
    break;
 8004f7e:	e011      	b.n	8004fa4 <UI_ExecCmd+0xcc>
    }
    break;

  case MC_PROTOCOL_CMD_FAULT_ACK:
    {
      MCI_FaultAcknowledged(pMCI);
 8004f80:	68b8      	ldr	r0, [r7, #8]
 8004f82:	f7fc f9af 	bl	80012e4 <MCI_FaultAcknowledged>
    }
    break;
 8004f86:	e00d      	b.n	8004fa4 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_ENCODER_ALIGN:
    {
      MCI_EncoderAlign(pMCI);
 8004f88:	68b8      	ldr	r0, [r7, #8]
 8004f8a:	f7fc f9b9 	bl	8001300 <MCI_EncoderAlign>
    }
    break;
 8004f8e:	e009      	b.n	8004fa4 <UI_ExecCmd+0xcc>

  case MC_PROTOCOL_CMD_IQDREF_CLEAR:
    {
      MCI_Clear_Iqdref(pMCI);
 8004f90:	68b8      	ldr	r0, [r7, #8]
 8004f92:	f7fc fb34 	bl	80015fe <MCI_Clear_Iqdref>
    }
    break;
 8004f96:	e005      	b.n	8004fa4 <UI_ExecCmd+0xcc>

  default:
    {
    retVal = false;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	73fb      	strb	r3, [r7, #15]
	}
    break;
 8004f9c:	e002      	b.n	8004fa4 <UI_ExecCmd+0xcc>
    break;
 8004f9e:	bf00      	nop
 8004fa0:	e000      	b.n	8004fa4 <UI_ExecCmd+0xcc>
    break;
 8004fa2:	bf00      	nop
  }
  return retVal;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop

08004fb0 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds. 
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b086      	sub	sp, #24
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	80fb      	strh	r3, [r7, #6]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1a      	ldr	r2, [r3, #32]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4413      	add	r3, r2
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	617b      	str	r3, [r7, #20]

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	4613      	mov	r3, r2
 8004fd4:	009b      	lsls	r3, r3, #2
 8004fd6:	4413      	add	r3, r2
 8004fd8:	005b      	lsls	r3, r3, #1
 8004fda:	4a09      	ldr	r2, [pc, #36]	; (8005000 <UI_ExecSpeedRamp+0x50>)
 8004fdc:	fb82 1203 	smull	r1, r2, r2, r3
 8004fe0:	441a      	add	r2, r3
 8004fe2:	1152      	asrs	r2, r2, #5
 8004fe4:	17db      	asrs	r3, r3, #31
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	b21b      	sxth	r3, r3
 8004fea:	88fa      	ldrh	r2, [r7, #6]
 8004fec:	4619      	mov	r1, r3
 8004fee:	6978      	ldr	r0, [r7, #20]
 8004ff0:	f7fc f8fc 	bl	80011ec <MCI_ExecSpeedRamp>
  return true;
 8004ff4:	2301      	movs	r3, #1
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	88888889 	.word	0x88888889

08005004 <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	460b      	mov	r3, r1
 800500e:	807b      	strh	r3, [r7, #2]
 8005010:	4613      	mov	r3, r2
 8005012:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1a      	ldr	r2, [r3, #32]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	60fb      	str	r3, [r7, #12]

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8005026:	883a      	ldrh	r2, [r7, #0]
 8005028:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800502c:	4619      	mov	r1, r3
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f7fc f8f9 	bl	8001226 <MCI_ExecTorqueRamp>
  return true;
 8005034:	2301      	movs	r3, #1
}
 8005036:	4618      	mov	r0, r3
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UI_GetRevupData>:
  *         
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	607a      	str	r2, [r7, #4]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	460b      	mov	r3, r1
 800504c:	72fb      	strb	r3, [r7, #11]
  bool hRetVal = true;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	695b      	ldr	r3, [r3, #20]
 8005064:	613b      	str	r3, [r7, #16]
  if (pRevupCtrl)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d01b      	beq.n	80050a4 <UI_GetRevupData+0x66>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 800506c:	7afb      	ldrb	r3, [r7, #11]
 800506e:	4619      	mov	r1, r3
 8005070:	6938      	ldr	r0, [r7, #16]
 8005072:	f00a fe17 	bl	800fca4 <RUC_GetPhaseDurationms>
 8005076:	4603      	mov	r3, r0
 8005078:	461a      	mov	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	801a      	strh	r2, [r3, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800507e:	7afb      	ldrb	r3, [r7, #11]
 8005080:	4619      	mov	r1, r3
 8005082:	6938      	ldr	r0, [r7, #16]
 8005084:	f00a fe14 	bl	800fcb0 <RUC_GetPhaseFinalMecSpeedUnit>
 8005088:	4603      	mov	r3, r0
 800508a:	461a      	mov	r2, r3
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	801a      	strh	r2, [r3, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 8005090:	7afb      	ldrb	r3, [r7, #11]
 8005092:	4619      	mov	r1, r3
 8005094:	6938      	ldr	r0, [r7, #16]
 8005096:	f00a fe13 	bl	800fcc0 <RUC_GetPhaseFinalTorque>
 800509a:	4603      	mov	r3, r0
 800509c:	461a      	mov	r2, r3
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	801a      	strh	r2, [r3, #0]
 80050a2:	e001      	b.n	80050a8 <UI_GetRevupData+0x6a>
  }
  else
  {
    hRetVal = false;
 80050a4:	2300      	movs	r3, #0
 80050a6:	75fb      	strb	r3, [r7, #23]
  }
  return hRetVal;
 80050a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b086      	sub	sp, #24
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	60f8      	str	r0, [r7, #12]
 80050ba:	4608      	mov	r0, r1
 80050bc:	4611      	mov	r1, r2
 80050be:	461a      	mov	r2, r3
 80050c0:	4603      	mov	r3, r0
 80050c2:	72fb      	strb	r3, [r7, #11]
 80050c4:	460b      	mov	r3, r1
 80050c6:	813b      	strh	r3, [r7, #8]
 80050c8:	4613      	mov	r3, r2
 80050ca:	80fb      	strh	r3, [r7, #6]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695b      	ldr	r3, [r3, #20]
 80050de:	617b      	str	r3, [r7, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 80050e0:	893a      	ldrh	r2, [r7, #8]
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	4619      	mov	r1, r3
 80050e6:	6978      	ldr	r0, [r7, #20]
 80050e8:	f00a fdca 	bl	800fc80 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 80050ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80050f0:	7afb      	ldrb	r3, [r7, #11]
 80050f2:	4619      	mov	r1, r3
 80050f4:	6978      	ldr	r0, [r7, #20]
 80050f6:	f00a fdc9 	bl	800fc8c <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 80050fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80050fe:	7afb      	ldrb	r3, [r7, #11]
 8005100:	4619      	mov	r1, r3
 8005102:	6978      	ldr	r0, [r7, #20]
 8005104:	f00a fdc8 	bl	800fc98 <RUC_SetPhaseFinalTorque>
  return true;
 8005108:	2301      	movs	r3, #1
}
 800510a:	4618      	mov	r0, r3
 800510c:	3718      	adds	r7, #24
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame. 
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
 800511a:	460b      	mov	r3, r1
 800511c:	807b      	strh	r3, [r7, #2]
 800511e:	4613      	mov	r3, r2
 8005120:	803b      	strh	r3, [r7, #0]

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1a      	ldr	r2, [r3, #32]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	60fb      	str	r3, [r7, #12]
  qd_t currComp;
  currComp.q = hIqRef;
 8005134:	887b      	ldrh	r3, [r7, #2]
 8005136:	813b      	strh	r3, [r7, #8]
  currComp.d = hIdRef;
 8005138:	883b      	ldrh	r3, [r7, #0]
 800513a:	817b      	strh	r3, [r7, #10]
  MCI_SetCurrentReferences(pMCI,currComp);
 800513c:	68b9      	ldr	r1, [r7, #8]
 800513e:	68f8      	ldr	r0, [r7, #12]
 8005140:	f7fc f88e 	bl	8001260 <MCI_SetCurrentReferences>
}
 8005144:	bf00      	nop
 8005146:	3710      	adds	r7, #16
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <UI_GetMPInfo>:
  * @param  pMPInfo: The returned list of register.
  *         It is populated by this function.
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
    return false;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <UI_DACInit>:
  * @brief  Hardware and software DAC initialization.
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  if (pHandle->pFct_DACInit)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <UI_DACInit+0x18>
  {
	  pHandle->pFct_DACInit(pHandle);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	4798      	blx	r3
  }
}
 800517c:	bf00      	nop
 800517e:	3708      	adds	r7, #8
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <UI_DACExec>:
  * @brief  Allow to update the DAC outputs. 
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  if (pHandle->pFct_DACExec)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <UI_DACExec+0x18>
  {
    pHandle->pFct_DACExec(pHandle);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	4798      	blx	r3
  }
}
 800519c:	bf00      	nop
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <UI_SetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	460b      	mov	r3, r1
 80051ae:	70fb      	strb	r3, [r7, #3]
 80051b0:	4613      	mov	r3, r2
 80051b2:	70bb      	strb	r3, [r7, #2]
  if (pHandle->pFctDACSetChannelConfig)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d005      	beq.n	80051c8 <UI_SetDAC+0x24>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	78ba      	ldrb	r2, [r7, #2]
 80051c2:	78f9      	ldrb	r1, [r7, #3]
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4798      	blx	r3
  }
}
 80051c8:	bf00      	nop
 80051ca:	3708      	adds	r7, #8
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <UI_GetDAC>:
  *         It must be one of the exported channels (Example: DAC_CH0).
  * @retval MC_Protocol_REG_t: Variables provided in out through the inspected channel. 
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
 80051dc:	2389      	movs	r3, #137	; 0x89
 80051de:	73fb      	strb	r3, [r7, #15]
  if (pHandle->pFctDACGetChannelConfig)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d007      	beq.n	80051f8 <UI_GetDAC+0x28>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	78fa      	ldrb	r2, [r7, #3]
 80051ee:	4611      	mov	r1, r2
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	4798      	blx	r3
 80051f4:	4603      	mov	r3, r0
 80051f6:	73fb      	strb	r3, [r7, #15]
  }
  return retVal;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005204:	b480      	push	{r7}
 8005206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005208:	4b08      	ldr	r3, [pc, #32]	; (800522c <SystemInit+0x28>)
 800520a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800520e:	4a07      	ldr	r2, [pc, #28]	; (800522c <SystemInit+0x28>)
 8005210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005218:	4b04      	ldr	r3, [pc, #16]	; (800522c <SystemInit+0x28>)
 800521a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800521e:	609a      	str	r2, [r3, #8]
#endif
}
 8005220:	bf00      	nop
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
 800522a:	bf00      	nop
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005236:	2300      	movs	r3, #0
 8005238:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800523a:	2003      	movs	r0, #3
 800523c:	f001 fff0 	bl	8007220 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005240:	2004      	movs	r0, #4
 8005242:	f000 f80d 	bl	8005260 <HAL_InitTick>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	71fb      	strb	r3, [r7, #7]
 8005250:	e001      	b.n	8005256 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005252:	f7fe faab 	bl	80037ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005256:	79fb      	ldrb	r3, [r7, #7]

}
 8005258:	4618      	mov	r0, r3
 800525a:	3708      	adds	r7, #8
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b084      	sub	sp, #16
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005268:	2300      	movs	r3, #0
 800526a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800526c:	4b16      	ldr	r3, [pc, #88]	; (80052c8 <HAL_InitTick+0x68>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d022      	beq.n	80052ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005274:	4b15      	ldr	r3, [pc, #84]	; (80052cc <HAL_InitTick+0x6c>)
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	4b13      	ldr	r3, [pc, #76]	; (80052c8 <HAL_InitTick+0x68>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005280:	fbb1 f3f3 	udiv	r3, r1, r3
 8005284:	fbb2 f3f3 	udiv	r3, r2, r3
 8005288:	4618      	mov	r0, r3
 800528a:	f001 fffc 	bl	8007286 <HAL_SYSTICK_Config>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10f      	bne.n	80052b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2b0f      	cmp	r3, #15
 8005298:	d809      	bhi.n	80052ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800529a:	2200      	movs	r2, #0
 800529c:	6879      	ldr	r1, [r7, #4]
 800529e:	f04f 30ff 	mov.w	r0, #4294967295
 80052a2:	f001 ffc8 	bl	8007236 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052a6:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <HAL_InitTick+0x70>)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	e007      	b.n	80052be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	e004      	b.n	80052be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	73fb      	strb	r3, [r7, #15]
 80052b8:	e001      	b.n	80052be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3710      	adds	r7, #16
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	200005e8 	.word	0x200005e8
 80052cc:	200005e0 	.word	0x200005e0
 80052d0:	200005e4 	.word	0x200005e4

080052d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052d4:	b480      	push	{r7}
 80052d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80052d8:	4b05      	ldr	r3, [pc, #20]	; (80052f0 <HAL_IncTick+0x1c>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_IncTick+0x20>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4413      	add	r3, r2
 80052e2:	4a03      	ldr	r2, [pc, #12]	; (80052f0 <HAL_IncTick+0x1c>)
 80052e4:	6013      	str	r3, [r2, #0]
}
 80052e6:	bf00      	nop
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	20000bc0 	.word	0x20000bc0
 80052f4:	200005e8 	.word	0x200005e8

080052f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return uwTick;
 80052fc:	4b03      	ldr	r3, [pc, #12]	; (800530c <HAL_GetTick+0x14>)
 80052fe:	681b      	ldr	r3, [r3, #0]
}
 8005300:	4618      	mov	r0, r3
 8005302:	46bd      	mov	sp, r7
 8005304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	20000bc0 	.word	0x20000bc0

08005310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005318:	f7ff ffee 	bl	80052f8 <HAL_GetTick>
 800531c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005328:	d004      	beq.n	8005334 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <HAL_Delay+0x40>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4413      	add	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005334:	bf00      	nop
 8005336:	f7ff ffdf 	bl	80052f8 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	429a      	cmp	r2, r3
 8005344:	d8f7      	bhi.n	8005336 <HAL_Delay+0x26>
  {
  }
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	200005e8 	.word	0x200005e8

08005354 <LL_ADC_SetCommonClock>:
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	609a      	str	r2, [r3, #8]
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr

0800537a <LL_ADC_SetCommonPathInternalCh>:
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
 8005382:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	431a      	orrs	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	609a      	str	r2, [r3, #8]
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <LL_ADC_GetCommonPathInternalCh>:
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <LL_ADC_SetOffset>:
{
 80053bc:	b490      	push	{r4, r7}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
 80053c8:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3360      	adds	r3, #96	; 0x60
 80053ce:	461a      	mov	r2, r3
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	4413      	add	r3, r2
 80053d6:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80053d8:	6822      	ldr	r2, [r4, #0]
 80053da:	4b08      	ldr	r3, [pc, #32]	; (80053fc <LL_ADC_SetOffset+0x40>)
 80053dc:	4013      	ands	r3, r2
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	430a      	orrs	r2, r1
 80053e8:	4313      	orrs	r3, r2
 80053ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053ee:	6023      	str	r3, [r4, #0]
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bc90      	pop	{r4, r7}
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	03fff000 	.word	0x03fff000

08005400 <LL_ADC_GetOffsetChannel>:
{
 8005400:	b490      	push	{r4, r7}
 8005402:	b082      	sub	sp, #8
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	3360      	adds	r3, #96	; 0x60
 800540e:	461a      	mov	r2, r3
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800541e:	4618      	mov	r0, r3
 8005420:	3708      	adds	r7, #8
 8005422:	46bd      	mov	sp, r7
 8005424:	bc90      	pop	{r4, r7}
 8005426:	4770      	bx	lr

08005428 <LL_ADC_SetOffsetState>:
{
 8005428:	b490      	push	{r4, r7}
 800542a:	b084      	sub	sp, #16
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	3360      	adds	r3, #96	; 0x60
 8005438:	461a      	mov	r2, r3
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4313      	orrs	r3, r2
 800544c:	6023      	str	r3, [r4, #0]
}
 800544e:	bf00      	nop
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bc90      	pop	{r4, r7}
 8005456:	4770      	bx	lr

08005458 <LL_ADC_SetOffsetSign>:
{
 8005458:	b490      	push	{r4, r7}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3360      	adds	r3, #96	; 0x60
 8005468:	461a      	mov	r2, r3
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4313      	orrs	r3, r2
 800547c:	6023      	str	r3, [r4, #0]
}
 800547e:	bf00      	nop
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bc90      	pop	{r4, r7}
 8005486:	4770      	bx	lr

08005488 <LL_ADC_SetOffsetSaturation>:
{
 8005488:	b490      	push	{r4, r7}
 800548a:	b084      	sub	sp, #16
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	3360      	adds	r3, #96	; 0x60
 8005498:	461a      	mov	r2, r3
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	6023      	str	r3, [r4, #0]
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc90      	pop	{r4, r7}
 80054b6:	4770      	bx	lr

080054b8 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	615a      	str	r2, [r3, #20]
}
 80054d2:	bf00      	nop
 80054d4:	370c      	adds	r7, #12
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr

080054de <LL_ADC_REG_SetSequencerRanks>:
{
 80054de:	b490      	push	{r4, r7}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60f8      	str	r0, [r7, #12]
 80054e6:	60b9      	str	r1, [r7, #8]
 80054e8:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	3330      	adds	r3, #48	; 0x30
 80054ee:	461a      	mov	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	0a1b      	lsrs	r3, r3, #8
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	4413      	add	r3, r2
 80054fc:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80054fe:	6822      	ldr	r2, [r4, #0]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f003 031f 	and.w	r3, r3, #31
 8005506:	211f      	movs	r1, #31
 8005508:	fa01 f303 	lsl.w	r3, r1, r3
 800550c:	43db      	mvns	r3, r3
 800550e:	401a      	ands	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0e9b      	lsrs	r3, r3, #26
 8005514:	f003 011f 	and.w	r1, r3, #31
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f003 031f 	and.w	r3, r3, #31
 800551e:	fa01 f303 	lsl.w	r3, r1, r3
 8005522:	4313      	orrs	r3, r2
 8005524:	6023      	str	r3, [r4, #0]
}
 8005526:	bf00      	nop
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bc90      	pop	{r4, r7}
 800552e:	4770      	bx	lr

08005530 <LL_ADC_SetChannelSamplingTime>:
{
 8005530:	b490      	push	{r4, r7}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	3314      	adds	r3, #20
 8005540:	461a      	mov	r2, r3
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	0e5b      	lsrs	r3, r3, #25
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	4413      	add	r3, r2
 800554e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	0d1b      	lsrs	r3, r3, #20
 8005556:	f003 031f 	and.w	r3, r3, #31
 800555a:	2107      	movs	r1, #7
 800555c:	fa01 f303 	lsl.w	r3, r1, r3
 8005560:	43db      	mvns	r3, r3
 8005562:	401a      	ands	r2, r3
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	0d1b      	lsrs	r3, r3, #20
 8005568:	f003 031f 	and.w	r3, r3, #31
 800556c:	6879      	ldr	r1, [r7, #4]
 800556e:	fa01 f303 	lsl.w	r3, r1, r3
 8005572:	4313      	orrs	r3, r2
 8005574:	6023      	str	r3, [r4, #0]
}
 8005576:	bf00      	nop
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bc90      	pop	{r4, r7}
 800557e:	4770      	bx	lr

08005580 <LL_ADC_SetChannelSingleDiff>:
{
 8005580:	b480      	push	{r7}
 8005582:	b085      	sub	sp, #20
 8005584:	af00      	add	r7, sp, #0
 8005586:	60f8      	str	r0, [r7, #12]
 8005588:	60b9      	str	r1, [r7, #8]
 800558a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f003 0318 	and.w	r3, r3, #24
 80055a2:	4908      	ldr	r1, [pc, #32]	; (80055c4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80055a4:	40d9      	lsrs	r1, r3
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	400b      	ands	r3, r1
 80055aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ae:	431a      	orrs	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80055b6:	bf00      	nop
 80055b8:	3714      	adds	r7, #20
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	0007ffff 	.word	0x0007ffff

080055c8 <LL_ADC_DisableDeepPowerDown>:
{
 80055c8:	b480      	push	{r7}
 80055ca:	b083      	sub	sp, #12
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80055d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6093      	str	r3, [r2, #8]
}
 80055e0:	bf00      	nop
 80055e2:	370c      	adds	r7, #12
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <LL_ADC_IsDeepPowerDownEnabled>:
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005600:	d101      	bne.n	8005606 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005602:	2301      	movs	r3, #1
 8005604:	e000      	b.n	8005608 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	370c      	adds	r7, #12
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <LL_ADC_EnableInternalRegulator>:
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005628:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	609a      	str	r2, [r3, #8]
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <LL_ADC_IsInternalRegulatorEnabled>:
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800564c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005650:	d101      	bne.n	8005656 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <LL_ADC_IsEnabled>:
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <LL_ADC_IsEnabled+0x18>
 8005678:	2301      	movs	r3, #1
 800567a:	e000      	b.n	800567e <LL_ADC_IsEnabled+0x1a>
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <LL_ADC_REG_IsConversionOngoing>:
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	f003 0304 	and.w	r3, r3, #4
 800569a:	2b04      	cmp	r3, #4
 800569c:	d101      	bne.n	80056a2 <LL_ADC_REG_IsConversionOngoing+0x18>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <LL_ADC_INJ_IsConversionOngoing>:
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d101      	bne.n	80056c8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80056d8:	b590      	push	{r4, r7, lr}
 80056da:	b089      	sub	sp, #36	; 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80056e0:	2300      	movs	r3, #0
 80056e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e16b      	b.n	80059ca <HAL_ADC_Init+0x2f2>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d109      	bne.n	8005714 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7fe f879 	bl	80037f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f7ff ff67 	bl	80055ec <LL_ADC_IsDeepPowerDownEnabled>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d004      	beq.n	800572e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4618      	mov	r0, r3
 800572a:	f7ff ff4d 	bl	80055c8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ff82 	bl	800563c <LL_ADC_IsInternalRegulatorEnabled>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d113      	bne.n	8005766 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff ff66 	bl	8005614 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005748:	4ba2      	ldr	r3, [pc, #648]	; (80059d4 <HAL_ADC_Init+0x2fc>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	099b      	lsrs	r3, r3, #6
 800574e:	4aa2      	ldr	r2, [pc, #648]	; (80059d8 <HAL_ADC_Init+0x300>)
 8005750:	fba2 2303 	umull	r2, r3, r2, r3
 8005754:	099b      	lsrs	r3, r3, #6
 8005756:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005758:	e002      	b.n	8005760 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	3b01      	subs	r3, #1
 800575e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f9      	bne.n	800575a <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4618      	mov	r0, r3
 800576c:	f7ff ff66 	bl	800563c <LL_ADC_IsInternalRegulatorEnabled>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d10d      	bne.n	8005792 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800577a:	f043 0210 	orr.w	r2, r3, #16
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005786:	f043 0201 	orr.w	r2, r3, #1
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff ff77 	bl	800568a <LL_ADC_REG_IsConversionOngoing>
 800579c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057a2:	f003 0310 	and.w	r3, r3, #16
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 8106 	bne.w	80059b8 <HAL_ADC_Init+0x2e0>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f040 8102 	bne.w	80059b8 <HAL_ADC_Init+0x2e0>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80057bc:	f043 0202 	orr.w	r2, r3, #2
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff ff4b 	bl	8005664 <LL_ADC_IsEnabled>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d111      	bne.n	80057f8 <HAL_ADC_Init+0x120>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80057d4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80057d8:	f7ff ff44 	bl	8005664 <LL_ADC_IsEnabled>
 80057dc:	4604      	mov	r4, r0
 80057de:	487f      	ldr	r0, [pc, #508]	; (80059dc <HAL_ADC_Init+0x304>)
 80057e0:	f7ff ff40 	bl	8005664 <LL_ADC_IsEnabled>
 80057e4:	4603      	mov	r3, r0
 80057e6:	4323      	orrs	r3, r4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d105      	bne.n	80057f8 <HAL_ADC_Init+0x120>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	4619      	mov	r1, r3
 80057f2:	487b      	ldr	r0, [pc, #492]	; (80059e0 <HAL_ADC_Init+0x308>)
 80057f4:	f7ff fdae 	bl	8005354 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	7f5b      	ldrb	r3, [r3, #29]
 80057fc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005802:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005808:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800580e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005816:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005818:	4313      	orrs	r3, r2
 800581a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005822:	2b01      	cmp	r3, #1
 8005824:	d106      	bne.n	8005834 <HAL_ADC_Init+0x15c>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	3b01      	subs	r3, #1
 800582c:	045b      	lsls	r3, r3, #17
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	4313      	orrs	r3, r2
 8005832:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005838:	2b00      	cmp	r3, #0
 800583a:	d009      	beq.n	8005850 <HAL_ADC_Init+0x178>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800584a:	69ba      	ldr	r2, [r7, #24]
 800584c:	4313      	orrs	r3, r2
 800584e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68da      	ldr	r2, [r3, #12]
 8005856:	4b63      	ldr	r3, [pc, #396]	; (80059e4 <HAL_ADC_Init+0x30c>)
 8005858:	4013      	ands	r3, r2
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	6812      	ldr	r2, [r2, #0]
 800585e:	69b9      	ldr	r1, [r7, #24]
 8005860:	430b      	orrs	r3, r1
 8005862:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	430a      	orrs	r2, r1
 8005878:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4618      	mov	r0, r3
 8005880:	f7ff ff03 	bl	800568a <LL_ADC_REG_IsConversionOngoing>
 8005884:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff ff10 	bl	80056b0 <LL_ADC_INJ_IsConversionOngoing>
 8005890:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d16d      	bne.n	8005974 <HAL_ADC_Init+0x29c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d16a      	bne.n	8005974 <HAL_ADC_Init+0x29c>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80058a2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058aa:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80058ac:	4313      	orrs	r3, r2
 80058ae:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	68db      	ldr	r3, [r3, #12]
 80058b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ba:	f023 0302 	bic.w	r3, r3, #2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	69b9      	ldr	r1, [r7, #24]
 80058c4:	430b      	orrs	r3, r1
 80058c6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d017      	beq.n	8005900 <HAL_ADC_Init+0x228>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80058de:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80058ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6911      	ldr	r1, [r2, #16]
 80058f4:	687a      	ldr	r2, [r7, #4]
 80058f6:	6812      	ldr	r2, [r2, #0]
 80058f8:	430b      	orrs	r3, r1
 80058fa:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80058fe:	e013      	b.n	8005928 <HAL_ADC_Init+0x250>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800590e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	6812      	ldr	r2, [r2, #0]
 800591c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005924:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800592e:	2b01      	cmp	r3, #1
 8005930:	d118      	bne.n	8005964 <HAL_ADC_Init+0x28c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800593c:	f023 0304 	bic.w	r3, r3, #4
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005948:	4311      	orrs	r1, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800594e:	4311      	orrs	r1, r2
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005954:	430a      	orrs	r2, r1
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f042 0201 	orr.w	r2, r2, #1
 8005960:	611a      	str	r2, [r3, #16]
 8005962:	e007      	b.n	8005974 <HAL_ADC_Init+0x29c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f022 0201 	bic.w	r2, r2, #1
 8005972:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	2b01      	cmp	r3, #1
 800597a:	d10c      	bne.n	8005996 <HAL_ADC_Init+0x2be>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005982:	f023 010f 	bic.w	r1, r3, #15
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	1e5a      	subs	r2, r3, #1
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	631a      	str	r2, [r3, #48]	; 0x30
 8005994:	e007      	b.n	80059a6 <HAL_ADC_Init+0x2ce>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f022 020f 	bic.w	r2, r2, #15
 80059a4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059aa:	f023 0303 	bic.w	r3, r3, #3
 80059ae:	f043 0201 	orr.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	65da      	str	r2, [r3, #92]	; 0x5c
 80059b6:	e007      	b.n	80059c8 <HAL_ADC_Init+0x2f0>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059bc:	f043 0210 	orr.w	r2, r3, #16
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80059c4:	2301      	movs	r3, #1
 80059c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3724      	adds	r7, #36	; 0x24
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd90      	pop	{r4, r7, pc}
 80059d2:	bf00      	nop
 80059d4:	200005e0 	.word	0x200005e0
 80059d8:	053e2d63 	.word	0x053e2d63
 80059dc:	50000100 	.word	0x50000100
 80059e0:	50000300 	.word	0x50000300
 80059e4:	fff04007 	.word	0xfff04007

080059e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b0a6      	sub	sp, #152	; 0x98
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_ADC_ConfigChannel+0x22>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e348      	b.n	800609c <HAL_ADC_ConfigChannel+0x6b4>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7ff fe37 	bl	800568a <LL_ADC_REG_IsConversionOngoing>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f040 832d 	bne.w	800607e <HAL_ADC_ConfigChannel+0x696>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6818      	ldr	r0, [r3, #0]
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	6859      	ldr	r1, [r3, #4]
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	461a      	mov	r2, r3
 8005a32:	f7ff fd54 	bl	80054de <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7ff fe25 	bl	800568a <LL_ADC_REG_IsConversionOngoing>
 8005a40:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7ff fe31 	bl	80056b0 <LL_ADC_INJ_IsConversionOngoing>
 8005a4e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	f040 817b 	bne.w	8005d52 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f040 8176 	bne.w	8005d52 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a6e:	d10f      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	f7ff fd58 	bl	8005530 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7ff fd15 	bl	80054b8 <LL_ADC_SetSamplingTimeCommonConfig>
 8005a8e:	e00e      	b.n	8005aae <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6818      	ldr	r0, [r3, #0]
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	6819      	ldr	r1, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f7ff fd47 	bl	8005530 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2100      	movs	r1, #0
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff fd05 	bl	80054b8 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	695a      	ldr	r2, [r3, #20]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	08db      	lsrs	r3, r3, #3
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d022      	beq.n	8005b16 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	6919      	ldr	r1, [r3, #16]
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ae0:	f7ff fc6c 	bl	80053bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	6919      	ldr	r1, [r3, #16]
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f7ff fcb1 	bl	8005458 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6818      	ldr	r0, [r3, #0]
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	6919      	ldr	r1, [r3, #16]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	7f1b      	ldrb	r3, [r3, #28]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d102      	bne.n	8005b0c <HAL_ADC_ConfigChannel+0x124>
 8005b06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b0a:	e000      	b.n	8005b0e <HAL_ADC_ConfigChannel+0x126>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	461a      	mov	r2, r3
 8005b10:	f7ff fcba 	bl	8005488 <LL_ADC_SetOffsetSaturation>
 8005b14:	e11d      	b.n	8005d52 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f7ff fc6f 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005b22:	4603      	mov	r3, r0
 8005b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <HAL_ADC_ConfigChannel+0x15a>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2100      	movs	r1, #0
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7ff fc64 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	0e9b      	lsrs	r3, r3, #26
 8005b3c:	f003 021f 	and.w	r2, r3, #31
 8005b40:	e012      	b.n	8005b68 <HAL_ADC_ConfigChannel+0x180>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2100      	movs	r1, #0
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7ff fc59 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005b58:	fa93 f3a3 	rbit	r3, r3
 8005b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005b5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005b60:	fab3 f383 	clz	r3, r3
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d105      	bne.n	8005b80 <HAL_ADC_ConfigChannel+0x198>
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	0e9b      	lsrs	r3, r3, #26
 8005b7a:	f003 031f 	and.w	r3, r3, #31
 8005b7e:	e00a      	b.n	8005b96 <HAL_ADC_ConfigChannel+0x1ae>
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b88:	fa93 f3a3 	rbit	r3, r3
 8005b8c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8005b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b90:	fab3 f383 	clz	r3, r3
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d106      	bne.n	8005ba8 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff fc40 	bl	8005428 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2101      	movs	r1, #1
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff fc26 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d10a      	bne.n	8005bd4 <HAL_ADC_ConfigChannel+0x1ec>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2101      	movs	r1, #1
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff fc1b 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	0e9b      	lsrs	r3, r3, #26
 8005bce:	f003 021f 	and.w	r2, r3, #31
 8005bd2:	e010      	b.n	8005bf6 <HAL_ADC_ConfigChannel+0x20e>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f7ff fc10 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005be0:	4603      	mov	r3, r0
 8005be2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005be6:	fa93 f3a3 	rbit	r3, r3
 8005bea:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bee:	fab3 f383 	clz	r3, r3
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d105      	bne.n	8005c0e <HAL_ADC_ConfigChannel+0x226>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	0e9b      	lsrs	r3, r3, #26
 8005c08:	f003 031f 	and.w	r3, r3, #31
 8005c0c:	e00a      	b.n	8005c24 <HAL_ADC_ConfigChannel+0x23c>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c16:	fa93 f3a3 	rbit	r3, r3
 8005c1a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1e:	fab3 f383 	clz	r3, r3
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d106      	bne.n	8005c36 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	2101      	movs	r1, #1
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff fbf9 	bl	8005428 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	2102      	movs	r1, #2
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	f7ff fbdf 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005c42:	4603      	mov	r3, r0
 8005c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10a      	bne.n	8005c62 <HAL_ADC_ConfigChannel+0x27a>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2102      	movs	r1, #2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7ff fbd4 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005c58:	4603      	mov	r3, r0
 8005c5a:	0e9b      	lsrs	r3, r3, #26
 8005c5c:	f003 021f 	and.w	r2, r3, #31
 8005c60:	e010      	b.n	8005c84 <HAL_ADC_ConfigChannel+0x29c>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2102      	movs	r1, #2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff fbc9 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c74:	fa93 f3a3 	rbit	r3, r3
 8005c78:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8005c7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c7c:	fab3 f383 	clz	r3, r3
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	461a      	mov	r2, r3
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <HAL_ADC_ConfigChannel+0x2b4>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	0e9b      	lsrs	r3, r3, #26
 8005c96:	f003 031f 	and.w	r3, r3, #31
 8005c9a:	e00a      	b.n	8005cb2 <HAL_ADC_ConfigChannel+0x2ca>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ca2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ca4:	fa93 f3a3 	rbit	r3, r3
 8005ca8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8005caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cac:	fab3 f383 	clz	r3, r3
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d106      	bne.n	8005cc4 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2102      	movs	r1, #2
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff fbb2 	bl	8005428 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2103      	movs	r1, #3
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7ff fb98 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_ADC_ConfigChannel+0x308>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2103      	movs	r1, #3
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff fb8d 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	0e9b      	lsrs	r3, r3, #26
 8005cea:	f003 021f 	and.w	r2, r3, #31
 8005cee:	e010      	b.n	8005d12 <HAL_ADC_ConfigChannel+0x32a>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2103      	movs	r1, #3
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7ff fb82 	bl	8005400 <LL_ADC_GetOffsetChannel>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d02:	fa93 f3a3 	rbit	r3, r3
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0a:	fab3 f383 	clz	r3, r3
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d105      	bne.n	8005d2a <HAL_ADC_ConfigChannel+0x342>
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	0e9b      	lsrs	r3, r3, #26
 8005d24:	f003 031f 	and.w	r3, r3, #31
 8005d28:	e00a      	b.n	8005d40 <HAL_ADC_ConfigChannel+0x358>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d32:	fa93 f3a3 	rbit	r3, r3
 8005d36:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8005d38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3a:	fab3 f383 	clz	r3, r3
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d106      	bne.n	8005d52 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	2103      	movs	r1, #3
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fb6b 	bl	8005428 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7ff fc84 	bl	8005664 <LL_ADC_IsEnabled>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	f040 810c 	bne.w	8005f7c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	6819      	ldr	r1, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	461a      	mov	r2, r3
 8005d72:	f7ff fc05 	bl	8005580 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	4aab      	ldr	r2, [pc, #684]	; (8006028 <HAL_ADC_ConfigChannel+0x640>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	f040 80fd 	bne.w	8005f7c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10b      	bne.n	8005daa <HAL_ADC_ConfigChannel+0x3c2>
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	0e9b      	lsrs	r3, r3, #26
 8005d98:	3301      	adds	r3, #1
 8005d9a:	f003 031f 	and.w	r3, r3, #31
 8005d9e:	2b09      	cmp	r3, #9
 8005da0:	bf94      	ite	ls
 8005da2:	2301      	movls	r3, #1
 8005da4:	2300      	movhi	r3, #0
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	e012      	b.n	8005dd0 <HAL_ADC_ConfigChannel+0x3e8>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db2:	fa93 f3a3 	rbit	r3, r3
 8005db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8005db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dba:	fab3 f383 	clz	r3, r3
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	bf94      	ite	ls
 8005dca:	2301      	movls	r3, #1
 8005dcc:	2300      	movhi	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d064      	beq.n	8005e9e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d107      	bne.n	8005df0 <HAL_ADC_ConfigChannel+0x408>
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	0e9b      	lsrs	r3, r3, #26
 8005de6:	3301      	adds	r3, #1
 8005de8:	069b      	lsls	r3, r3, #26
 8005dea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005dee:	e00e      	b.n	8005e0e <HAL_ADC_ConfigChannel+0x426>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df8:	fa93 f3a3 	rbit	r3, r3
 8005dfc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e00:	fab3 f383 	clz	r3, r3
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	3301      	adds	r3, #1
 8005e08:	069b      	lsls	r3, r3, #26
 8005e0a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <HAL_ADC_ConfigChannel+0x446>
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	0e9b      	lsrs	r3, r3, #26
 8005e20:	3301      	adds	r3, #1
 8005e22:	f003 031f 	and.w	r3, r3, #31
 8005e26:	2101      	movs	r1, #1
 8005e28:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2c:	e010      	b.n	8005e50 <HAL_ADC_ConfigChannel+0x468>
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e36:	fa93 f3a3 	rbit	r3, r3
 8005e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	fab3 f383 	clz	r3, r3
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	3301      	adds	r3, #1
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005e50:	ea42 0103 	orr.w	r1, r2, r3
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d10a      	bne.n	8005e76 <HAL_ADC_ConfigChannel+0x48e>
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	0e9b      	lsrs	r3, r3, #26
 8005e66:	3301      	adds	r3, #1
 8005e68:	f003 021f 	and.w	r2, r3, #31
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	051b      	lsls	r3, r3, #20
 8005e74:	e011      	b.n	8005e9a <HAL_ADC_ConfigChannel+0x4b2>
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e7e:	fa93 f3a3 	rbit	r3, r3
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e86:	fab3 f383 	clz	r3, r3
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	f003 021f 	and.w	r2, r3, #31
 8005e92:	4613      	mov	r3, r2
 8005e94:	005b      	lsls	r3, r3, #1
 8005e96:	4413      	add	r3, r2
 8005e98:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e9a:	430b      	orrs	r3, r1
 8005e9c:	e069      	b.n	8005f72 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d107      	bne.n	8005eba <HAL_ADC_ConfigChannel+0x4d2>
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	0e9b      	lsrs	r3, r3, #26
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	069b      	lsls	r3, r3, #26
 8005eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005eb8:	e00e      	b.n	8005ed8 <HAL_ADC_ConfigChannel+0x4f0>
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	fa93 f3a3 	rbit	r3, r3
 8005ec6:	61fb      	str	r3, [r7, #28]
  return result;
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	fab3 f383 	clz	r3, r3
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	3301      	adds	r3, #1
 8005ed2:	069b      	lsls	r3, r3, #26
 8005ed4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d109      	bne.n	8005ef8 <HAL_ADC_ConfigChannel+0x510>
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	0e9b      	lsrs	r3, r3, #26
 8005eea:	3301      	adds	r3, #1
 8005eec:	f003 031f 	and.w	r3, r3, #31
 8005ef0:	2101      	movs	r1, #1
 8005ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef6:	e010      	b.n	8005f1a <HAL_ADC_ConfigChannel+0x532>
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	fa93 f3a3 	rbit	r3, r3
 8005f04:	617b      	str	r3, [r7, #20]
  return result;
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	fab3 f383 	clz	r3, r3
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	3301      	adds	r3, #1
 8005f10:	f003 031f 	and.w	r3, r3, #31
 8005f14:	2101      	movs	r1, #1
 8005f16:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1a:	ea42 0103 	orr.w	r1, r2, r3
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10d      	bne.n	8005f46 <HAL_ADC_ConfigChannel+0x55e>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	0e9b      	lsrs	r3, r3, #26
 8005f30:	3301      	adds	r3, #1
 8005f32:	f003 021f 	and.w	r2, r3, #31
 8005f36:	4613      	mov	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	3b1e      	subs	r3, #30
 8005f3e:	051b      	lsls	r3, r3, #20
 8005f40:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f44:	e014      	b.n	8005f70 <HAL_ADC_ConfigChannel+0x588>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	fa93 f3a3 	rbit	r3, r3
 8005f52:	60fb      	str	r3, [r7, #12]
  return result;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	fab3 f383 	clz	r3, r3
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	f003 021f 	and.w	r2, r3, #31
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	3b1e      	subs	r3, #30
 8005f6a:	051b      	lsls	r3, r3, #20
 8005f6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f70:	430b      	orrs	r3, r1
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	6892      	ldr	r2, [r2, #8]
 8005f76:	4619      	mov	r1, r3
 8005f78:	f7ff fada 	bl	8005530 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	4b2a      	ldr	r3, [pc, #168]	; (800602c <HAL_ADC_ConfigChannel+0x644>)
 8005f82:	4013      	ands	r3, r2
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	f000 8083 	beq.w	8006090 <HAL_ADC_ConfigChannel+0x6a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005f8a:	4829      	ldr	r0, [pc, #164]	; (8006030 <HAL_ADC_ConfigChannel+0x648>)
 8005f8c:	f7ff fa08 	bl	80053a0 <LL_ADC_GetCommonPathInternalCh>
 8005f90:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a26      	ldr	r2, [pc, #152]	; (8006034 <HAL_ADC_ConfigChannel+0x64c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d004      	beq.n	8005fa8 <HAL_ADC_ConfigChannel+0x5c0>
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a25      	ldr	r2, [pc, #148]	; (8006038 <HAL_ADC_ConfigChannel+0x650>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d126      	bne.n	8005ff6 <HAL_ADC_ConfigChannel+0x60e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005fa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d120      	bne.n	8005ff6 <HAL_ADC_ConfigChannel+0x60e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fbc:	d168      	bne.n	8006090 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005fbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fc2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	4819      	ldr	r0, [pc, #100]	; (8006030 <HAL_ADC_ConfigChannel+0x648>)
 8005fca:	f7ff f9d6 	bl	800537a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005fce:	4b1b      	ldr	r3, [pc, #108]	; (800603c <HAL_ADC_ConfigChannel+0x654>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	099b      	lsrs	r3, r3, #6
 8005fd4:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <HAL_ADC_ConfigChannel+0x658>)
 8005fd6:	fba2 2303 	umull	r2, r3, r2, r3
 8005fda:	099a      	lsrs	r2, r3, #6
 8005fdc:	4613      	mov	r3, r2
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	4413      	add	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005fe6:	e002      	b.n	8005fee <HAL_ADC_ConfigChannel+0x606>
          {
            wait_loop_index--;
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	3b01      	subs	r3, #1
 8005fec:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f9      	bne.n	8005fe8 <HAL_ADC_ConfigChannel+0x600>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005ff4:	e04c      	b.n	8006090 <HAL_ADC_ConfigChannel+0x6a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a12      	ldr	r2, [pc, #72]	; (8006044 <HAL_ADC_ConfigChannel+0x65c>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d125      	bne.n	800604c <HAL_ADC_ConfigChannel+0x664>
 8006000:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006004:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006008:	2b00      	cmp	r3, #0
 800600a:	d11f      	bne.n	800604c <HAL_ADC_ConfigChannel+0x664>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a0d      	ldr	r2, [pc, #52]	; (8006048 <HAL_ADC_ConfigChannel+0x660>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d03c      	beq.n	8006090 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800601a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800601e:	4619      	mov	r1, r3
 8006020:	4803      	ldr	r0, [pc, #12]	; (8006030 <HAL_ADC_ConfigChannel+0x648>)
 8006022:	f7ff f9aa 	bl	800537a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006026:	e033      	b.n	8006090 <HAL_ADC_ConfigChannel+0x6a8>
 8006028:	407f0000 	.word	0x407f0000
 800602c:	80080000 	.word	0x80080000
 8006030:	50000300 	.word	0x50000300
 8006034:	c3210000 	.word	0xc3210000
 8006038:	90c00010 	.word	0x90c00010
 800603c:	200005e0 	.word	0x200005e0
 8006040:	053e2d63 	.word	0x053e2d63
 8006044:	c7520000 	.word	0xc7520000
 8006048:	50000100 	.word	0x50000100
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a14      	ldr	r2, [pc, #80]	; (80060a4 <HAL_ADC_ConfigChannel+0x6bc>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d11c      	bne.n	8006090 <HAL_ADC_ConfigChannel+0x6a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006056:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800605a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d116      	bne.n	8006090 <HAL_ADC_ConfigChannel+0x6a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a10      	ldr	r2, [pc, #64]	; (80060a8 <HAL_ADC_ConfigChannel+0x6c0>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d011      	beq.n	8006090 <HAL_ADC_ConfigChannel+0x6a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800606c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006070:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006074:	4619      	mov	r1, r3
 8006076:	480d      	ldr	r0, [pc, #52]	; (80060ac <HAL_ADC_ConfigChannel+0x6c4>)
 8006078:	f7ff f97f 	bl	800537a <LL_ADC_SetCommonPathInternalCh>
 800607c:	e008      	b.n	8006090 <HAL_ADC_ConfigChannel+0x6a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006082:	f043 0220 	orr.w	r2, r3, #32
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006098:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800609c:	4618      	mov	r0, r3
 800609e:	3798      	adds	r7, #152	; 0x98
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	cb840000 	.word	0xcb840000
 80060a8:	50000100 	.word	0x50000100
 80060ac:	50000300 	.word	0x50000300

080060b0 <LL_ADC_SetCommonPathInternalCh>:
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	431a      	orrs	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	609a      	str	r2, [r3, #8]
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr

080060d6 <LL_ADC_GetCommonPathInternalCh>:
{
 80060d6:	b480      	push	{r7}
 80060d8:	b083      	sub	sp, #12
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	370c      	adds	r7, #12
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr
	...

080060f4 <LL_ADC_SetOffset>:
{
 80060f4:	b490      	push	{r4, r7}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
 8006100:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	3360      	adds	r3, #96	; 0x60
 8006106:	461a      	mov	r2, r3
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	4413      	add	r3, r2
 800610e:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006110:	6822      	ldr	r2, [r4, #0]
 8006112:	4b08      	ldr	r3, [pc, #32]	; (8006134 <LL_ADC_SetOffset+0x40>)
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	4313      	orrs	r3, r2
 8006122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006126:	6023      	str	r3, [r4, #0]
}
 8006128:	bf00      	nop
 800612a:	3710      	adds	r7, #16
 800612c:	46bd      	mov	sp, r7
 800612e:	bc90      	pop	{r4, r7}
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	03fff000 	.word	0x03fff000

08006138 <LL_ADC_GetOffsetChannel>:
{
 8006138:	b490      	push	{r4, r7}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3360      	adds	r3, #96	; 0x60
 8006146:	461a      	mov	r2, r3
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	461c      	mov	r4, r3
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006156:	4618      	mov	r0, r3
 8006158:	3708      	adds	r7, #8
 800615a:	46bd      	mov	sp, r7
 800615c:	bc90      	pop	{r4, r7}
 800615e:	4770      	bx	lr

08006160 <LL_ADC_SetOffsetState>:
{
 8006160:	b490      	push	{r4, r7}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3360      	adds	r3, #96	; 0x60
 8006170:	461a      	mov	r2, r3
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4313      	orrs	r3, r2
 8006184:	6023      	str	r3, [r4, #0]
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bc90      	pop	{r4, r7}
 800618e:	4770      	bx	lr

08006190 <LL_ADC_SetOffsetSign>:
{
 8006190:	b490      	push	{r4, r7}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3360      	adds	r3, #96	; 0x60
 80061a0:	461a      	mov	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	4413      	add	r3, r2
 80061a8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4313      	orrs	r3, r2
 80061b4:	6023      	str	r3, [r4, #0]
}
 80061b6:	bf00      	nop
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bc90      	pop	{r4, r7}
 80061be:	4770      	bx	lr

080061c0 <LL_ADC_SetOffsetSaturation>:
{
 80061c0:	b490      	push	{r4, r7}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	60f8      	str	r0, [r7, #12]
 80061c8:	60b9      	str	r1, [r7, #8]
 80061ca:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	3360      	adds	r3, #96	; 0x60
 80061d0:	461a      	mov	r2, r3
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4313      	orrs	r3, r2
 80061e4:	6023      	str	r3, [r4, #0]
}
 80061e6:	bf00      	nop
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc90      	pop	{r4, r7}
 80061ee:	4770      	bx	lr

080061f0 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	431a      	orrs	r2, r3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	615a      	str	r2, [r3, #20]
}
 800620a:	bf00      	nop
 800620c:	370c      	adds	r7, #12
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <LL_ADC_SetChannelSamplingTime>:
{
 8006216:	b490      	push	{r4, r7}
 8006218:	b084      	sub	sp, #16
 800621a:	af00      	add	r7, sp, #0
 800621c:	60f8      	str	r0, [r7, #12]
 800621e:	60b9      	str	r1, [r7, #8]
 8006220:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3314      	adds	r3, #20
 8006226:	461a      	mov	r2, r3
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	0e5b      	lsrs	r3, r3, #25
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	4413      	add	r3, r2
 8006234:	461c      	mov	r4, r3
  MODIFY_REG(*preg,
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	0d1b      	lsrs	r3, r3, #20
 800623c:	f003 031f 	and.w	r3, r3, #31
 8006240:	2107      	movs	r1, #7
 8006242:	fa01 f303 	lsl.w	r3, r1, r3
 8006246:	43db      	mvns	r3, r3
 8006248:	401a      	ands	r2, r3
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	0d1b      	lsrs	r3, r3, #20
 800624e:	f003 031f 	and.w	r3, r3, #31
 8006252:	6879      	ldr	r1, [r7, #4]
 8006254:	fa01 f303 	lsl.w	r3, r1, r3
 8006258:	4313      	orrs	r3, r2
 800625a:	6023      	str	r3, [r4, #0]
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bc90      	pop	{r4, r7}
 8006264:	4770      	bx	lr
	...

08006268 <LL_ADC_SetChannelSingleDiff>:
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006280:	43db      	mvns	r3, r3
 8006282:	401a      	ands	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f003 0318 	and.w	r3, r3, #24
 800628a:	4908      	ldr	r1, [pc, #32]	; (80062ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800628c:	40d9      	lsrs	r1, r3
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	400b      	ands	r3, r1
 8006292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006296:	431a      	orrs	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800629e:	bf00      	nop
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	0007ffff 	.word	0x0007ffff

080062b0 <LL_ADC_IsEnabled>:
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d101      	bne.n	80062c8 <LL_ADC_IsEnabled+0x18>
 80062c4:	2301      	movs	r3, #1
 80062c6:	e000      	b.n	80062ca <LL_ADC_IsEnabled+0x1a>
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0304 	and.w	r3, r3, #4
 80062e6:	2b04      	cmp	r3, #4
 80062e8:	d101      	bne.n	80062ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80062ea:	2301      	movs	r3, #1
 80062ec:	e000      	b.n	80062f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <LL_ADC_INJ_IsConversionOngoing>:
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f003 0308 	and.w	r3, r3, #8
 800630c:	2b08      	cmp	r3, #8
 800630e:	d101      	bne.n	8006314 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006310:	2301      	movs	r3, #1
 8006312:	e000      	b.n	8006316 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
	...

08006324 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b0a8      	sub	sp, #160	; 0xa0
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800632e:	2300      	movs	r3, #0
 8006330:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8006334:	2300      	movs	r3, #0
 8006336:	60fb      	str	r3, [r7, #12]

  uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006344:	2b01      	cmp	r3, #1
 8006346:	d102      	bne.n	800634e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8006348:	2302      	movs	r3, #2
 800634a:	f000 bc39 	b.w	8006bc0 <HAL_ADCEx_InjectedConfigChannel+0x89c>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006362:	2b01      	cmp	r3, #1
 8006364:	d130      	bne.n	80063c8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	2b09      	cmp	r3, #9
 800636c:	d179      	bne.n	8006462 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006372:	2b00      	cmp	r3, #0
 8006374:	d010      	beq.n	8006398 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	0e9b      	lsrs	r3, r3, #26
 800637c:	025b      	lsls	r3, r3, #9
 800637e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800638a:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006390:	4313      	orrs	r3, r2
 8006392:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006396:	e007      	b.n	80063a8 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	0e9b      	lsrs	r3, r3, #26
 800639e:	025b      	lsls	r3, r3, #9
 80063a0:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 80063a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063ae:	4ba3      	ldr	r3, [pc, #652]	; (800663c <HAL_ADCEx_InjectedConfigChannel+0x318>)
 80063b0:	4013      	ands	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6812      	ldr	r2, [r2, #0]
 80063b6:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80063ba:	430b      	orrs	r3, r1
 80063bc:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80063c4:	665a      	str	r2, [r3, #100]	; 0x64
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80063c6:	e04c      	b.n	8006462 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11d      	bne.n	800640c <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	6a1a      	ldr	r2, [r3, #32]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00d      	beq.n	8006402 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	6a1b      	ldr	r3, [r3, #32]
 80063ea:	1e5a      	subs	r2, r3, #1
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 80063f4:	431a      	orrs	r2, r3
                                           | sConfigInjected->ExternalTrigInjecConvEdge
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006400:	e004      	b.n	800640c <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                          );
      }
      else
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	3b01      	subs	r3, #1
 8006408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	0e9b      	lsrs	r3, r3, #26
 8006412:	f003 021f 	and.w	r2, r3, #31
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f003 031f 	and.w	r3, r3, #31
 800641e:	fa02 f303 	lsl.w	r3, r2, r3
 8006422:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006426:	4313      	orrs	r3, r2
 8006428:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006430:	1e5a      	subs	r2, r3, #1
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800643a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800643e:	431a      	orrs	r2, r3
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006452:	4b7a      	ldr	r3, [pc, #488]	; (800663c <HAL_ADCEx_InjectedConfigChannel+0x318>)
 8006454:	4013      	ands	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6e51      	ldr	r1, [r2, #100]	; 0x64
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	430b      	orrs	r3, r1
 8006460:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ff48 	bl	80062fc <LL_ADC_INJ_IsConversionOngoing>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d124      	bne.n	80064bc <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006478:	2b00      	cmp	r3, #0
 800647a:	d112      	bne.n	80064a2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800648c:	055a      	lsls	r2, r3, #21
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006494:	051b      	lsls	r3, r3, #20
 8006496:	431a      	orrs	r2, r3
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	60da      	str	r2, [r3, #12]
 80064a0:	e00c      	b.n	80064bc <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80064b2:	055a      	lsls	r2, r3, #21
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	430a      	orrs	r2, r1
 80064ba:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7ff ff08 	bl	80062d6 <LL_ADC_REG_IsConversionOngoing>
 80064c6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7ff ff14 	bl	80062fc <LL_ADC_INJ_IsConversionOngoing>
 80064d4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80064d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f040 81d4 	bne.w	800688a <HAL_ADCEx_InjectedConfigChannel+0x566>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80064e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	f040 81cf 	bne.w	800688a <HAL_ADCEx_InjectedConfigChannel+0x566>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d003      	beq.n	80064fc <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d116      	bne.n	800652a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006502:	2b01      	cmp	r3, #1
 8006504:	d108      	bne.n	8006518 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8006514:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006516:	e01f      	b.n	8006558 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006526:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8006528:	e016      	b.n	8006558 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006530:	2b01      	cmp	r3, #1
 8006532:	d109      	bne.n	8006548 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006538:	f043 0220 	orr.w	r2, r3, #32
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8006546:	e007      	b.n	8006558 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68da      	ldr	r2, [r3, #12]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006556:	60da      	str	r2, [r3, #12]
      }
    }

    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800655e:	2b01      	cmp	r3, #1
 8006560:	d110      	bne.n	8006584 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006574:	430b      	orrs	r3, r1
 8006576:	431a      	orrs	r2, r3
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f042 0202 	orr.w	r2, r2, #2
 8006580:	611a      	str	r2, [r3, #16]
 8006582:	e007      	b.n	8006594 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	691a      	ldr	r2, [r3, #16]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0202 	bic.w	r2, r2, #2
 8006592:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800659c:	d10f      	bne.n	80065be <HAL_ADCEx_InjectedConfigChannel+0x29a>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2200      	movs	r2, #0
 80065a8:	4619      	mov	r1, r3
 80065aa:	f7ff fe34 	bl	8006216 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7ff fe1a 	bl	80061f0 <LL_ADC_SetSamplingTimeCommonConfig>
 80065bc:	e00e      	b.n	80065dc <HAL_ADCEx_InjectedConfigChannel+0x2b8>
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSamplingTime);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6818      	ldr	r0, [r3, #0]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	6819      	ldr	r1, [r3, #0]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	461a      	mov	r2, r3
 80065cc:	f7ff fe23 	bl	8006216 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2100      	movs	r1, #0
 80065d6:	4618      	mov	r0, r3
 80065d8:	f7ff fe0a 	bl	80061f0 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	695a      	ldr	r2, [r3, #20]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	08db      	lsrs	r3, r3, #3
 80065e8:	f003 0303 	and.w	r3, r3, #3
 80065ec:	005b      	lsls	r3, r3, #1
 80065ee:	fa02 f303 	lsl.w	r3, r2, r3
 80065f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	2b04      	cmp	r3, #4
 80065fc:	d025      	beq.n	800664a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedChannel,
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6818      	ldr	r0, [r3, #0]
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	6919      	ldr	r1, [r3, #16]
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800660e:	f7ff fd71 	bl	80060f4 <LL_ADC_SetOffset>
                       tmpOffsetShifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->InjectedOffsetSign);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6818      	ldr	r0, [r3, #0]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6919      	ldr	r1, [r3, #16]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	461a      	mov	r2, r3
 8006620:	f7ff fdb6 	bl	8006190 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6818      	ldr	r0, [r3, #0]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	6919      	ldr	r1, [r3, #16]
                                 (sConfigInjected->InjectedOffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8006630:	2b01      	cmp	r3, #1
 8006632:	d105      	bne.n	8006640 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8006634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006638:	e003      	b.n	8006642 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 800663a:	bf00      	nop
 800663c:	04104000 	.word	0x04104000
 8006640:	2300      	movs	r3, #0
 8006642:	461a      	mov	r2, r3
 8006644:	f7ff fdbc 	bl	80061c0 <LL_ADC_SetOffsetSaturation>
 8006648:	e11f      	b.n	800688a <HAL_ADCEx_InjectedConfigChannel+0x566>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	2100      	movs	r1, #0
 8006650:	4618      	mov	r0, r3
 8006652:	f7ff fd71 	bl	8006138 <LL_ADC_GetOffsetChannel>
 8006656:	4603      	mov	r3, r0
 8006658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800665c:	2b00      	cmp	r3, #0
 800665e:	d10a      	bne.n	8006676 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2100      	movs	r1, #0
 8006666:	4618      	mov	r0, r3
 8006668:	f7ff fd66 	bl	8006138 <LL_ADC_GetOffsetChannel>
 800666c:	4603      	mov	r3, r0
 800666e:	0e9b      	lsrs	r3, r3, #26
 8006670:	f003 021f 	and.w	r2, r3, #31
 8006674:	e014      	b.n	80066a0 <HAL_ADCEx_InjectedConfigChannel+0x37c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f7ff fd5b 	bl	8006138 <LL_ADC_GetOffsetChannel>
 8006682:	4603      	mov	r3, r0
 8006684:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006688:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800668c:	fa93 f3a3 	rbit	r3, r3
 8006690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  return result;
 8006694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006698:	fab3 f383 	clz	r3, r3
 800669c:	b2db      	uxtb	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d105      	bne.n	80066b8 <HAL_ADCEx_InjectedConfigChannel+0x394>
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	0e9b      	lsrs	r3, r3, #26
 80066b2:	f003 031f 	and.w	r3, r3, #31
 80066b6:	e00a      	b.n	80066ce <HAL_ADCEx_InjectedConfigChannel+0x3aa>
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80066c0:	fa93 f3a3 	rbit	r3, r3
 80066c4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80066c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066c8:	fab3 f383 	clz	r3, r3
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d106      	bne.n	80066e0 <HAL_ADCEx_InjectedConfigChannel+0x3bc>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	2100      	movs	r1, #0
 80066da:	4618      	mov	r0, r3
 80066dc:	f7ff fd40 	bl	8006160 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2101      	movs	r1, #1
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7ff fd26 	bl	8006138 <LL_ADC_GetOffsetChannel>
 80066ec:	4603      	mov	r3, r0
 80066ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10a      	bne.n	800670c <HAL_ADCEx_InjectedConfigChannel+0x3e8>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2101      	movs	r1, #1
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff fd1b 	bl	8006138 <LL_ADC_GetOffsetChannel>
 8006702:	4603      	mov	r3, r0
 8006704:	0e9b      	lsrs	r3, r3, #26
 8006706:	f003 021f 	and.w	r2, r3, #31
 800670a:	e010      	b.n	800672e <HAL_ADCEx_InjectedConfigChannel+0x40a>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2101      	movs	r1, #1
 8006712:	4618      	mov	r0, r3
 8006714:	f7ff fd10 	bl	8006138 <LL_ADC_GetOffsetChannel>
 8006718:	4603      	mov	r3, r0
 800671a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800671c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800671e:	fa93 f3a3 	rbit	r3, r3
 8006722:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006724:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006726:	fab3 f383 	clz	r3, r3
 800672a:	b2db      	uxtb	r3, r3
 800672c:	461a      	mov	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006736:	2b00      	cmp	r3, #0
 8006738:	d105      	bne.n	8006746 <HAL_ADCEx_InjectedConfigChannel+0x422>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	0e9b      	lsrs	r3, r3, #26
 8006740:	f003 031f 	and.w	r3, r3, #31
 8006744:	e00a      	b.n	800675c <HAL_ADCEx_InjectedConfigChannel+0x438>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674e:	fa93 f3a3 	rbit	r3, r3
 8006752:	66bb      	str	r3, [r7, #104]	; 0x68
  return result;
 8006754:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006756:	fab3 f383 	clz	r3, r3
 800675a:	b2db      	uxtb	r3, r3
 800675c:	429a      	cmp	r2, r3
 800675e:	d106      	bne.n	800676e <HAL_ADCEx_InjectedConfigChannel+0x44a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2200      	movs	r2, #0
 8006766:	2101      	movs	r1, #1
 8006768:	4618      	mov	r0, r3
 800676a:	f7ff fcf9 	bl	8006160 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	2102      	movs	r1, #2
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff fcdf 	bl	8006138 <LL_ADC_GetOffsetChannel>
 800677a:	4603      	mov	r3, r0
 800677c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <HAL_ADCEx_InjectedConfigChannel+0x476>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2102      	movs	r1, #2
 800678a:	4618      	mov	r0, r3
 800678c:	f7ff fcd4 	bl	8006138 <LL_ADC_GetOffsetChannel>
 8006790:	4603      	mov	r3, r0
 8006792:	0e9b      	lsrs	r3, r3, #26
 8006794:	f003 021f 	and.w	r2, r3, #31
 8006798:	e010      	b.n	80067bc <HAL_ADCEx_InjectedConfigChannel+0x498>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2102      	movs	r1, #2
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fcc9 	bl	8006138 <LL_ADC_GetOffsetChannel>
 80067a6:	4603      	mov	r3, r0
 80067a8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ac:	fa93 f3a3 	rbit	r3, r3
 80067b0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80067b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067b4:	fab3 f383 	clz	r3, r3
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	461a      	mov	r2, r3
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d105      	bne.n	80067d4 <HAL_ADCEx_InjectedConfigChannel+0x4b0>
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	0e9b      	lsrs	r3, r3, #26
 80067ce:	f003 031f 	and.w	r3, r3, #31
 80067d2:	e00a      	b.n	80067ea <HAL_ADCEx_InjectedConfigChannel+0x4c6>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067dc:	fa93 f3a3 	rbit	r3, r3
 80067e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80067e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e4:	fab3 f383 	clz	r3, r3
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d106      	bne.n	80067fc <HAL_ADCEx_InjectedConfigChannel+0x4d8>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2200      	movs	r2, #0
 80067f4:	2102      	movs	r1, #2
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fcb2 	bl	8006160 <LL_ADC_SetOffsetState>
      }
      if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2103      	movs	r1, #3
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff fc98 	bl	8006138 <LL_ADC_GetOffsetChannel>
 8006808:	4603      	mov	r3, r0
 800680a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <HAL_ADCEx_InjectedConfigChannel+0x504>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2103      	movs	r1, #3
 8006818:	4618      	mov	r0, r3
 800681a:	f7ff fc8d 	bl	8006138 <LL_ADC_GetOffsetChannel>
 800681e:	4603      	mov	r3, r0
 8006820:	0e9b      	lsrs	r3, r3, #26
 8006822:	f003 021f 	and.w	r2, r3, #31
 8006826:	e010      	b.n	800684a <HAL_ADCEx_InjectedConfigChannel+0x526>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2103      	movs	r1, #3
 800682e:	4618      	mov	r0, r3
 8006830:	f7ff fc82 	bl	8006138 <LL_ADC_GetOffsetChannel>
 8006834:	4603      	mov	r3, r0
 8006836:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800683a:	fa93 f3a3 	rbit	r3, r3
 800683e:	653b      	str	r3, [r7, #80]	; 0x50
  return result;
 8006840:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006842:	fab3 f383 	clz	r3, r3
 8006846:	b2db      	uxtb	r3, r3
 8006848:	461a      	mov	r2, r3
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006852:	2b00      	cmp	r3, #0
 8006854:	d105      	bne.n	8006862 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	0e9b      	lsrs	r3, r3, #26
 800685c:	f003 031f 	and.w	r3, r3, #31
 8006860:	e00a      	b.n	8006878 <HAL_ADCEx_InjectedConfigChannel+0x554>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800686a:	fa93 f3a3 	rbit	r3, r3
 800686e:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8006870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006872:	fab3 f383 	clz	r3, r3
 8006876:	b2db      	uxtb	r3, r3
 8006878:	429a      	cmp	r2, r3
 800687a:	d106      	bne.n	800688a <HAL_ADCEx_InjectedConfigChannel+0x566>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2200      	movs	r2, #0
 8006882:	2103      	movs	r1, #3
 8006884:	4618      	mov	r0, r3
 8006886:	f7ff fc6b 	bl	8006160 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4618      	mov	r0, r3
 8006890:	f7ff fd0e 	bl	80062b0 <LL_ADC_IsEnabled>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	f040 810c 	bne.w	8006ab4 <HAL_ADCEx_InjectedConfigChannel+0x790>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6818      	ldr	r0, [r3, #0]
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	6819      	ldr	r1, [r3, #0]
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	68db      	ldr	r3, [r3, #12]
 80068a8:	461a      	mov	r2, r3
 80068aa:	f7ff fcdd 	bl	8006268 <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	4aab      	ldr	r2, [pc, #684]	; (8006b60 <HAL_ADCEx_InjectedConfigChannel+0x83c>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	f040 80fd 	bne.w	8006ab4 <HAL_ADCEx_InjectedConfigChannel+0x790>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6818      	ldr	r0, [r3, #0]
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d10b      	bne.n	80068e2 <HAL_ADCEx_InjectedConfigChannel+0x5be>
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	0e9b      	lsrs	r3, r3, #26
 80068d0:	3301      	adds	r3, #1
 80068d2:	f003 031f 	and.w	r3, r3, #31
 80068d6:	2b09      	cmp	r3, #9
 80068d8:	bf94      	ite	ls
 80068da:	2301      	movls	r3, #1
 80068dc:	2300      	movhi	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	e012      	b.n	8006908 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ea:	fa93 f3a3 	rbit	r3, r3
 80068ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80068f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f2:	fab3 f383 	clz	r3, r3
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	3301      	adds	r3, #1
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2b09      	cmp	r3, #9
 8006900:	bf94      	ite	ls
 8006902:	2301      	movls	r3, #1
 8006904:	2300      	movhi	r3, #0
 8006906:	b2db      	uxtb	r3, r3
 8006908:	2b00      	cmp	r3, #0
 800690a:	d064      	beq.n	80069d6 <HAL_ADCEx_InjectedConfigChannel+0x6b2>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006914:	2b00      	cmp	r3, #0
 8006916:	d107      	bne.n	8006928 <HAL_ADCEx_InjectedConfigChannel+0x604>
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	0e9b      	lsrs	r3, r3, #26
 800691e:	3301      	adds	r3, #1
 8006920:	069b      	lsls	r3, r3, #26
 8006922:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006926:	e00e      	b.n	8006946 <HAL_ADCEx_InjectedConfigChannel+0x622>
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800692e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006930:	fa93 f3a3 	rbit	r3, r3
 8006934:	63bb      	str	r3, [r7, #56]	; 0x38
  return result;
 8006936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006938:	fab3 f383 	clz	r3, r3
 800693c:	b2db      	uxtb	r3, r3
 800693e:	3301      	adds	r3, #1
 8006940:	069b      	lsls	r3, r3, #26
 8006942:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800694e:	2b00      	cmp	r3, #0
 8006950:	d109      	bne.n	8006966 <HAL_ADCEx_InjectedConfigChannel+0x642>
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	0e9b      	lsrs	r3, r3, #26
 8006958:	3301      	adds	r3, #1
 800695a:	f003 031f 	and.w	r3, r3, #31
 800695e:	2101      	movs	r1, #1
 8006960:	fa01 f303 	lsl.w	r3, r1, r3
 8006964:	e010      	b.n	8006988 <HAL_ADCEx_InjectedConfigChannel+0x664>
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800696c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800696e:	fa93 f3a3 	rbit	r3, r3
 8006972:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8006974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006976:	fab3 f383 	clz	r3, r3
 800697a:	b2db      	uxtb	r3, r3
 800697c:	3301      	adds	r3, #1
 800697e:	f003 031f 	and.w	r3, r3, #31
 8006982:	2101      	movs	r1, #1
 8006984:	fa01 f303 	lsl.w	r3, r1, r3
 8006988:	ea42 0103 	orr.w	r1, r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006994:	2b00      	cmp	r3, #0
 8006996:	d10a      	bne.n	80069ae <HAL_ADCEx_InjectedConfigChannel+0x68a>
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	0e9b      	lsrs	r3, r3, #26
 800699e:	3301      	adds	r3, #1
 80069a0:	f003 021f 	and.w	r2, r3, #31
 80069a4:	4613      	mov	r3, r2
 80069a6:	005b      	lsls	r3, r3, #1
 80069a8:	4413      	add	r3, r2
 80069aa:	051b      	lsls	r3, r3, #20
 80069ac:	e011      	b.n	80069d2 <HAL_ADCEx_InjectedConfigChannel+0x6ae>
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b6:	fa93 f3a3 	rbit	r3, r3
 80069ba:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80069bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069be:	fab3 f383 	clz	r3, r3
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	3301      	adds	r3, #1
 80069c6:	f003 021f 	and.w	r2, r3, #31
 80069ca:	4613      	mov	r3, r2
 80069cc:	005b      	lsls	r3, r3, #1
 80069ce:	4413      	add	r3, r2
 80069d0:	051b      	lsls	r3, r3, #20
 80069d2:	430b      	orrs	r3, r1
 80069d4:	e069      	b.n	8006aaa <HAL_ADCEx_InjectedConfigChannel+0x786>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d107      	bne.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x6ce>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	0e9b      	lsrs	r3, r3, #26
 80069e8:	3301      	adds	r3, #1
 80069ea:	069b      	lsls	r3, r3, #26
 80069ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069f0:	e00e      	b.n	8006a10 <HAL_ADCEx_InjectedConfigChannel+0x6ec>
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	fa93 f3a3 	rbit	r3, r3
 80069fe:	623b      	str	r3, [r7, #32]
  return result;
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	fab3 f383 	clz	r3, r3
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	3301      	adds	r3, #1
 8006a0a:	069b      	lsls	r3, r3, #26
 8006a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d109      	bne.n	8006a30 <HAL_ADCEx_InjectedConfigChannel+0x70c>
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	0e9b      	lsrs	r3, r3, #26
 8006a22:	3301      	adds	r3, #1
 8006a24:	f003 031f 	and.w	r3, r3, #31
 8006a28:	2101      	movs	r1, #1
 8006a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a2e:	e010      	b.n	8006a52 <HAL_ADCEx_InjectedConfigChannel+0x72e>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	fa93 f3a3 	rbit	r3, r3
 8006a3c:	61bb      	str	r3, [r7, #24]
  return result;
 8006a3e:	69bb      	ldr	r3, [r7, #24]
 8006a40:	fab3 f383 	clz	r3, r3
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	3301      	adds	r3, #1
 8006a48:	f003 031f 	and.w	r3, r3, #31
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a52:	ea42 0103 	orr.w	r1, r2, r3
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d10d      	bne.n	8006a7e <HAL_ADCEx_InjectedConfigChannel+0x75a>
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	0e9b      	lsrs	r3, r3, #26
 8006a68:	3301      	adds	r3, #1
 8006a6a:	f003 021f 	and.w	r2, r3, #31
 8006a6e:	4613      	mov	r3, r2
 8006a70:	005b      	lsls	r3, r3, #1
 8006a72:	4413      	add	r3, r2
 8006a74:	3b1e      	subs	r3, #30
 8006a76:	051b      	lsls	r3, r3, #20
 8006a78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a7c:	e014      	b.n	8006aa8 <HAL_ADCEx_InjectedConfigChannel+0x784>
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	fa93 f3a3 	rbit	r3, r3
 8006a8a:	613b      	str	r3, [r7, #16]
  return result;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	fab3 f383 	clz	r3, r3
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	3301      	adds	r3, #1
 8006a96:	f003 021f 	and.w	r2, r3, #31
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4413      	add	r3, r2
 8006aa0:	3b1e      	subs	r3, #30
 8006aa2:	051b      	lsls	r3, r3, #20
 8006aa4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006aa8:	430b      	orrs	r3, r1
 8006aaa:	683a      	ldr	r2, [r7, #0]
 8006aac:	6892      	ldr	r2, [r2, #8]
 8006aae:	4619      	mov	r1, r3
 8006ab0:	f7ff fbb1 	bl	8006216 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b2a      	ldr	r3, [pc, #168]	; (8006b64 <HAL_ADCEx_InjectedConfigChannel+0x840>)
 8006aba:	4013      	ands	r3, r2
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d079      	beq.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x890>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006ac0:	4829      	ldr	r0, [pc, #164]	; (8006b68 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8006ac2:	f7ff fb08 	bl	80060d6 <LL_ADC_GetCommonPathInternalCh>
 8006ac6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a27      	ldr	r2, [pc, #156]	; (8006b6c <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d004      	beq.n	8006ade <HAL_ADCEx_InjectedConfigChannel+0x7ba>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a25      	ldr	r2, [pc, #148]	; (8006b70 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d126      	bne.n	8006b2c <HAL_ADCEx_InjectedConfigChannel+0x808>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ade:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ae2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d120      	bne.n	8006b2c <HAL_ADCEx_InjectedConfigChannel+0x808>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006af2:	d15f      	bne.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006af4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006af8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006afc:	4619      	mov	r1, r3
 8006afe:	481a      	ldr	r0, [pc, #104]	; (8006b68 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8006b00:	f7ff fad6 	bl	80060b0 <LL_ADC_SetCommonPathInternalCh>
        /* Delay for temperature sensor stabilization time */
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006b04:	4b1b      	ldr	r3, [pc, #108]	; (8006b74 <HAL_ADCEx_InjectedConfigChannel+0x850>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	099b      	lsrs	r3, r3, #6
 8006b0a:	4a1b      	ldr	r2, [pc, #108]	; (8006b78 <HAL_ADCEx_InjectedConfigChannel+0x854>)
 8006b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006b10:	099a      	lsrs	r2, r3, #6
 8006b12:	4613      	mov	r3, r2
 8006b14:	005b      	lsls	r3, r3, #1
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8006b1c:	e002      	b.n	8006b24 <HAL_ADCEx_InjectedConfigChannel+0x800>
        {
          wait_loop_index--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	3b01      	subs	r3, #1
 8006b22:	60fb      	str	r3, [r7, #12]
        while (wait_loop_index != 0UL)
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1f9      	bne.n	8006b1e <HAL_ADCEx_InjectedConfigChannel+0x7fa>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006b2a:	e043      	b.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x890>
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a12      	ldr	r2, [pc, #72]	; (8006b7c <HAL_ADCEx_InjectedConfigChannel+0x858>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d126      	bne.n	8006b84 <HAL_ADCEx_InjectedConfigChannel+0x860>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006b36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d120      	bne.n	8006b84 <HAL_ADCEx_InjectedConfigChannel+0x860>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a0e      	ldr	r2, [pc, #56]	; (8006b80 <HAL_ADCEx_InjectedConfigChannel+0x85c>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d033      	beq.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b54:	4619      	mov	r1, r3
 8006b56:	4804      	ldr	r0, [pc, #16]	; (8006b68 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 8006b58:	f7ff faaa 	bl	80060b0 <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006b5c:	e02a      	b.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x890>
 8006b5e:	bf00      	nop
 8006b60:	407f0000 	.word	0x407f0000
 8006b64:	80080000 	.word	0x80080000
 8006b68:	50000300 	.word	0x50000300
 8006b6c:	c3210000 	.word	0xc3210000
 8006b70:	90c00010 	.word	0x90c00010
 8006b74:	200005e0 	.word	0x200005e0
 8006b78:	053e2d63 	.word	0x053e2d63
 8006b7c:	c7520000 	.word	0xc7520000
 8006b80:	50000100 	.word	0x50000100
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a0f      	ldr	r2, [pc, #60]	; (8006bc8 <HAL_ADCEx_InjectedConfigChannel+0x8a4>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d112      	bne.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x890>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006b8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d10c      	bne.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x890>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a0b      	ldr	r2, [pc, #44]	; (8006bcc <HAL_ADCEx_InjectedConfigChannel+0x8a8>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d007      	beq.n	8006bb4 <HAL_ADCEx_InjectedConfigChannel+0x890>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006ba8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006bac:	4619      	mov	r1, r3
 8006bae:	4808      	ldr	r0, [pc, #32]	; (8006bd0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>)
 8006bb0:	f7ff fa7e 	bl	80060b0 <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006bbc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	37a0      	adds	r7, #160	; 0xa0
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	cb840000 	.word	0xcb840000
 8006bcc:	50000100 	.word	0x50000100
 8006bd0:	50000300 	.word	0x50000300

08006bd4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006bd4:	b590      	push	{r4, r7, lr}
 8006bd6:	b0a1      	sub	sp, #132	; 0x84
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d101      	bne.n	8006bf2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006bee:	2302      	movs	r3, #2
 8006bf0:	e087      	b.n	8006d02 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c02:	d102      	bne.n	8006c0a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8006c04:	4b41      	ldr	r3, [pc, #260]	; (8006d0c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006c06:	60bb      	str	r3, [r7, #8]
 8006c08:	e001      	b.n	8006c0e <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d10b      	bne.n	8006c2c <HAL_ADCEx_MultiModeConfigChannel+0x58>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c18:	f043 0220 	orr.w	r2, r3, #32
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e06a      	b.n	8006d02 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff fb51 	bl	80062d6 <LL_ADC_REG_IsConversionOngoing>
 8006c34:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7ff fb4b 	bl	80062d6 <LL_ADC_REG_IsConversionOngoing>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d14c      	bne.n	8006ce0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006c46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d149      	bne.n	8006ce0 <HAL_ADCEx_MultiModeConfigChannel+0x10c>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006c4c:	4b30      	ldr	r3, [pc, #192]	; (8006d10 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8006c4e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d028      	beq.n	8006caa <HAL_ADCEx_MultiModeConfigChannel+0xd6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006c58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	6859      	ldr	r1, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c6a:	035b      	lsls	r3, r3, #13
 8006c6c:	430b      	orrs	r3, r1
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c72:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006c74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006c78:	f7ff fb1a 	bl	80062b0 <LL_ADC_IsEnabled>
 8006c7c:	4604      	mov	r4, r0
 8006c7e:	4823      	ldr	r0, [pc, #140]	; (8006d0c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006c80:	f7ff fb16 	bl	80062b0 <LL_ADC_IsEnabled>
 8006c84:	4603      	mov	r3, r0
 8006c86:	4323      	orrs	r3, r4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d133      	bne.n	8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006c94:	f023 030f 	bic.w	r3, r3, #15
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	6811      	ldr	r1, [r2, #0]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	6892      	ldr	r2, [r2, #8]
 8006ca0:	430a      	orrs	r2, r1
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ca6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ca8:	e024      	b.n	8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006caa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cac:	689b      	ldr	r3, [r3, #8]
 8006cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006cb6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006cba:	f7ff faf9 	bl	80062b0 <LL_ADC_IsEnabled>
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4812      	ldr	r0, [pc, #72]	; (8006d0c <HAL_ADCEx_MultiModeConfigChannel+0x138>)
 8006cc2:	f7ff faf5 	bl	80062b0 <LL_ADC_IsEnabled>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	4323      	orrs	r3, r4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d112      	bne.n	8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006cd6:	f023 030f 	bic.w	r3, r3, #15
 8006cda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006cdc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cde:	e009      	b.n	8006cf4 <HAL_ADCEx_MultiModeConfigChannel+0x120>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce4:	f043 0220 	orr.w	r2, r3, #32
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006cf2:	e000      	b.n	8006cf6 <HAL_ADCEx_MultiModeConfigChannel+0x122>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006cf4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006cfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3784      	adds	r7, #132	; 0x84
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd90      	pop	{r4, r7, pc}
 8006d0a:	bf00      	nop
 8006d0c:	50000100 	.word	0x50000100
 8006d10:	50000300 	.word	0x50000300

08006d14 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006d1c:	4b05      	ldr	r3, [pc, #20]	; (8006d34 <LL_EXTI_EnableIT_0_31+0x20>)
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	4904      	ldr	r1, [pc, #16]	; (8006d34 <LL_EXTI_EnableIT_0_31+0x20>)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	600b      	str	r3, [r1, #0]
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr
 8006d34:	40010400 	.word	0x40010400

08006d38 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b083      	sub	sp, #12
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006d40:	4b06      	ldr	r3, [pc, #24]	; (8006d5c <LL_EXTI_DisableIT_0_31+0x24>)
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	43db      	mvns	r3, r3
 8006d48:	4904      	ldr	r1, [pc, #16]	; (8006d5c <LL_EXTI_DisableIT_0_31+0x24>)
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	600b      	str	r3, [r1, #0]
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	40010400 	.word	0x40010400

08006d60 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006d68:	4b05      	ldr	r3, [pc, #20]	; (8006d80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	4904      	ldr	r1, [pc, #16]	; (8006d80 <LL_EXTI_EnableEvent_0_31+0x20>)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	604b      	str	r3, [r1, #4]

}
 8006d74:	bf00      	nop
 8006d76:	370c      	adds	r7, #12
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr
 8006d80:	40010400 	.word	0x40010400

08006d84 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006d8c:	4b06      	ldr	r3, [pc, #24]	; (8006da8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006d8e:	685a      	ldr	r2, [r3, #4]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	43db      	mvns	r3, r3
 8006d94:	4904      	ldr	r1, [pc, #16]	; (8006da8 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006d96:	4013      	ands	r3, r2
 8006d98:	604b      	str	r3, [r1, #4]
}
 8006d9a:	bf00      	nop
 8006d9c:	370c      	adds	r7, #12
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	40010400 	.word	0x40010400

08006dac <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b083      	sub	sp, #12
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006db4:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006db6:	689a      	ldr	r2, [r3, #8]
 8006db8:	4904      	ldr	r1, [pc, #16]	; (8006dcc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	608b      	str	r3, [r1, #8]

}
 8006dc0:	bf00      	nop
 8006dc2:	370c      	adds	r7, #12
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	40010400 	.word	0x40010400

08006dd0 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b083      	sub	sp, #12
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006dd8:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006dda:	689a      	ldr	r2, [r3, #8]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	43db      	mvns	r3, r3
 8006de0:	4904      	ldr	r1, [pc, #16]	; (8006df4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006de2:	4013      	ands	r3, r2
 8006de4:	608b      	str	r3, [r1, #8]

}
 8006de6:	bf00      	nop
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop
 8006df4:	40010400 	.word	0x40010400

08006df8 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006e00:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006e02:	68da      	ldr	r2, [r3, #12]
 8006e04:	4904      	ldr	r1, [pc, #16]	; (8006e18 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	60cb      	str	r3, [r1, #12]
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr
 8006e18:	40010400 	.word	0x40010400

08006e1c <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b083      	sub	sp, #12
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006e24:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006e26:	68da      	ldr	r2, [r3, #12]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	43db      	mvns	r3, r3
 8006e2c:	4904      	ldr	r1, [pc, #16]	; (8006e40 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	60cb      	str	r3, [r1, #12]
}
 8006e32:	bf00      	nop
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	40010400 	.word	0x40010400

08006e44 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006e4c:	4a04      	ldr	r2, [pc, #16]	; (8006e60 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6153      	str	r3, [r2, #20]
}
 8006e52:	bf00      	nop
 8006e54:	370c      	adds	r7, #12
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
 8006e5e:	bf00      	nop
 8006e60:	40010400 	.word	0x40010400

08006e64 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006e70:	2300      	movs	r3, #0
 8006e72:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d102      	bne.n	8006e80 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	77fb      	strb	r3, [r7, #31]
 8006e7e:	e0bb      	b.n	8006ff8 <HAL_COMP_Init+0x194>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e8e:	d102      	bne.n	8006e96 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	77fb      	strb	r3, [r7, #31]
 8006e94:	e0b0      	b.n	8006ff8 <HAL_COMP_Init+0x194>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	7f5b      	ldrb	r3, [r3, #29]
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d108      	bne.n	8006eb2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fc fd3b 	bl	8003928 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ebc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	4b48      	ldr	r3, [pc, #288]	; (8007004 <HAL_COMP_Init+0x1a0>)
 8006ee4:	4013      	ands	r3, r2
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	6979      	ldr	r1, [r7, #20]
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d015      	beq.n	8006f2a <HAL_COMP_Init+0xc6>
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d112      	bne.n	8006f2a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006f04:	4b40      	ldr	r3, [pc, #256]	; (8007008 <HAL_COMP_Init+0x1a4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	099b      	lsrs	r3, r3, #6
 8006f0a:	4a40      	ldr	r2, [pc, #256]	; (800700c <HAL_COMP_Init+0x1a8>)
 8006f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f10:	099a      	lsrs	r2, r3, #6
 8006f12:	4613      	mov	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	4413      	add	r3, r2
 8006f18:	009b      	lsls	r3, r3, #2
 8006f1a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006f1c:	e002      	b.n	8006f24 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3b01      	subs	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f9      	bne.n	8006f1e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a38      	ldr	r2, [pc, #224]	; (8007010 <HAL_COMP_Init+0x1ac>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d012      	beq.n	8006f5a <HAL_COMP_Init+0xf6>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a36      	ldr	r2, [pc, #216]	; (8007014 <HAL_COMP_Init+0x1b0>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00a      	beq.n	8006f54 <HAL_COMP_Init+0xf0>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a35      	ldr	r2, [pc, #212]	; (8007018 <HAL_COMP_Init+0x1b4>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d102      	bne.n	8006f4e <HAL_COMP_Init+0xea>
 8006f48:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006f4c:	e007      	b.n	8006f5e <HAL_COMP_Init+0xfa>
 8006f4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f52:	e004      	b.n	8006f5e <HAL_COMP_Init+0xfa>
 8006f54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f58:	e001      	b.n	8006f5e <HAL_COMP_Init+0xfa>
 8006f5a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f5e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d037      	beq.n	8006fdc <HAL_COMP_Init+0x178>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	f003 0310 	and.w	r3, r3, #16
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d003      	beq.n	8006f80 <HAL_COMP_Init+0x11c>
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006f78:	6938      	ldr	r0, [r7, #16]
 8006f7a:	f7ff ff17 	bl	8006dac <LL_EXTI_EnableRisingTrig_0_31>
 8006f7e:	e002      	b.n	8006f86 <HAL_COMP_Init+0x122>
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006f80:	6938      	ldr	r0, [r7, #16]
 8006f82:	f7ff ff25 	bl	8006dd0 <LL_EXTI_DisableRisingTrig_0_31>
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d003      	beq.n	8006f9a <HAL_COMP_Init+0x136>
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006f92:	6938      	ldr	r0, [r7, #16]
 8006f94:	f7ff ff30 	bl	8006df8 <LL_EXTI_EnableFallingTrig_0_31>
 8006f98:	e002      	b.n	8006fa0 <HAL_COMP_Init+0x13c>
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
        }
#else
        LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006f9a:	6938      	ldr	r0, [r7, #16]
 8006f9c:	f7ff ff3e 	bl	8006e1c <LL_EXTI_DisableFallingTrig_0_31>
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
      }
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
 8006fa0:	6938      	ldr	r0, [r7, #16]
 8006fa2:	f7ff ff4f 	bl	8006e44 <LL_EXTI_ClearFlag_0_31>
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	f003 0302 	and.w	r3, r3, #2
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d003      	beq.n	8006fba <HAL_COMP_Init+0x156>
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_EnableEvent_0_31(exti_line);
 8006fb2:	6938      	ldr	r0, [r7, #16]
 8006fb4:	f7ff fed4 	bl	8006d60 <LL_EXTI_EnableEvent_0_31>
 8006fb8:	e002      	b.n	8006fc0 <HAL_COMP_Init+0x15c>
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
        }
#else
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006fba:	6938      	ldr	r0, [r7, #16]
 8006fbc:	f7ff fee2 	bl	8006d84 <LL_EXTI_DisableEvent_0_31>
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	f003 0301 	and.w	r3, r3, #1
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d003      	beq.n	8006fd4 <HAL_COMP_Init+0x170>
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
        }
#else
        LL_EXTI_EnableIT_0_31(exti_line);
 8006fcc:	6938      	ldr	r0, [r7, #16]
 8006fce:	f7ff fea1 	bl	8006d14 <LL_EXTI_EnableIT_0_31>
 8006fd2:	e009      	b.n	8006fe8 <HAL_COMP_Init+0x184>
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
        }
#else
        LL_EXTI_DisableIT_0_31(exti_line);
 8006fd4:	6938      	ldr	r0, [r7, #16]
 8006fd6:	f7ff feaf 	bl	8006d38 <LL_EXTI_DisableIT_0_31>
 8006fda:	e005      	b.n	8006fe8 <HAL_COMP_Init+0x184>
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
      }
#else
      LL_EXTI_DisableEvent_0_31(exti_line);
 8006fdc:	6938      	ldr	r0, [r7, #16]
 8006fde:	f7ff fed1 	bl	8006d84 <LL_EXTI_DisableEvent_0_31>
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
      }
#else
      LL_EXTI_DisableIT_0_31(exti_line);
 8006fe2:	6938      	ldr	r0, [r7, #16]
 8006fe4:	f7ff fea8 	bl	8006d38 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	7f5b      	ldrb	r3, [r3, #29]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d102      	bne.n	8006ff8 <HAL_COMP_Init+0x194>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2201      	movs	r2, #1
 8006ff6:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006ff8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3720      	adds	r7, #32
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	ff007e0f 	.word	0xff007e0f
 8007008:	200005e0 	.word	0x200005e0
 800700c:	053e2d63 	.word	0x053e2d63
 8007010:	40010200 	.word	0x40010200
 8007014:	40010204 	.word	0x40010204
 8007018:	40010208 	.word	0x40010208

0800701c <HAL_CORDIC_Init>:
  * @brief  Initialize the CORDIC peripheral and the associated handle.
  * @param  hcordic pointer to a CORDIC_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_CORDIC_Init+0x12>
  {
    /* Return error status */
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e023      	b.n	8007076 <HAL_CORDIC_Init+0x5a>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_CORDIC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hcordic->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize the low level hardware */
    HAL_CORDIC_MspInit(hcordic);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fc fce6 	bl	8003a14 <HAL_CORDIC_MspInit>
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset pInBuff and pOutBuff */
  hcordic->pInBuff = NULL;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	605a      	str	r2, [r3, #4]
  hcordic->pOutBuff = NULL;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	609a      	str	r2, [r3, #8]

  /* Reset NbCalcToOrder and NbCalcToGet */
  hcordic->NbCalcToOrder = 0U;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2200      	movs	r2, #0
 800705e:	60da      	str	r2, [r3, #12]
  hcordic->NbCalcToGet = 0U;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	611a      	str	r2, [r3, #16]

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2200      	movs	r2, #0
 800706a:	615a      	str	r2, [r3, #20]

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2201      	movs	r2, #1
 8007070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007090:	4b0c      	ldr	r3, [pc, #48]	; (80070c4 <__NVIC_SetPriorityGrouping+0x44>)
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800709c:	4013      	ands	r3, r2
 800709e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80070a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80070ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80070b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80070b2:	4a04      	ldr	r2, [pc, #16]	; (80070c4 <__NVIC_SetPriorityGrouping+0x44>)
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	60d3      	str	r3, [r2, #12]
}
 80070b8:	bf00      	nop
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	e000ed00 	.word	0xe000ed00

080070c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80070c8:	b480      	push	{r7}
 80070ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <__NVIC_GetPriorityGrouping+0x18>)
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	0a1b      	lsrs	r3, r3, #8
 80070d2:	f003 0307 	and.w	r3, r3, #7
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	e000ed00 	.word	0xe000ed00

080070e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	4603      	mov	r3, r0
 80070ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	db0b      	blt.n	800710e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80070f6:	79fb      	ldrb	r3, [r7, #7]
 80070f8:	f003 021f 	and.w	r2, r3, #31
 80070fc:	4907      	ldr	r1, [pc, #28]	; (800711c <__NVIC_EnableIRQ+0x38>)
 80070fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	2001      	movs	r0, #1
 8007106:	fa00 f202 	lsl.w	r2, r0, r2
 800710a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800710e:	bf00      	nop
 8007110:	370c      	adds	r7, #12
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	e000e100 	.word	0xe000e100

08007120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007120:	b480      	push	{r7}
 8007122:	b083      	sub	sp, #12
 8007124:	af00      	add	r7, sp, #0
 8007126:	4603      	mov	r3, r0
 8007128:	6039      	str	r1, [r7, #0]
 800712a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800712c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007130:	2b00      	cmp	r3, #0
 8007132:	db0a      	blt.n	800714a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	b2da      	uxtb	r2, r3
 8007138:	490c      	ldr	r1, [pc, #48]	; (800716c <__NVIC_SetPriority+0x4c>)
 800713a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800713e:	0112      	lsls	r2, r2, #4
 8007140:	b2d2      	uxtb	r2, r2
 8007142:	440b      	add	r3, r1
 8007144:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007148:	e00a      	b.n	8007160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	b2da      	uxtb	r2, r3
 800714e:	4908      	ldr	r1, [pc, #32]	; (8007170 <__NVIC_SetPriority+0x50>)
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	f003 030f 	and.w	r3, r3, #15
 8007156:	3b04      	subs	r3, #4
 8007158:	0112      	lsls	r2, r2, #4
 800715a:	b2d2      	uxtb	r2, r2
 800715c:	440b      	add	r3, r1
 800715e:	761a      	strb	r2, [r3, #24]
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	e000e100 	.word	0xe000e100
 8007170:	e000ed00 	.word	0xe000ed00

08007174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007174:	b480      	push	{r7}
 8007176:	b089      	sub	sp, #36	; 0x24
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f003 0307 	and.w	r3, r3, #7
 8007186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	f1c3 0307 	rsb	r3, r3, #7
 800718e:	2b04      	cmp	r3, #4
 8007190:	bf28      	it	cs
 8007192:	2304      	movcs	r3, #4
 8007194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	3304      	adds	r3, #4
 800719a:	2b06      	cmp	r3, #6
 800719c:	d902      	bls.n	80071a4 <NVIC_EncodePriority+0x30>
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	3b03      	subs	r3, #3
 80071a2:	e000      	b.n	80071a6 <NVIC_EncodePriority+0x32>
 80071a4:	2300      	movs	r3, #0
 80071a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	fa02 f303 	lsl.w	r3, r2, r3
 80071b2:	43da      	mvns	r2, r3
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	401a      	ands	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80071bc:	f04f 31ff 	mov.w	r1, #4294967295
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	fa01 f303 	lsl.w	r3, r1, r3
 80071c6:	43d9      	mvns	r1, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80071cc:	4313      	orrs	r3, r2
         );
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3724      	adds	r7, #36	; 0x24
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
	...

080071dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3b01      	subs	r3, #1
 80071e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80071ec:	d301      	bcc.n	80071f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80071ee:	2301      	movs	r3, #1
 80071f0:	e00f      	b.n	8007212 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80071f2:	4a0a      	ldr	r2, [pc, #40]	; (800721c <SysTick_Config+0x40>)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80071fa:	210f      	movs	r1, #15
 80071fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007200:	f7ff ff8e 	bl	8007120 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007204:	4b05      	ldr	r3, [pc, #20]	; (800721c <SysTick_Config+0x40>)
 8007206:	2200      	movs	r2, #0
 8007208:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800720a:	4b04      	ldr	r3, [pc, #16]	; (800721c <SysTick_Config+0x40>)
 800720c:	2207      	movs	r2, #7
 800720e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	e000e010 	.word	0xe000e010

08007220 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f7ff ff29 	bl	8007080 <__NVIC_SetPriorityGrouping>
}
 800722e:	bf00      	nop
 8007230:	3708      	adds	r7, #8
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}

08007236 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007236:	b580      	push	{r7, lr}
 8007238:	b086      	sub	sp, #24
 800723a:	af00      	add	r7, sp, #0
 800723c:	4603      	mov	r3, r0
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007244:	f7ff ff40 	bl	80070c8 <__NVIC_GetPriorityGrouping>
 8007248:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	68b9      	ldr	r1, [r7, #8]
 800724e:	6978      	ldr	r0, [r7, #20]
 8007250:	f7ff ff90 	bl	8007174 <NVIC_EncodePriority>
 8007254:	4602      	mov	r2, r0
 8007256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800725a:	4611      	mov	r1, r2
 800725c:	4618      	mov	r0, r3
 800725e:	f7ff ff5f 	bl	8007120 <__NVIC_SetPriority>
}
 8007262:	bf00      	nop
 8007264:	3718      	adds	r7, #24
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b082      	sub	sp, #8
 800726e:	af00      	add	r7, sp, #0
 8007270:	4603      	mov	r3, r0
 8007272:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007278:	4618      	mov	r0, r3
 800727a:	f7ff ff33 	bl	80070e4 <__NVIC_EnableIRQ>
}
 800727e:	bf00      	nop
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b082      	sub	sp, #8
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f7ff ffa4 	bl	80071dc <SysTick_Config>
 8007294:	4603      	mov	r3, r0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3708      	adds	r7, #8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80072a2:	f000 f802 	bl	80072aa <HAL_SYSTICK_Callback>
}
 80072a6:	bf00      	nop
 80072a8:	bd80      	pop	{r7, pc}

080072aa <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80072aa:	b480      	push	{r7}
 80072ac:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 80072ae:	bf00      	nop
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e014      	b.n	80072f4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	791b      	ldrb	r3, [r3, #4]
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d105      	bne.n	80072e0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f7fc fbba 	bl	8003a54 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3708      	adds	r7, #8
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08a      	sub	sp, #40	; 0x28
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8007308:	2300      	movs	r3, #0
 800730a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	795b      	ldrb	r3, [r3, #5]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d101      	bne.n	8007318 <HAL_DAC_ConfigChannel+0x1c>
 8007314:	2302      	movs	r3, #2
 8007316:	e194      	b.n	8007642 <HAL_DAC_ConfigChannel+0x346>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2201      	movs	r2, #1
 800731c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2202      	movs	r2, #2
 8007322:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	2b04      	cmp	r3, #4
 800732a:	d174      	bne.n	8007416 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d137      	bne.n	80073a2 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8007332:	f7fd ffe1 	bl	80052f8 <HAL_GetTick>
 8007336:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007338:	e011      	b.n	800735e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800733a:	f7fd ffdd 	bl	80052f8 <HAL_GetTick>
 800733e:	4602      	mov	r2, r0
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	2b01      	cmp	r3, #1
 8007346:	d90a      	bls.n	800735e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f043 0208 	orr.w	r2, r3, #8
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2203      	movs	r2, #3
 8007358:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e171      	b.n	8007642 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007364:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1e6      	bne.n	800733a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800736c:	2001      	movs	r0, #1
 800736e:	f7fd ffcf 	bl	8005310 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800737a:	641a      	str	r2, [r3, #64]	; 0x40
 800737c:	e01e      	b.n	80073bc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800737e:	f7fd ffbb 	bl	80052f8 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b01      	cmp	r3, #1
 800738a:	d90a      	bls.n	80073a2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	f043 0208 	orr.w	r2, r3, #8
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2203      	movs	r2, #3
 800739c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800739e:	2303      	movs	r3, #3
 80073a0:	e14f      	b.n	8007642 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	dbe8      	blt.n	800737e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80073ac:	2001      	movs	r0, #1
 80073ae:	f7fd ffaf 	bl	8005310 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80073ba:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f003 0310 	and.w	r3, r3, #16
 80073c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80073cc:	fa01 f303 	lsl.w	r3, r1, r3
 80073d0:	43db      	mvns	r3, r3
 80073d2:	ea02 0103 	and.w	r1, r2, r3
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f003 0310 	and.w	r3, r3, #16
 80073e0:	409a      	lsls	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f003 0310 	and.w	r3, r3, #16
 80073f6:	21ff      	movs	r1, #255	; 0xff
 80073f8:	fa01 f303 	lsl.w	r3, r1, r3
 80073fc:	43db      	mvns	r3, r3
 80073fe:	ea02 0103 	and.w	r1, r2, r3
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	409a      	lsls	r2, r3
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	430a      	orrs	r2, r1
 8007414:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	69db      	ldr	r3, [r3, #28]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d11d      	bne.n	800745a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007424:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f003 0310 	and.w	r3, r3, #16
 800742c:	221f      	movs	r2, #31
 800742e:	fa02 f303 	lsl.w	r3, r2, r3
 8007432:	43db      	mvns	r3, r3
 8007434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007436:	4013      	ands	r3, r2
 8007438:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	fa02 f303 	lsl.w	r3, r2, r3
 800744c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800744e:	4313      	orrs	r3, r2
 8007450:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007458:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007460:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2207      	movs	r2, #7
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007472:	4013      	ands	r3, r2
 8007474:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	2b00      	cmp	r3, #0
 8007480:	d002      	beq.n	8007488 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 8007482:	2300      	movs	r3, #0
 8007484:	623b      	str	r3, [r7, #32]
 8007486:	e011      	b.n	80074ac <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	699b      	ldr	r3, [r3, #24]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007494:	2301      	movs	r3, #1
 8007496:	623b      	str	r3, [r7, #32]
 8007498:	e008      	b.n	80074ac <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	695b      	ldr	r3, [r3, #20]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d102      	bne.n	80074a8 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80074a2:	2301      	movs	r3, #1
 80074a4:	623b      	str	r3, [r7, #32]
 80074a6:	e001      	b.n	80074ac <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80074a8:	2300      	movs	r3, #0
 80074aa:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f003 0310 	and.w	r3, r3, #16
 80074c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074c6:	fa02 f303 	lsl.w	r3, r2, r3
 80074ca:	43db      	mvns	r3, r3
 80074cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ce:	4013      	ands	r3, r2
 80074d0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	791b      	ldrb	r3, [r3, #4]
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d102      	bne.n	80074e0 <HAL_DAC_ConfigChannel+0x1e4>
 80074da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074de:	e000      	b.n	80074e2 <HAL_DAC_ConfigChannel+0x1e6>
 80074e0:	2300      	movs	r3, #0
 80074e2:	69ba      	ldr	r2, [r7, #24]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f003 0310 	and.w	r3, r3, #16
 80074ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074f2:	fa02 f303 	lsl.w	r3, r2, r3
 80074f6:	43db      	mvns	r3, r3
 80074f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074fa:	4013      	ands	r3, r2
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	795b      	ldrb	r3, [r3, #5]
 8007502:	2b01      	cmp	r3, #1
 8007504:	d102      	bne.n	800750c <HAL_DAC_ConfigChannel+0x210>
 8007506:	f44f 7300 	mov.w	r3, #512	; 0x200
 800750a:	e000      	b.n	800750e <HAL_DAC_ConfigChannel+0x212>
 800750c:	2300      	movs	r3, #0
 800750e:	69ba      	ldr	r2, [r7, #24]
 8007510:	4313      	orrs	r3, r2
 8007512:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800751a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d114      	bne.n	800754e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007524:	f001 f9f2 	bl	800890c <HAL_RCC_GetHCLKFreq>
 8007528:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	4a47      	ldr	r2, [pc, #284]	; (800764c <HAL_DAC_ConfigChannel+0x350>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d904      	bls.n	800753c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
 800753a:	e00d      	b.n	8007558 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	4a44      	ldr	r2, [pc, #272]	; (8007650 <HAL_DAC_ConfigChannel+0x354>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d909      	bls.n	8007558 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
 800754c:	e004      	b.n	8007558 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007554:	4313      	orrs	r3, r2
 8007556:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f003 0310 	and.w	r3, r3, #16
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	fa02 f303 	lsl.w	r3, r2, r3
 8007564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007566:	4313      	orrs	r3, r2
 8007568:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007570:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6819      	ldr	r1, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f003 0310 	and.w	r3, r3, #16
 800757e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007582:	fa02 f303 	lsl.w	r3, r2, r3
 8007586:	43da      	mvns	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	400a      	ands	r2, r1
 800758e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f003 0310 	and.w	r3, r3, #16
 800759e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	43db      	mvns	r3, r3
 80075a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075aa:	4013      	ands	r3, r2
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	68db      	ldr	r3, [r3, #12]
 80075b2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f003 0310 	and.w	r3, r3, #16
 80075ba:	69ba      	ldr	r2, [r7, #24]
 80075bc:	fa02 f303 	lsl.w	r3, r2, r3
 80075c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c2:	4313      	orrs	r3, r2
 80075c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075cc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6819      	ldr	r1, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f003 0310 	and.w	r3, r3, #16
 80075da:	22c0      	movs	r2, #192	; 0xc0
 80075dc:	fa02 f303 	lsl.w	r3, r2, r3
 80075e0:	43da      	mvns	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	400a      	ands	r2, r1
 80075e8:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	089b      	lsrs	r3, r3, #2
 80075f0:	f003 030f 	and.w	r3, r3, #15
 80075f4:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	089b      	lsrs	r3, r3, #2
 80075fc:	021b      	lsls	r3, r3, #8
 80075fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007602:	69ba      	ldr	r2, [r7, #24]
 8007604:	4313      	orrs	r3, r2
 8007606:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	f640 710f 	movw	r1, #3855	; 0xf0f
 8007618:	fa01 f303 	lsl.w	r3, r1, r3
 800761c:	43db      	mvns	r3, r3
 800761e:	ea02 0103 	and.w	r1, r2, r3
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	f003 0310 	and.w	r3, r3, #16
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	409a      	lsls	r2, r3
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	430a      	orrs	r2, r1
 8007632:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	2201      	movs	r2, #1
 8007638:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3728      	adds	r7, #40	; 0x28
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	09896800 	.word	0x09896800
 8007650:	04c4b400 	.word	0x04c4b400

08007654 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e147      	b.n	80078f6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800766c:	b2db      	uxtb	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d106      	bne.n	8007680 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fc fa28 	bl	8003ad0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699a      	ldr	r2, [r3, #24]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0210 	bic.w	r2, r2, #16
 800768e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007690:	f7fd fe32 	bl	80052f8 <HAL_GetTick>
 8007694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007696:	e012      	b.n	80076be <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007698:	f7fd fe2e 	bl	80052f8 <HAL_GetTick>
 800769c:	4602      	mov	r2, r0
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	2b0a      	cmp	r3, #10
 80076a4:	d90b      	bls.n	80076be <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076aa:	f043 0201 	orr.w	r2, r3, #1
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2203      	movs	r2, #3
 80076b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e11b      	b.n	80078f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	699b      	ldr	r3, [r3, #24]
 80076c4:	f003 0308 	and.w	r3, r3, #8
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d0e5      	beq.n	8007698 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	699a      	ldr	r2, [r3, #24]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f042 0201 	orr.w	r2, r2, #1
 80076da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80076dc:	f7fd fe0c 	bl	80052f8 <HAL_GetTick>
 80076e0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80076e2:	e012      	b.n	800770a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80076e4:	f7fd fe08 	bl	80052f8 <HAL_GetTick>
 80076e8:	4602      	mov	r2, r0
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	2b0a      	cmp	r3, #10
 80076f0:	d90b      	bls.n	800770a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076f6:	f043 0201 	orr.w	r2, r3, #1
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2203      	movs	r2, #3
 8007702:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e0f5      	b.n	80078f6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	699b      	ldr	r3, [r3, #24]
 8007710:	f003 0301 	and.w	r3, r3, #1
 8007714:	2b00      	cmp	r3, #0
 8007716:	d0e5      	beq.n	80076e4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0202 	orr.w	r2, r2, #2
 8007726:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a74      	ldr	r2, [pc, #464]	; (8007900 <HAL_FDCAN_Init+0x2ac>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d103      	bne.n	800773a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007732:	4a74      	ldr	r2, [pc, #464]	; (8007904 <HAL_FDCAN_Init+0x2b0>)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	7c1b      	ldrb	r3, [r3, #16]
 800773e:	2b01      	cmp	r3, #1
 8007740:	d108      	bne.n	8007754 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699a      	ldr	r2, [r3, #24]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007750:	619a      	str	r2, [r3, #24]
 8007752:	e007      	b.n	8007764 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699a      	ldr	r2, [r3, #24]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007762:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	7c5b      	ldrb	r3, [r3, #17]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d108      	bne.n	800777e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699a      	ldr	r2, [r3, #24]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800777a:	619a      	str	r2, [r3, #24]
 800777c:	e007      	b.n	800778e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800778c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	7c9b      	ldrb	r3, [r3, #18]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d108      	bne.n	80077a8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	699a      	ldr	r2, [r3, #24]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80077a4:	619a      	str	r2, [r3, #24]
 80077a6:	e007      	b.n	80077b8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80077b6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	430a      	orrs	r2, r1
 80077cc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	699a      	ldr	r2, [r3, #24]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80077dc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 0210 	bic.w	r2, r2, #16
 80077ec:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	68db      	ldr	r3, [r3, #12]
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d108      	bne.n	8007808 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f042 0204 	orr.w	r2, r2, #4
 8007804:	619a      	str	r2, [r3, #24]
 8007806:	e02c      	b.n	8007862 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d028      	beq.n	8007862 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	68db      	ldr	r3, [r3, #12]
 8007814:	2b02      	cmp	r3, #2
 8007816:	d01c      	beq.n	8007852 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007826:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	691a      	ldr	r2, [r3, #16]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f042 0210 	orr.w	r2, r2, #16
 8007836:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	2b03      	cmp	r3, #3
 800783e:	d110      	bne.n	8007862 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699a      	ldr	r2, [r3, #24]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f042 0220 	orr.w	r2, r2, #32
 800784e:	619a      	str	r2, [r3, #24]
 8007850:	e007      	b.n	8007862 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	699a      	ldr	r2, [r3, #24]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f042 0220 	orr.w	r2, r2, #32
 8007860:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	699b      	ldr	r3, [r3, #24]
 8007866:	3b01      	subs	r3, #1
 8007868:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69db      	ldr	r3, [r3, #28]
 800786e:	3b01      	subs	r3, #1
 8007870:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007872:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	6a1b      	ldr	r3, [r3, #32]
 8007878:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800787a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	695b      	ldr	r3, [r3, #20]
 8007882:	3b01      	subs	r3, #1
 8007884:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800788a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800788c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007896:	d115      	bne.n	80078c4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078a2:	3b01      	subs	r3, #1
 80078a4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078a6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ac:	3b01      	subs	r3, #1
 80078ae:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80078b0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b8:	3b01      	subs	r3, #1
 80078ba:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80078c0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80078c2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	430a      	orrs	r2, r1
 80078d6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 f814 	bl	8007908 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80078f4:	2300      	movs	r3, #0
}
 80078f6:	4618      	mov	r0, r3
 80078f8:	3710      	adds	r7, #16
 80078fa:	46bd      	mov	sp, r7
 80078fc:	bd80      	pop	{r7, pc}
 80078fe:	bf00      	nop
 8007900:	40006400 	.word	0x40006400
 8007904:	40006500 	.word	0x40006500

08007908 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007910:	4b27      	ldr	r3, [pc, #156]	; (80079b0 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007912:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	68ba      	ldr	r2, [r7, #8]
 8007918:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007922:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792a:	041a      	lsls	r2, r3, #16
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	430a      	orrs	r2, r1
 8007932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007948:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007950:	061a      	lsls	r2, r3, #24
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	430a      	orrs	r2, r1
 8007958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	60fb      	str	r3, [r7, #12]
 8007988:	e005      	b.n	8007996 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	3304      	adds	r3, #4
 8007994:	60fb      	str	r3, [r7, #12]
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d3f3      	bcc.n	800798a <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80079a2:	bf00      	nop
 80079a4:	3714      	adds	r7, #20
 80079a6:	46bd      	mov	sp, r7
 80079a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ac:	4770      	bx	lr
 80079ae:	bf00      	nop
 80079b0:	4000a400 	.word	0x4000a400

080079b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80079be:	2300      	movs	r3, #0
 80079c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80079c2:	e15a      	b.n	8007c7a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	2101      	movs	r1, #1
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	fa01 f303 	lsl.w	r3, r1, r3
 80079d0:	4013      	ands	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 814c 	beq.w	8007c74 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	2b02      	cmp	r3, #2
 80079e2:	d003      	beq.n	80079ec <HAL_GPIO_Init+0x38>
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	2b12      	cmp	r3, #18
 80079ea:	d123      	bne.n	8007a34 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	08da      	lsrs	r2, r3, #3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	3208      	adds	r2, #8
 80079f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80079fa:	697b      	ldr	r3, [r7, #20]
 80079fc:	f003 0307 	and.w	r3, r3, #7
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	220f      	movs	r2, #15
 8007a04:	fa02 f303 	lsl.w	r3, r2, r3
 8007a08:	43db      	mvns	r3, r3
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	f003 0307 	and.w	r3, r3, #7
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	08da      	lsrs	r2, r3, #3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	3208      	adds	r2, #8
 8007a2e:	6939      	ldr	r1, [r7, #16]
 8007a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	005b      	lsls	r3, r3, #1
 8007a3e:	2203      	movs	r2, #3
 8007a40:	fa02 f303 	lsl.w	r3, r2, r3
 8007a44:	43db      	mvns	r3, r3
 8007a46:	693a      	ldr	r2, [r7, #16]
 8007a48:	4013      	ands	r3, r2
 8007a4a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	f003 0203 	and.w	r2, r3, #3
 8007a54:	697b      	ldr	r3, [r7, #20]
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	693a      	ldr	r2, [r7, #16]
 8007a66:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d00b      	beq.n	8007a88 <HAL_GPIO_Init+0xd4>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d007      	beq.n	8007a88 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007a7c:	2b11      	cmp	r3, #17
 8007a7e:	d003      	beq.n	8007a88 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	2b12      	cmp	r3, #18
 8007a86:	d130      	bne.n	8007aea <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	2203      	movs	r2, #3
 8007a94:	fa02 f303 	lsl.w	r3, r2, r3
 8007a98:	43db      	mvns	r3, r3
 8007a9a:	693a      	ldr	r2, [r7, #16]
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	68da      	ldr	r2, [r3, #12]
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	005b      	lsls	r3, r3, #1
 8007aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	693a      	ldr	r2, [r7, #16]
 8007ab6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007abe:	2201      	movs	r2, #1
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ac6:	43db      	mvns	r3, r3
 8007ac8:	693a      	ldr	r2, [r7, #16]
 8007aca:	4013      	ands	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	091b      	lsrs	r3, r3, #4
 8007ad4:	f003 0201 	and.w	r2, r3, #1
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	fa02 f303 	lsl.w	r3, r2, r3
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	4313      	orrs	r3, r2
 8007ae2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	693a      	ldr	r2, [r7, #16]
 8007ae8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	005b      	lsls	r3, r3, #1
 8007af4:	2203      	movs	r2, #3
 8007af6:	fa02 f303 	lsl.w	r3, r2, r3
 8007afa:	43db      	mvns	r3, r3
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4013      	ands	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	689a      	ldr	r2, [r3, #8]
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b0e:	693a      	ldr	r2, [r7, #16]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	685b      	ldr	r3, [r3, #4]
 8007b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 80a6 	beq.w	8007c74 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b28:	4b5b      	ldr	r3, [pc, #364]	; (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b2c:	4a5a      	ldr	r2, [pc, #360]	; (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b2e:	f043 0301 	orr.w	r3, r3, #1
 8007b32:	6613      	str	r3, [r2, #96]	; 0x60
 8007b34:	4b58      	ldr	r3, [pc, #352]	; (8007c98 <HAL_GPIO_Init+0x2e4>)
 8007b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b38:	f003 0301 	and.w	r3, r3, #1
 8007b3c:	60bb      	str	r3, [r7, #8]
 8007b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b40:	4a56      	ldr	r2, [pc, #344]	; (8007c9c <HAL_GPIO_Init+0x2e8>)
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	089b      	lsrs	r3, r3, #2
 8007b46:	3302      	adds	r3, #2
 8007b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f003 0303 	and.w	r3, r3, #3
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	220f      	movs	r2, #15
 8007b58:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5c:	43db      	mvns	r3, r3
 8007b5e:	693a      	ldr	r2, [r7, #16]
 8007b60:	4013      	ands	r3, r2
 8007b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007b6a:	d01f      	beq.n	8007bac <HAL_GPIO_Init+0x1f8>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4a4c      	ldr	r2, [pc, #304]	; (8007ca0 <HAL_GPIO_Init+0x2ec>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d019      	beq.n	8007ba8 <HAL_GPIO_Init+0x1f4>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	4a4b      	ldr	r2, [pc, #300]	; (8007ca4 <HAL_GPIO_Init+0x2f0>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d013      	beq.n	8007ba4 <HAL_GPIO_Init+0x1f0>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	4a4a      	ldr	r2, [pc, #296]	; (8007ca8 <HAL_GPIO_Init+0x2f4>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d00d      	beq.n	8007ba0 <HAL_GPIO_Init+0x1ec>
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a49      	ldr	r2, [pc, #292]	; (8007cac <HAL_GPIO_Init+0x2f8>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d007      	beq.n	8007b9c <HAL_GPIO_Init+0x1e8>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4a48      	ldr	r2, [pc, #288]	; (8007cb0 <HAL_GPIO_Init+0x2fc>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d101      	bne.n	8007b98 <HAL_GPIO_Init+0x1e4>
 8007b94:	2305      	movs	r3, #5
 8007b96:	e00a      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007b98:	2306      	movs	r3, #6
 8007b9a:	e008      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007b9c:	2304      	movs	r3, #4
 8007b9e:	e006      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	e004      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	e002      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e000      	b.n	8007bae <HAL_GPIO_Init+0x1fa>
 8007bac:	2300      	movs	r3, #0
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	f002 0203 	and.w	r2, r2, #3
 8007bb4:	0092      	lsls	r2, r2, #2
 8007bb6:	4093      	lsls	r3, r2
 8007bb8:	693a      	ldr	r2, [r7, #16]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007bbe:	4937      	ldr	r1, [pc, #220]	; (8007c9c <HAL_GPIO_Init+0x2e8>)
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	089b      	lsrs	r3, r3, #2
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	693a      	ldr	r2, [r7, #16]
 8007bc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007bcc:	4b39      	ldr	r3, [pc, #228]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	43db      	mvns	r3, r3
 8007bd6:	693a      	ldr	r2, [r7, #16]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007bf0:	4a30      	ldr	r2, [pc, #192]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8007bf6:	4b2f      	ldr	r3, [pc, #188]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007bf8:	685b      	ldr	r3, [r3, #4]
 8007bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	43db      	mvns	r3, r3
 8007c00:	693a      	ldr	r2, [r7, #16]
 8007c02:	4013      	ands	r3, r2
 8007c04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007c1a:	4a26      	ldr	r2, [pc, #152]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c20:	4b24      	ldr	r3, [pc, #144]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	43db      	mvns	r3, r3
 8007c2a:	693a      	ldr	r2, [r7, #16]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007c44:	4a1b      	ldr	r2, [pc, #108]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007c4a:	4b1a      	ldr	r3, [pc, #104]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	43db      	mvns	r3, r3
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4013      	ands	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007c66:	693a      	ldr	r2, [r7, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007c6e:	4a11      	ldr	r2, [pc, #68]	; (8007cb4 <HAL_GPIO_Init+0x300>)
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	3301      	adds	r3, #1
 8007c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	fa22 f303 	lsr.w	r3, r2, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f47f ae9d 	bne.w	80079c4 <HAL_GPIO_Init+0x10>
  }
}
 8007c8a:	bf00      	nop
 8007c8c:	371c      	adds	r7, #28
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	40021000 	.word	0x40021000
 8007c9c:	40010000 	.word	0x40010000
 8007ca0:	48000400 	.word	0x48000400
 8007ca4:	48000800 	.word	0x48000800
 8007ca8:	48000c00 	.word	0x48000c00
 8007cac:	48001000 	.word	0x48001000
 8007cb0:	48001400 	.word	0x48001400
 8007cb4:	40010400 	.word	0x40010400

08007cb8 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d101      	bne.n	8007cce <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	e0bb      	b.n	8007e46 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b05      	cmp	r3, #5
 8007cd8:	d101      	bne.n	8007cde <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e0b3      	b.n	8007e46 <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d101      	bne.n	8007cee <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e0ab      	b.n	8007e46 <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cee:	4b58      	ldr	r3, [pc, #352]	; (8007e50 <HAL_OPAMP_Init+0x198>)
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf2:	4a57      	ldr	r2, [pc, #348]	; (8007e50 <HAL_OPAMP_Init+0x198>)
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8007cfa:	4b55      	ldr	r3, [pc, #340]	; (8007e50 <HAL_OPAMP_Init+0x198>)
 8007cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	60bb      	str	r3, [r7, #8]
 8007d04:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007d0c:	b2db      	uxtb	r3, r3
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d103      	bne.n	8007d1a <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f7fb ff3a 	bl	8003b94 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	2b40      	cmp	r3, #64	; 0x40
 8007d26:	d003      	beq.n	8007d30 <HAL_OPAMP_Init+0x78>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b60      	cmp	r3, #96	; 0x60
 8007d2e:	d133      	bne.n	8007d98 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f023 0110 	bic.w	r1, r3, #16
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	430a      	orrs	r2, r1
 8007d44:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	4b41      	ldr	r3, [pc, #260]	; (8007e54 <HAL_OPAMP_Init+0x19c>)
 8007d4e:	4013      	ands	r3, r2
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	6851      	ldr	r1, [r2, #4]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6892      	ldr	r2, [r2, #8]
 8007d58:	4311      	orrs	r1, r2
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	6912      	ldr	r2, [r2, #16]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	6879      	ldr	r1, [r7, #4]
 8007d62:	7d09      	ldrb	r1, [r1, #20]
 8007d64:	2901      	cmp	r1, #1
 8007d66:	d102      	bne.n	8007d6e <HAL_OPAMP_Init+0xb6>
 8007d68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d6c:	e000      	b.n	8007d70 <HAL_OPAMP_Init+0xb8>
 8007d6e:	2100      	movs	r1, #0
 8007d70:	4311      	orrs	r1, r2
 8007d72:	687a      	ldr	r2, [r7, #4]
 8007d74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d76:	4311      	orrs	r1, r2
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007d7c:	4311      	orrs	r1, r2
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d82:	04d2      	lsls	r2, r2, #19
 8007d84:	4311      	orrs	r1, r2
 8007d86:	687a      	ldr	r2, [r7, #4]
 8007d88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d8a:	0612      	lsls	r2, r2, #24
 8007d8c:	4311      	orrs	r1, r2
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6812      	ldr	r2, [r2, #0]
 8007d92:	430b      	orrs	r3, r1
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	e035      	b.n	8007e04 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f023 0110 	bic.w	r1, r3, #16
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	430a      	orrs	r2, r1
 8007dac:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	4b27      	ldr	r3, [pc, #156]	; (8007e54 <HAL_OPAMP_Init+0x19c>)
 8007db6:	4013      	ands	r3, r2
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	6851      	ldr	r1, [r2, #4]
 8007dbc:	687a      	ldr	r2, [r7, #4]
 8007dbe:	6892      	ldr	r2, [r2, #8]
 8007dc0:	4311      	orrs	r1, r2
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	68d2      	ldr	r2, [r2, #12]
 8007dc6:	4311      	orrs	r1, r2
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	6912      	ldr	r2, [r2, #16]
 8007dcc:	430a      	orrs	r2, r1
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	7d09      	ldrb	r1, [r1, #20]
 8007dd2:	2901      	cmp	r1, #1
 8007dd4:	d102      	bne.n	8007ddc <HAL_OPAMP_Init+0x124>
 8007dd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dda:	e000      	b.n	8007dde <HAL_OPAMP_Init+0x126>
 8007ddc:	2100      	movs	r1, #0
 8007dde:	4311      	orrs	r1, r2
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007de4:	4311      	orrs	r1, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007dea:	4311      	orrs	r1, r2
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007df0:	04d2      	lsls	r2, r2, #19
 8007df2:	4311      	orrs	r1, r2
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007df8:	0612      	lsls	r2, r2, #24
 8007dfa:	4311      	orrs	r1, r2
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6812      	ldr	r2, [r2, #0]
 8007e00:	430b      	orrs	r3, r1
 8007e02:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	699b      	ldr	r3, [r3, #24]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	db10      	blt.n	8007e30 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	699a      	ldr	r2, [r3, #24]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	431a      	orrs	r2, r3
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	431a      	orrs	r2, r3
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d103      	bne.n	8007e44 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2201      	movs	r2, #1
 8007e40:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3710      	adds	r7, #16
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd80      	pop	{r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	40021000 	.word	0x40021000
 8007e54:	e0003e11 	.word	0xe0003e11

08007e58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d141      	bne.n	8007eea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e66:	4b4b      	ldr	r3, [pc, #300]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e72:	d131      	bne.n	8007ed8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e74:	4b47      	ldr	r3, [pc, #284]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e7a:	4a46      	ldr	r2, [pc, #280]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e84:	4b43      	ldr	r3, [pc, #268]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e8c:	4a41      	ldr	r2, [pc, #260]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e94:	4b40      	ldr	r3, [pc, #256]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2232      	movs	r2, #50	; 0x32
 8007e9a:	fb02 f303 	mul.w	r3, r2, r3
 8007e9e:	4a3f      	ldr	r2, [pc, #252]	; (8007f9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea4:	0c9b      	lsrs	r3, r3, #18
 8007ea6:	3301      	adds	r3, #1
 8007ea8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007eaa:	e002      	b.n	8007eb2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007eb2:	4b38      	ldr	r3, [pc, #224]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007eba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ebe:	d102      	bne.n	8007ec6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1f2      	bne.n	8007eac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ec6:	4b33      	ldr	r3, [pc, #204]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed2:	d158      	bne.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007ed4:	2303      	movs	r3, #3
 8007ed6:	e057      	b.n	8007f88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ed8:	4b2e      	ldr	r3, [pc, #184]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ede:	4a2d      	ldr	r2, [pc, #180]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007ee8:	e04d      	b.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ef0:	d141      	bne.n	8007f76 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ef2:	4b28      	ldr	r3, [pc, #160]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efe:	d131      	bne.n	8007f64 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f00:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f06:	4a23      	ldr	r2, [pc, #140]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007f10:	4b20      	ldr	r3, [pc, #128]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f18:	4a1e      	ldr	r2, [pc, #120]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007f20:	4b1d      	ldr	r3, [pc, #116]	; (8007f98 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2232      	movs	r2, #50	; 0x32
 8007f26:	fb02 f303 	mul.w	r3, r2, r3
 8007f2a:	4a1c      	ldr	r2, [pc, #112]	; (8007f9c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8007f30:	0c9b      	lsrs	r3, r3, #18
 8007f32:	3301      	adds	r3, #1
 8007f34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f36:	e002      	b.n	8007f3e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f3e:	4b15      	ldr	r3, [pc, #84]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f40:	695b      	ldr	r3, [r3, #20]
 8007f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4a:	d102      	bne.n	8007f52 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d1f2      	bne.n	8007f38 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f52:	4b10      	ldr	r3, [pc, #64]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f54:	695b      	ldr	r3, [r3, #20]
 8007f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f5e:	d112      	bne.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e011      	b.n	8007f88 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f64:	4b0b      	ldr	r3, [pc, #44]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f6a:	4a0a      	ldr	r2, [pc, #40]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007f74:	e007      	b.n	8007f86 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f76:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f7e:	4a05      	ldr	r2, [pc, #20]	; (8007f94 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f84:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007f86:	2300      	movs	r3, #0
}
 8007f88:	4618      	mov	r0, r3
 8007f8a:	3714      	adds	r7, #20
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr
 8007f94:	40007000 	.word	0x40007000
 8007f98:	200005e0 	.word	0x200005e0
 8007f9c:	431bde83 	.word	0x431bde83

08007fa0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d101      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e308      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 0301 	and.w	r3, r3, #1
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d075      	beq.n	80080aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fbe:	4ba3      	ldr	r3, [pc, #652]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	f003 030c 	and.w	r3, r3, #12
 8007fc6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fc8:	4ba0      	ldr	r3, [pc, #640]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	2b0c      	cmp	r3, #12
 8007fd6:	d102      	bne.n	8007fde <HAL_RCC_OscConfig+0x3e>
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	2b03      	cmp	r3, #3
 8007fdc:	d002      	beq.n	8007fe4 <HAL_RCC_OscConfig+0x44>
 8007fde:	69bb      	ldr	r3, [r7, #24]
 8007fe0:	2b08      	cmp	r3, #8
 8007fe2:	d10b      	bne.n	8007ffc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fe4:	4b99      	ldr	r3, [pc, #612]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d05b      	beq.n	80080a8 <HAL_RCC_OscConfig+0x108>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d157      	bne.n	80080a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e2e3      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008004:	d106      	bne.n	8008014 <HAL_RCC_OscConfig+0x74>
 8008006:	4b91      	ldr	r3, [pc, #580]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a90      	ldr	r2, [pc, #576]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800800c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008010:	6013      	str	r3, [r2, #0]
 8008012:	e01d      	b.n	8008050 <HAL_RCC_OscConfig+0xb0>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800801c:	d10c      	bne.n	8008038 <HAL_RCC_OscConfig+0x98>
 800801e:	4b8b      	ldr	r3, [pc, #556]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a8a      	ldr	r2, [pc, #552]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008024:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008028:	6013      	str	r3, [r2, #0]
 800802a:	4b88      	ldr	r3, [pc, #544]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a87      	ldr	r2, [pc, #540]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008034:	6013      	str	r3, [r2, #0]
 8008036:	e00b      	b.n	8008050 <HAL_RCC_OscConfig+0xb0>
 8008038:	4b84      	ldr	r3, [pc, #528]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a83      	ldr	r2, [pc, #524]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800803e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008042:	6013      	str	r3, [r2, #0]
 8008044:	4b81      	ldr	r3, [pc, #516]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a80      	ldr	r2, [pc, #512]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800804a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800804e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d013      	beq.n	8008080 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008058:	f7fd f94e 	bl	80052f8 <HAL_GetTick>
 800805c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800805e:	e008      	b.n	8008072 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008060:	f7fd f94a 	bl	80052f8 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	693b      	ldr	r3, [r7, #16]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	2b64      	cmp	r3, #100	; 0x64
 800806c:	d901      	bls.n	8008072 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800806e:	2303      	movs	r3, #3
 8008070:	e2a8      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008072:	4b76      	ldr	r3, [pc, #472]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d0f0      	beq.n	8008060 <HAL_RCC_OscConfig+0xc0>
 800807e:	e014      	b.n	80080aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008080:	f7fd f93a 	bl	80052f8 <HAL_GetTick>
 8008084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008086:	e008      	b.n	800809a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008088:	f7fd f936 	bl	80052f8 <HAL_GetTick>
 800808c:	4602      	mov	r2, r0
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	1ad3      	subs	r3, r2, r3
 8008092:	2b64      	cmp	r3, #100	; 0x64
 8008094:	d901      	bls.n	800809a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008096:	2303      	movs	r3, #3
 8008098:	e294      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800809a:	4b6c      	ldr	r3, [pc, #432]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1f0      	bne.n	8008088 <HAL_RCC_OscConfig+0xe8>
 80080a6:	e000      	b.n	80080aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d075      	beq.n	80081a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080b6:	4b65      	ldr	r3, [pc, #404]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	f003 030c 	and.w	r3, r3, #12
 80080be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080c0:	4b62      	ldr	r3, [pc, #392]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f003 0303 	and.w	r3, r3, #3
 80080c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80080ca:	69bb      	ldr	r3, [r7, #24]
 80080cc:	2b0c      	cmp	r3, #12
 80080ce:	d102      	bne.n	80080d6 <HAL_RCC_OscConfig+0x136>
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	2b02      	cmp	r3, #2
 80080d4:	d002      	beq.n	80080dc <HAL_RCC_OscConfig+0x13c>
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	2b04      	cmp	r3, #4
 80080da:	d11f      	bne.n	800811c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080dc:	4b5b      	ldr	r3, [pc, #364]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d005      	beq.n	80080f4 <HAL_RCC_OscConfig+0x154>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	68db      	ldr	r3, [r3, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d101      	bne.n	80080f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	e267      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f4:	4b55      	ldr	r3, [pc, #340]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	061b      	lsls	r3, r3, #24
 8008102:	4952      	ldr	r1, [pc, #328]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008104:	4313      	orrs	r3, r2
 8008106:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008108:	4b51      	ldr	r3, [pc, #324]	; (8008250 <HAL_RCC_OscConfig+0x2b0>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4618      	mov	r0, r3
 800810e:	f7fd f8a7 	bl	8005260 <HAL_InitTick>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d043      	beq.n	80081a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008118:	2301      	movs	r3, #1
 800811a:	e253      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d023      	beq.n	800816c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008124:	4b49      	ldr	r3, [pc, #292]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a48      	ldr	r2, [pc, #288]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800812a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800812e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008130:	f7fd f8e2 	bl	80052f8 <HAL_GetTick>
 8008134:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008136:	e008      	b.n	800814a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008138:	f7fd f8de 	bl	80052f8 <HAL_GetTick>
 800813c:	4602      	mov	r2, r0
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1ad3      	subs	r3, r2, r3
 8008142:	2b02      	cmp	r3, #2
 8008144:	d901      	bls.n	800814a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008146:	2303      	movs	r3, #3
 8008148:	e23c      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800814a:	4b40      	ldr	r3, [pc, #256]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f0      	beq.n	8008138 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008156:	4b3d      	ldr	r3, [pc, #244]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008158:	685b      	ldr	r3, [r3, #4]
 800815a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	061b      	lsls	r3, r3, #24
 8008164:	4939      	ldr	r1, [pc, #228]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008166:	4313      	orrs	r3, r2
 8008168:	604b      	str	r3, [r1, #4]
 800816a:	e01a      	b.n	80081a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800816c:	4b37      	ldr	r3, [pc, #220]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a36      	ldr	r2, [pc, #216]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008172:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008176:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008178:	f7fd f8be 	bl	80052f8 <HAL_GetTick>
 800817c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800817e:	e008      	b.n	8008192 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008180:	f7fd f8ba 	bl	80052f8 <HAL_GetTick>
 8008184:	4602      	mov	r2, r0
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	2b02      	cmp	r3, #2
 800818c:	d901      	bls.n	8008192 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800818e:	2303      	movs	r3, #3
 8008190:	e218      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008192:	4b2e      	ldr	r3, [pc, #184]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800819a:	2b00      	cmp	r3, #0
 800819c:	d1f0      	bne.n	8008180 <HAL_RCC_OscConfig+0x1e0>
 800819e:	e000      	b.n	80081a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80081a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d03c      	beq.n	8008228 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d01c      	beq.n	80081f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081b6:	4b25      	ldr	r3, [pc, #148]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80081b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081bc:	4a23      	ldr	r2, [pc, #140]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80081be:	f043 0301 	orr.w	r3, r3, #1
 80081c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081c6:	f7fd f897 	bl	80052f8 <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081ce:	f7fd f893 	bl	80052f8 <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b02      	cmp	r3, #2
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e1f1      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081e0:	4b1a      	ldr	r3, [pc, #104]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80081e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e6:	f003 0302 	and.w	r3, r3, #2
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ef      	beq.n	80081ce <HAL_RCC_OscConfig+0x22e>
 80081ee:	e01b      	b.n	8008228 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081f0:	4b16      	ldr	r3, [pc, #88]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80081f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 80081f8:	f023 0301 	bic.w	r3, r3, #1
 80081fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008200:	f7fd f87a 	bl	80052f8 <HAL_GetTick>
 8008204:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008206:	e008      	b.n	800821a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008208:	f7fd f876 	bl	80052f8 <HAL_GetTick>
 800820c:	4602      	mov	r2, r0
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b02      	cmp	r3, #2
 8008214:	d901      	bls.n	800821a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8008216:	2303      	movs	r3, #3
 8008218:	e1d4      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800821a:	4b0c      	ldr	r3, [pc, #48]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800821c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d1ef      	bne.n	8008208 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0304 	and.w	r3, r3, #4
 8008230:	2b00      	cmp	r3, #0
 8008232:	f000 80ab 	beq.w	800838c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008236:	2300      	movs	r3, #0
 8008238:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800823a:	4b04      	ldr	r3, [pc, #16]	; (800824c <HAL_RCC_OscConfig+0x2ac>)
 800823c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800823e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d106      	bne.n	8008254 <HAL_RCC_OscConfig+0x2b4>
 8008246:	2301      	movs	r3, #1
 8008248:	e005      	b.n	8008256 <HAL_RCC_OscConfig+0x2b6>
 800824a:	bf00      	nop
 800824c:	40021000 	.word	0x40021000
 8008250:	200005e4 	.word	0x200005e4
 8008254:	2300      	movs	r3, #0
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00d      	beq.n	8008276 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800825a:	4baf      	ldr	r3, [pc, #700]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 800825c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800825e:	4aae      	ldr	r2, [pc, #696]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008264:	6593      	str	r3, [r2, #88]	; 0x58
 8008266:	4bac      	ldr	r3, [pc, #688]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008272:	2301      	movs	r3, #1
 8008274:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008276:	4ba9      	ldr	r3, [pc, #676]	; (800851c <HAL_RCC_OscConfig+0x57c>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800827e:	2b00      	cmp	r3, #0
 8008280:	d118      	bne.n	80082b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008282:	4ba6      	ldr	r3, [pc, #664]	; (800851c <HAL_RCC_OscConfig+0x57c>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4aa5      	ldr	r2, [pc, #660]	; (800851c <HAL_RCC_OscConfig+0x57c>)
 8008288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800828c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800828e:	f7fd f833 	bl	80052f8 <HAL_GetTick>
 8008292:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008294:	e008      	b.n	80082a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008296:	f7fd f82f 	bl	80052f8 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d901      	bls.n	80082a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e18d      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082a8:	4b9c      	ldr	r3, [pc, #624]	; (800851c <HAL_RCC_OscConfig+0x57c>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0f0      	beq.n	8008296 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	689b      	ldr	r3, [r3, #8]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d108      	bne.n	80082ce <HAL_RCC_OscConfig+0x32e>
 80082bc:	4b96      	ldr	r3, [pc, #600]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80082be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c2:	4a95      	ldr	r2, [pc, #596]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80082c4:	f043 0301 	orr.w	r3, r3, #1
 80082c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082cc:	e024      	b.n	8008318 <HAL_RCC_OscConfig+0x378>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	2b05      	cmp	r3, #5
 80082d4:	d110      	bne.n	80082f8 <HAL_RCC_OscConfig+0x358>
 80082d6:	4b90      	ldr	r3, [pc, #576]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80082d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082dc:	4a8e      	ldr	r2, [pc, #568]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80082de:	f043 0304 	orr.w	r3, r3, #4
 80082e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082e6:	4b8c      	ldr	r3, [pc, #560]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ec:	4a8a      	ldr	r2, [pc, #552]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80082ee:	f043 0301 	orr.w	r3, r3, #1
 80082f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082f6:	e00f      	b.n	8008318 <HAL_RCC_OscConfig+0x378>
 80082f8:	4b87      	ldr	r3, [pc, #540]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80082fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fe:	4a86      	ldr	r2, [pc, #536]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008308:	4b83      	ldr	r3, [pc, #524]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 800830a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830e:	4a82      	ldr	r2, [pc, #520]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008310:	f023 0304 	bic.w	r3, r3, #4
 8008314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d016      	beq.n	800834e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008320:	f7fc ffea 	bl	80052f8 <HAL_GetTick>
 8008324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008326:	e00a      	b.n	800833e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008328:	f7fc ffe6 	bl	80052f8 <HAL_GetTick>
 800832c:	4602      	mov	r2, r0
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	f241 3288 	movw	r2, #5000	; 0x1388
 8008336:	4293      	cmp	r3, r2
 8008338:	d901      	bls.n	800833e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800833a:	2303      	movs	r3, #3
 800833c:	e142      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800833e:	4b76      	ldr	r3, [pc, #472]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008344:	f003 0302 	and.w	r3, r3, #2
 8008348:	2b00      	cmp	r3, #0
 800834a:	d0ed      	beq.n	8008328 <HAL_RCC_OscConfig+0x388>
 800834c:	e015      	b.n	800837a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800834e:	f7fc ffd3 	bl	80052f8 <HAL_GetTick>
 8008352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008354:	e00a      	b.n	800836c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008356:	f7fc ffcf 	bl	80052f8 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	f241 3288 	movw	r2, #5000	; 0x1388
 8008364:	4293      	cmp	r3, r2
 8008366:	d901      	bls.n	800836c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e12b      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800836c:	4b6a      	ldr	r3, [pc, #424]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 800836e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008372:	f003 0302 	and.w	r3, r3, #2
 8008376:	2b00      	cmp	r3, #0
 8008378:	d1ed      	bne.n	8008356 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800837a:	7ffb      	ldrb	r3, [r7, #31]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d105      	bne.n	800838c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008380:	4b65      	ldr	r3, [pc, #404]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008384:	4a64      	ldr	r2, [pc, #400]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008386:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800838a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0320 	and.w	r3, r3, #32
 8008394:	2b00      	cmp	r3, #0
 8008396:	d03c      	beq.n	8008412 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	699b      	ldr	r3, [r3, #24]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01c      	beq.n	80083da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083a0:	4b5d      	ldr	r3, [pc, #372]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80083a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083a6:	4a5c      	ldr	r2, [pc, #368]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80083a8:	f043 0301 	orr.w	r3, r3, #1
 80083ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083b0:	f7fc ffa2 	bl	80052f8 <HAL_GetTick>
 80083b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083b6:	e008      	b.n	80083ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083b8:	f7fc ff9e 	bl	80052f8 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d901      	bls.n	80083ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	e0fc      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083ca:	4b53      	ldr	r3, [pc, #332]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80083cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083d0:	f003 0302 	and.w	r3, r3, #2
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d0ef      	beq.n	80083b8 <HAL_RCC_OscConfig+0x418>
 80083d8:	e01b      	b.n	8008412 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083da:	4b4f      	ldr	r3, [pc, #316]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80083dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083e0:	4a4d      	ldr	r2, [pc, #308]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80083e2:	f023 0301 	bic.w	r3, r3, #1
 80083e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083ea:	f7fc ff85 	bl	80052f8 <HAL_GetTick>
 80083ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083f0:	e008      	b.n	8008404 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083f2:	f7fc ff81 	bl	80052f8 <HAL_GetTick>
 80083f6:	4602      	mov	r2, r0
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d901      	bls.n	8008404 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e0df      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008404:	4b44      	ldr	r3, [pc, #272]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1ef      	bne.n	80083f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	69db      	ldr	r3, [r3, #28]
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 80d3 	beq.w	80085c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800841c:	4b3e      	ldr	r3, [pc, #248]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f003 030c 	and.w	r3, r3, #12
 8008424:	2b0c      	cmp	r3, #12
 8008426:	f000 808d 	beq.w	8008544 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	69db      	ldr	r3, [r3, #28]
 800842e:	2b02      	cmp	r3, #2
 8008430:	d15a      	bne.n	80084e8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008432:	4b39      	ldr	r3, [pc, #228]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a38      	ldr	r2, [pc, #224]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008438:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800843c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800843e:	f7fc ff5b 	bl	80052f8 <HAL_GetTick>
 8008442:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008444:	e008      	b.n	8008458 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008446:	f7fc ff57 	bl	80052f8 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	2b02      	cmp	r3, #2
 8008452:	d901      	bls.n	8008458 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e0b5      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008458:	4b2f      	ldr	r3, [pc, #188]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1f0      	bne.n	8008446 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008464:	4b2c      	ldr	r3, [pc, #176]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	4b2d      	ldr	r3, [pc, #180]	; (8008520 <HAL_RCC_OscConfig+0x580>)
 800846a:	4013      	ands	r3, r2
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6a11      	ldr	r1, [r2, #32]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008474:	3a01      	subs	r2, #1
 8008476:	0112      	lsls	r2, r2, #4
 8008478:	4311      	orrs	r1, r2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800847e:	0212      	lsls	r2, r2, #8
 8008480:	4311      	orrs	r1, r2
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008486:	0852      	lsrs	r2, r2, #1
 8008488:	3a01      	subs	r2, #1
 800848a:	0552      	lsls	r2, r2, #21
 800848c:	4311      	orrs	r1, r2
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008492:	0852      	lsrs	r2, r2, #1
 8008494:	3a01      	subs	r2, #1
 8008496:	0652      	lsls	r2, r2, #25
 8008498:	4311      	orrs	r1, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800849e:	06d2      	lsls	r2, r2, #27
 80084a0:	430a      	orrs	r2, r1
 80084a2:	491d      	ldr	r1, [pc, #116]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084a8:	4b1b      	ldr	r3, [pc, #108]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a1a      	ldr	r2, [pc, #104]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084b4:	4b18      	ldr	r3, [pc, #96]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4a17      	ldr	r2, [pc, #92]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c0:	f7fc ff1a 	bl	80052f8 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c8:	f7fc ff16 	bl	80052f8 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e074      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0f0      	beq.n	80084c8 <HAL_RCC_OscConfig+0x528>
 80084e6:	e06c      	b.n	80085c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e8:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a0a      	ldr	r2, [pc, #40]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80084f4:	4b08      	ldr	r3, [pc, #32]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	4a07      	ldr	r2, [pc, #28]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 80084fa:	f023 0303 	bic.w	r3, r3, #3
 80084fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008500:	4b05      	ldr	r3, [pc, #20]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4a04      	ldr	r2, [pc, #16]	; (8008518 <HAL_RCC_OscConfig+0x578>)
 8008506:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800850a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800850e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008510:	f7fc fef2 	bl	80052f8 <HAL_GetTick>
 8008514:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008516:	e00e      	b.n	8008536 <HAL_RCC_OscConfig+0x596>
 8008518:	40021000 	.word	0x40021000
 800851c:	40007000 	.word	0x40007000
 8008520:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008524:	f7fc fee8 	bl	80052f8 <HAL_GetTick>
 8008528:	4602      	mov	r2, r0
 800852a:	693b      	ldr	r3, [r7, #16]
 800852c:	1ad3      	subs	r3, r2, r3
 800852e:	2b02      	cmp	r3, #2
 8008530:	d901      	bls.n	8008536 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8008532:	2303      	movs	r3, #3
 8008534:	e046      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008536:	4b25      	ldr	r3, [pc, #148]	; (80085cc <HAL_RCC_OscConfig+0x62c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1f0      	bne.n	8008524 <HAL_RCC_OscConfig+0x584>
 8008542:	e03e      	b.n	80085c2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	69db      	ldr	r3, [r3, #28]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d101      	bne.n	8008550 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	e039      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008550:	4b1e      	ldr	r3, [pc, #120]	; (80085cc <HAL_RCC_OscConfig+0x62c>)
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f003 0203 	and.w	r2, r3, #3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	429a      	cmp	r2, r3
 8008562:	d12c      	bne.n	80085be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856e:	3b01      	subs	r3, #1
 8008570:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008572:	429a      	cmp	r2, r3
 8008574:	d123      	bne.n	80085be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008580:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008582:	429a      	cmp	r2, r3
 8008584:	d11b      	bne.n	80085be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008590:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008592:	429a      	cmp	r2, r3
 8008594:	d113      	bne.n	80085be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a0:	085b      	lsrs	r3, r3, #1
 80085a2:	3b01      	subs	r3, #1
 80085a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d109      	bne.n	80085be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085b4:	085b      	lsrs	r3, r3, #1
 80085b6:	3b01      	subs	r3, #1
 80085b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d001      	beq.n	80085c2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80085be:	2301      	movs	r3, #1
 80085c0:	e000      	b.n	80085c4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3720      	adds	r7, #32
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}
 80085cc:	40021000 	.word	0x40021000

080085d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80085da:	2300      	movs	r3, #0
 80085dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085e4:	2301      	movs	r3, #1
 80085e6:	e11e      	b.n	8008826 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085e8:	4b91      	ldr	r3, [pc, #580]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f003 030f 	and.w	r3, r3, #15
 80085f0:	683a      	ldr	r2, [r7, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d910      	bls.n	8008618 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f6:	4b8e      	ldr	r3, [pc, #568]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f023 020f 	bic.w	r2, r3, #15
 80085fe:	498c      	ldr	r1, [pc, #560]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	4313      	orrs	r3, r2
 8008604:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008606:	4b8a      	ldr	r3, [pc, #552]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 030f 	and.w	r3, r3, #15
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	429a      	cmp	r2, r3
 8008612:	d001      	beq.n	8008618 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e106      	b.n	8008826 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 0301 	and.w	r3, r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	d073      	beq.n	800870c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	2b03      	cmp	r3, #3
 800862a:	d129      	bne.n	8008680 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800862c:	4b81      	ldr	r3, [pc, #516]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d101      	bne.n	800863c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008638:	2301      	movs	r3, #1
 800863a:	e0f4      	b.n	8008826 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800863c:	f000 f99e 	bl	800897c <RCC_GetSysClockFreqFromPLLSource>
 8008640:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	4a7c      	ldr	r2, [pc, #496]	; (8008838 <HAL_RCC_ClockConfig+0x268>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d93f      	bls.n	80086ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800864a:	4b7a      	ldr	r3, [pc, #488]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d009      	beq.n	800866a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800865e:	2b00      	cmp	r3, #0
 8008660:	d033      	beq.n	80086ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008666:	2b00      	cmp	r3, #0
 8008668:	d12f      	bne.n	80086ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800866a:	4b72      	ldr	r3, [pc, #456]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008672:	4a70      	ldr	r2, [pc, #448]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 8008674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008678:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800867a:	2380      	movs	r3, #128	; 0x80
 800867c:	617b      	str	r3, [r7, #20]
 800867e:	e024      	b.n	80086ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b02      	cmp	r3, #2
 8008686:	d107      	bne.n	8008698 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008688:	4b6a      	ldr	r3, [pc, #424]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d109      	bne.n	80086a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008694:	2301      	movs	r3, #1
 8008696:	e0c6      	b.n	8008826 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008698:	4b66      	ldr	r3, [pc, #408]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d101      	bne.n	80086a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	e0be      	b.n	8008826 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80086a8:	f000 f8ce 	bl	8008848 <HAL_RCC_GetSysClockFreq>
 80086ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80086ae:	693b      	ldr	r3, [r7, #16]
 80086b0:	4a61      	ldr	r2, [pc, #388]	; (8008838 <HAL_RCC_ClockConfig+0x268>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d909      	bls.n	80086ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80086b6:	4b5f      	ldr	r3, [pc, #380]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086be:	4a5d      	ldr	r2, [pc, #372]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80086c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80086c6:	2380      	movs	r3, #128	; 0x80
 80086c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086ca:	4b5a      	ldr	r3, [pc, #360]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f023 0203 	bic.w	r2, r3, #3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	4957      	ldr	r1, [pc, #348]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80086d8:	4313      	orrs	r3, r2
 80086da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086dc:	f7fc fe0c 	bl	80052f8 <HAL_GetTick>
 80086e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e2:	e00a      	b.n	80086fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086e4:	f7fc fe08 	bl	80052f8 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80086f2:	4293      	cmp	r3, r2
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e095      	b.n	8008826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086fa:	4b4e      	ldr	r3, [pc, #312]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	f003 020c 	and.w	r2, r3, #12
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	685b      	ldr	r3, [r3, #4]
 8008706:	009b      	lsls	r3, r3, #2
 8008708:	429a      	cmp	r2, r3
 800870a:	d1eb      	bne.n	80086e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f003 0302 	and.w	r3, r3, #2
 8008714:	2b00      	cmp	r3, #0
 8008716:	d023      	beq.n	8008760 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b00      	cmp	r3, #0
 8008722:	d005      	beq.n	8008730 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008724:	4b43      	ldr	r3, [pc, #268]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	4a42      	ldr	r2, [pc, #264]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800872a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800872e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f003 0308 	and.w	r3, r3, #8
 8008738:	2b00      	cmp	r3, #0
 800873a:	d007      	beq.n	800874c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800873c:	4b3d      	ldr	r3, [pc, #244]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008744:	4a3b      	ldr	r2, [pc, #236]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 8008746:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800874a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800874c:	4b39      	ldr	r3, [pc, #228]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	4936      	ldr	r1, [pc, #216]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800875a:	4313      	orrs	r3, r2
 800875c:	608b      	str	r3, [r1, #8]
 800875e:	e008      	b.n	8008772 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2b80      	cmp	r3, #128	; 0x80
 8008764:	d105      	bne.n	8008772 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008766:	4b33      	ldr	r3, [pc, #204]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 8008768:	689b      	ldr	r3, [r3, #8]
 800876a:	4a32      	ldr	r2, [pc, #200]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 800876c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008770:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008772:	4b2f      	ldr	r3, [pc, #188]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	683a      	ldr	r2, [r7, #0]
 800877c:	429a      	cmp	r2, r3
 800877e:	d21d      	bcs.n	80087bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008780:	4b2b      	ldr	r3, [pc, #172]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f023 020f 	bic.w	r2, r3, #15
 8008788:	4929      	ldr	r1, [pc, #164]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	4313      	orrs	r3, r2
 800878e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008790:	f7fc fdb2 	bl	80052f8 <HAL_GetTick>
 8008794:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008796:	e00a      	b.n	80087ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008798:	f7fc fdae 	bl	80052f8 <HAL_GetTick>
 800879c:	4602      	mov	r2, r0
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e03b      	b.n	8008826 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087ae:	4b20      	ldr	r3, [pc, #128]	; (8008830 <HAL_RCC_ClockConfig+0x260>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	683a      	ldr	r2, [r7, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d1ed      	bne.n	8008798 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d008      	beq.n	80087da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087c8:	4b1a      	ldr	r3, [pc, #104]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	4917      	ldr	r1, [pc, #92]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80087d6:	4313      	orrs	r3, r2
 80087d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d009      	beq.n	80087fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087e6:	4b13      	ldr	r3, [pc, #76]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	00db      	lsls	r3, r3, #3
 80087f4:	490f      	ldr	r1, [pc, #60]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 80087f6:	4313      	orrs	r3, r2
 80087f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80087fa:	f000 f825 	bl	8008848 <HAL_RCC_GetSysClockFreq>
 80087fe:	4601      	mov	r1, r0
 8008800:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <HAL_RCC_ClockConfig+0x264>)
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	091b      	lsrs	r3, r3, #4
 8008806:	f003 030f 	and.w	r3, r3, #15
 800880a:	4a0c      	ldr	r2, [pc, #48]	; (800883c <HAL_RCC_ClockConfig+0x26c>)
 800880c:	5cd3      	ldrb	r3, [r2, r3]
 800880e:	f003 031f 	and.w	r3, r3, #31
 8008812:	fa21 f303 	lsr.w	r3, r1, r3
 8008816:	4a0a      	ldr	r2, [pc, #40]	; (8008840 <HAL_RCC_ClockConfig+0x270>)
 8008818:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <HAL_RCC_ClockConfig+0x274>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4618      	mov	r0, r3
 8008820:	f7fc fd1e 	bl	8005260 <HAL_InitTick>
 8008824:	4603      	mov	r3, r0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3718      	adds	r7, #24
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	40022000 	.word	0x40022000
 8008834:	40021000 	.word	0x40021000
 8008838:	04c4b400 	.word	0x04c4b400
 800883c:	0800fea8 	.word	0x0800fea8
 8008840:	200005e0 	.word	0x200005e0
 8008844:	200005e4 	.word	0x200005e4

08008848 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008848:	b480      	push	{r7}
 800884a:	b087      	sub	sp, #28
 800884c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800884e:	4b2c      	ldr	r3, [pc, #176]	; (8008900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008850:	689b      	ldr	r3, [r3, #8]
 8008852:	f003 030c 	and.w	r3, r3, #12
 8008856:	2b04      	cmp	r3, #4
 8008858:	d102      	bne.n	8008860 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800885a:	4b2a      	ldr	r3, [pc, #168]	; (8008904 <HAL_RCC_GetSysClockFreq+0xbc>)
 800885c:	613b      	str	r3, [r7, #16]
 800885e:	e047      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008860:	4b27      	ldr	r3, [pc, #156]	; (8008900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f003 030c 	and.w	r3, r3, #12
 8008868:	2b08      	cmp	r3, #8
 800886a:	d102      	bne.n	8008872 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800886c:	4b26      	ldr	r3, [pc, #152]	; (8008908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800886e:	613b      	str	r3, [r7, #16]
 8008870:	e03e      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008872:	4b23      	ldr	r3, [pc, #140]	; (8008900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 030c 	and.w	r3, r3, #12
 800887a:	2b0c      	cmp	r3, #12
 800887c:	d136      	bne.n	80088ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800887e:	4b20      	ldr	r3, [pc, #128]	; (8008900 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	f003 0303 	and.w	r3, r3, #3
 8008886:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008888:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <HAL_RCC_GetSysClockFreq+0xb8>)
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	091b      	lsrs	r3, r3, #4
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	3301      	adds	r3, #1
 8008894:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2b03      	cmp	r3, #3
 800889a:	d10c      	bne.n	80088b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800889c:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <HAL_RCC_GetSysClockFreq+0xc0>)
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088a4:	4a16      	ldr	r2, [pc, #88]	; (8008900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088a6:	68d2      	ldr	r2, [r2, #12]
 80088a8:	0a12      	lsrs	r2, r2, #8
 80088aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088ae:	fb02 f303 	mul.w	r3, r2, r3
 80088b2:	617b      	str	r3, [r7, #20]
      break;
 80088b4:	e00c      	b.n	80088d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088b6:	4a13      	ldr	r2, [pc, #76]	; (8008904 <HAL_RCC_GetSysClockFreq+0xbc>)
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80088be:	4a10      	ldr	r2, [pc, #64]	; (8008900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088c0:	68d2      	ldr	r2, [r2, #12]
 80088c2:	0a12      	lsrs	r2, r2, #8
 80088c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088c8:	fb02 f303 	mul.w	r3, r2, r3
 80088cc:	617b      	str	r3, [r7, #20]
      break;
 80088ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088d0:	4b0b      	ldr	r3, [pc, #44]	; (8008900 <HAL_RCC_GetSysClockFreq+0xb8>)
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	0e5b      	lsrs	r3, r3, #25
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	3301      	adds	r3, #1
 80088dc:	005b      	lsls	r3, r3, #1
 80088de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80088e0:	697a      	ldr	r2, [r7, #20]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088e8:	613b      	str	r3, [r7, #16]
 80088ea:	e001      	b.n	80088f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80088ec:	2300      	movs	r3, #0
 80088ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80088f0:	693b      	ldr	r3, [r7, #16]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40021000 	.word	0x40021000
 8008904:	00f42400 	.word	0x00f42400
 8008908:	007a1200 	.word	0x007a1200

0800890c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800890c:	b480      	push	{r7}
 800890e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008910:	4b03      	ldr	r3, [pc, #12]	; (8008920 <HAL_RCC_GetHCLKFreq+0x14>)
 8008912:	681b      	ldr	r3, [r3, #0]
}
 8008914:	4618      	mov	r0, r3
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	200005e0 	.word	0x200005e0

08008924 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008928:	f7ff fff0 	bl	800890c <HAL_RCC_GetHCLKFreq>
 800892c:	4601      	mov	r1, r0
 800892e:	4b06      	ldr	r3, [pc, #24]	; (8008948 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008930:	689b      	ldr	r3, [r3, #8]
 8008932:	0a1b      	lsrs	r3, r3, #8
 8008934:	f003 0307 	and.w	r3, r3, #7
 8008938:	4a04      	ldr	r2, [pc, #16]	; (800894c <HAL_RCC_GetPCLK1Freq+0x28>)
 800893a:	5cd3      	ldrb	r3, [r2, r3]
 800893c:	f003 031f 	and.w	r3, r3, #31
 8008940:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008944:	4618      	mov	r0, r3
 8008946:	bd80      	pop	{r7, pc}
 8008948:	40021000 	.word	0x40021000
 800894c:	0800feb8 	.word	0x0800feb8

08008950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008954:	f7ff ffda 	bl	800890c <HAL_RCC_GetHCLKFreq>
 8008958:	4601      	mov	r1, r0
 800895a:	4b06      	ldr	r3, [pc, #24]	; (8008974 <HAL_RCC_GetPCLK2Freq+0x24>)
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	0adb      	lsrs	r3, r3, #11
 8008960:	f003 0307 	and.w	r3, r3, #7
 8008964:	4a04      	ldr	r2, [pc, #16]	; (8008978 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008966:	5cd3      	ldrb	r3, [r2, r3]
 8008968:	f003 031f 	and.w	r3, r3, #31
 800896c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008970:	4618      	mov	r0, r3
 8008972:	bd80      	pop	{r7, pc}
 8008974:	40021000 	.word	0x40021000
 8008978:	0800feb8 	.word	0x0800feb8

0800897c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800897c:	b480      	push	{r7}
 800897e:	b087      	sub	sp, #28
 8008980:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008982:	4b1e      	ldr	r3, [pc, #120]	; (80089fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	f003 0303 	and.w	r3, r3, #3
 800898a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800898c:	4b1b      	ldr	r3, [pc, #108]	; (80089fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	091b      	lsrs	r3, r3, #4
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800899a:	693b      	ldr	r3, [r7, #16]
 800899c:	2b03      	cmp	r3, #3
 800899e:	d10c      	bne.n	80089ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089a0:	4a17      	ldr	r2, [pc, #92]	; (8008a00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80089a8:	4a14      	ldr	r2, [pc, #80]	; (80089fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80089aa:	68d2      	ldr	r2, [r2, #12]
 80089ac:	0a12      	lsrs	r2, r2, #8
 80089ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80089b2:	fb02 f303 	mul.w	r3, r2, r3
 80089b6:	617b      	str	r3, [r7, #20]
    break;
 80089b8:	e00c      	b.n	80089d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80089ba:	4a12      	ldr	r2, [pc, #72]	; (8008a04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	fbb2 f3f3 	udiv	r3, r2, r3
 80089c2:	4a0e      	ldr	r2, [pc, #56]	; (80089fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80089c4:	68d2      	ldr	r2, [r2, #12]
 80089c6:	0a12      	lsrs	r2, r2, #8
 80089c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80089cc:	fb02 f303 	mul.w	r3, r2, r3
 80089d0:	617b      	str	r3, [r7, #20]
    break;
 80089d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80089d4:	4b09      	ldr	r3, [pc, #36]	; (80089fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	0e5b      	lsrs	r3, r3, #25
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	3301      	adds	r3, #1
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80089e4:	697a      	ldr	r2, [r7, #20]
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80089ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80089ee:	687b      	ldr	r3, [r7, #4]
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	371c      	adds	r7, #28
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	40021000 	.word	0x40021000
 8008a00:	007a1200 	.word	0x007a1200
 8008a04:	00f42400 	.word	0x00f42400

08008a08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b086      	sub	sp, #24
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a10:	2300      	movs	r3, #0
 8008a12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a14:	2300      	movs	r3, #0
 8008a16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	f000 8098 	beq.w	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008a26:	2300      	movs	r3, #0
 8008a28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008a2a:	4b43      	ldr	r3, [pc, #268]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10d      	bne.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008a36:	4b40      	ldr	r3, [pc, #256]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a3a:	4a3f      	ldr	r2, [pc, #252]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a40:	6593      	str	r3, [r2, #88]	; 0x58
 8008a42:	4b3d      	ldr	r3, [pc, #244]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a4a:	60bb      	str	r3, [r7, #8]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008a52:	4b3a      	ldr	r3, [pc, #232]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a39      	ldr	r2, [pc, #228]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008a5e:	f7fc fc4b 	bl	80052f8 <HAL_GetTick>
 8008a62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a64:	e009      	b.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008a66:	f7fc fc47 	bl	80052f8 <HAL_GetTick>
 8008a6a:	4602      	mov	r2, r0
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	2b02      	cmp	r3, #2
 8008a72:	d902      	bls.n	8008a7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	74fb      	strb	r3, [r7, #19]
        break;
 8008a78:	e005      	b.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008a7a:	4b30      	ldr	r3, [pc, #192]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d0ef      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008a86:	7cfb      	ldrb	r3, [r7, #19]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d159      	bne.n	8008b40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a8c:	4b2a      	ldr	r3, [pc, #168]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d01e      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	429a      	cmp	r2, r3
 8008aa6:	d019      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008aa8:	4b23      	ldr	r3, [pc, #140]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ab2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008ab4:	4b20      	ldr	r3, [pc, #128]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aba:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008abc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008ac4:	4b1c      	ldr	r3, [pc, #112]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aca:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ad0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008ad4:	4a18      	ldr	r2, [pc, #96]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d016      	beq.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ae6:	f7fc fc07 	bl	80052f8 <HAL_GetTick>
 8008aea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008aec:	e00b      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008aee:	f7fc fc03 	bl	80052f8 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d902      	bls.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	74fb      	strb	r3, [r7, #19]
            break;
 8008b04:	e006      	b.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008b06:	4b0c      	ldr	r3, [pc, #48]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b0c:	f003 0302 	and.w	r3, r3, #2
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0ec      	beq.n	8008aee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008b14:	7cfb      	ldrb	r3, [r7, #19]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d10b      	bne.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008b1a:	4b07      	ldr	r3, [pc, #28]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b28:	4903      	ldr	r1, [pc, #12]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008b30:	e008      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008b32:	7cfb      	ldrb	r3, [r7, #19]
 8008b34:	74bb      	strb	r3, [r7, #18]
 8008b36:	e005      	b.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b40:	7cfb      	ldrb	r3, [r7, #19]
 8008b42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008b44:	7c7b      	ldrb	r3, [r7, #17]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d105      	bne.n	8008b56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008b4a:	4ba6      	ldr	r3, [pc, #664]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b4e:	4aa5      	ldr	r2, [pc, #660]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 0301 	and.w	r3, r3, #1
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008b62:	4ba0      	ldr	r3, [pc, #640]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b68:	f023 0203 	bic.w	r2, r3, #3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	499c      	ldr	r1, [pc, #624]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d00a      	beq.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b84:	4b97      	ldr	r3, [pc, #604]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8a:	f023 020c 	bic.w	r2, r3, #12
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	4994      	ldr	r1, [pc, #592]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00a      	beq.n	8008bbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ba6:	4b8f      	ldr	r3, [pc, #572]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	498b      	ldr	r1, [pc, #556]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bb6:	4313      	orrs	r3, r2
 8008bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f003 0308 	and.w	r3, r3, #8
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d00a      	beq.n	8008bde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008bc8:	4b86      	ldr	r3, [pc, #536]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	4983      	ldr	r1, [pc, #524]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f003 0320 	and.w	r3, r3, #32
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008bea:	4b7e      	ldr	r3, [pc, #504]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	497a      	ldr	r1, [pc, #488]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d00a      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008c0c:	4b75      	ldr	r3, [pc, #468]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c12:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	4972      	ldr	r1, [pc, #456]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d00a      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008c2e:	4b6d      	ldr	r3, [pc, #436]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c34:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	69db      	ldr	r3, [r3, #28]
 8008c3c:	4969      	ldr	r1, [pc, #420]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00a      	beq.n	8008c66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008c50:	4b64      	ldr	r3, [pc, #400]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	4961      	ldr	r1, [pc, #388]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00a      	beq.n	8008c88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008c72:	4b5c      	ldr	r3, [pc, #368]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c80:	4958      	ldr	r1, [pc, #352]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c82:	4313      	orrs	r3, r2
 8008c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d015      	beq.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c94:	4b53      	ldr	r3, [pc, #332]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca2:	4950      	ldr	r1, [pc, #320]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cb2:	d105      	bne.n	8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cb4:	4b4b      	ldr	r3, [pc, #300]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	4a4a      	ldr	r2, [pc, #296]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cbe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d015      	beq.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008ccc:	4b45      	ldr	r3, [pc, #276]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cda:	4942      	ldr	r1, [pc, #264]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cea:	d105      	bne.n	8008cf8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cec:	4b3d      	ldr	r3, [pc, #244]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	4a3c      	ldr	r2, [pc, #240]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cf6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d015      	beq.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008d04:	4b37      	ldr	r3, [pc, #220]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d0a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	4934      	ldr	r1, [pc, #208]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d22:	d105      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d24:	4b2f      	ldr	r3, [pc, #188]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	4a2e      	ldr	r2, [pc, #184]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d2e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d015      	beq.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d3c:	4b29      	ldr	r3, [pc, #164]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d4a:	4926      	ldr	r1, [pc, #152]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d5a:	d105      	bne.n	8008d68 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d5c:	4b21      	ldr	r3, [pc, #132]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d5e:	68db      	ldr	r3, [r3, #12]
 8008d60:	4a20      	ldr	r2, [pc, #128]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d66:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d015      	beq.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d74:	4b1b      	ldr	r3, [pc, #108]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d82:	4918      	ldr	r1, [pc, #96]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d92:	d105      	bne.n	8008da0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d94:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d96:	68db      	ldr	r3, [r3, #12]
 8008d98:	4a12      	ldr	r2, [pc, #72]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d9e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d015      	beq.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008dac:	4b0d      	ldr	r3, [pc, #52]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008db2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dba:	490a      	ldr	r1, [pc, #40]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dca:	d105      	bne.n	8008dd8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008dcc:	4b05      	ldr	r3, [pc, #20]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	4a04      	ldr	r2, [pc, #16]	; (8008de4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008dd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	3718      	adds	r7, #24
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}
 8008de2:	bf00      	nop
 8008de4:	40021000 	.word	0x40021000

08008de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e01d      	b.n	8008e36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7fa ff36 	bl	8003c80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2202      	movs	r2, #2
 8008e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3304      	adds	r3, #4
 8008e24:	4619      	mov	r1, r3
 8008e26:	4610      	mov	r0, r2
 8008e28:	f000 fa2a 	bl	8009280 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3708      	adds	r7, #8
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b082      	sub	sp, #8
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d101      	bne.n	8008e50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e01d      	b.n	8008e8c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 f815 	bl	8008e94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2202      	movs	r2, #2
 8008e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f000 f9ff 	bl	8009280 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2201      	movs	r2, #1
 8008e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e8a:	2300      	movs	r3, #0
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr

08008ea8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d101      	bne.n	8008ebc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008eb8:	2301      	movs	r3, #1
 8008eba:	e083      	b.n	8008fc4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d106      	bne.n	8008ed6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f7fa fef5 	bl	8003cc0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	689b      	ldr	r3, [r3, #8]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	6812      	ldr	r2, [r2, #0]
 8008ee8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8008eec:	f023 0307 	bic.w	r3, r3, #7
 8008ef0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681a      	ldr	r2, [r3, #0]
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	3304      	adds	r3, #4
 8008efa:	4619      	mov	r1, r3
 8008efc:	4610      	mov	r0, r2
 8008efe:	f000 f9bf 	bl	8009280 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	699b      	ldr	r3, [r3, #24]
 8008f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	6a1b      	ldr	r3, [r3, #32]
 8008f18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f2a:	f023 0303 	bic.w	r3, r3, #3
 8008f2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	689a      	ldr	r2, [r3, #8]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	699b      	ldr	r3, [r3, #24]
 8008f38:	021b      	lsls	r3, r3, #8
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	693a      	ldr	r2, [r7, #16]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008f48:	f023 030c 	bic.w	r3, r3, #12
 8008f4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	4313      	orrs	r3, r2
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	011a      	lsls	r2, r3, #4
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	6a1b      	ldr	r3, [r3, #32]
 8008f76:	031b      	lsls	r3, r3, #12
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008f86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8008f8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685a      	ldr	r2, [r3, #4]
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	695b      	ldr	r3, [r3, #20]
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	60f8      	str	r0, [r7, #12]
 8008fd4:	60b9      	str	r1, [r7, #8]
 8008fd6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d101      	bne.n	8008fe6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	e105      	b.n	80091f2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	2202      	movs	r2, #2
 8008ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2b14      	cmp	r3, #20
 8008ffa:	f200 80f0 	bhi.w	80091de <HAL_TIM_PWM_ConfigChannel+0x212>
 8008ffe:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009059 	.word	0x08009059
 8009008:	080091df 	.word	0x080091df
 800900c:	080091df 	.word	0x080091df
 8009010:	080091df 	.word	0x080091df
 8009014:	08009099 	.word	0x08009099
 8009018:	080091df 	.word	0x080091df
 800901c:	080091df 	.word	0x080091df
 8009020:	080091df 	.word	0x080091df
 8009024:	080090db 	.word	0x080090db
 8009028:	080091df 	.word	0x080091df
 800902c:	080091df 	.word	0x080091df
 8009030:	080091df 	.word	0x080091df
 8009034:	0800911b 	.word	0x0800911b
 8009038:	080091df 	.word	0x080091df
 800903c:	080091df 	.word	0x080091df
 8009040:	080091df 	.word	0x080091df
 8009044:	0800915d 	.word	0x0800915d
 8009048:	080091df 	.word	0x080091df
 800904c:	080091df 	.word	0x080091df
 8009050:	080091df 	.word	0x080091df
 8009054:	0800919d 	.word	0x0800919d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	68b9      	ldr	r1, [r7, #8]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f99e 	bl	80093a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	699a      	ldr	r2, [r3, #24]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f042 0208 	orr.w	r2, r2, #8
 8009072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	699a      	ldr	r2, [r3, #24]
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f022 0204 	bic.w	r2, r2, #4
 8009082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6999      	ldr	r1, [r3, #24]
 800908a:	68bb      	ldr	r3, [r7, #8]
 800908c:	691a      	ldr	r2, [r3, #16]
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	430a      	orrs	r2, r1
 8009094:	619a      	str	r2, [r3, #24]
      break;
 8009096:	e0a3      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68b9      	ldr	r1, [r7, #8]
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fa0e 	bl	80094c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	699a      	ldr	r2, [r3, #24]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699a      	ldr	r2, [r3, #24]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80090c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	6999      	ldr	r1, [r3, #24]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	691b      	ldr	r3, [r3, #16]
 80090ce:	021a      	lsls	r2, r3, #8
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	430a      	orrs	r2, r1
 80090d6:	619a      	str	r2, [r3, #24]
      break;
 80090d8:	e082      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	68b9      	ldr	r1, [r7, #8]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fa77 	bl	80095d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69da      	ldr	r2, [r3, #28]
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f042 0208 	orr.w	r2, r2, #8
 80090f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69da      	ldr	r2, [r3, #28]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0204 	bic.w	r2, r2, #4
 8009104:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	69d9      	ldr	r1, [r3, #28]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	430a      	orrs	r2, r1
 8009116:	61da      	str	r2, [r3, #28]
      break;
 8009118:	e062      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	4618      	mov	r0, r3
 8009122:	f000 fadf 	bl	80096e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	69da      	ldr	r2, [r3, #28]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	69da      	ldr	r2, [r3, #28]
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	69d9      	ldr	r1, [r3, #28]
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	691b      	ldr	r3, [r3, #16]
 8009150:	021a      	lsls	r2, r3, #8
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	430a      	orrs	r2, r1
 8009158:	61da      	str	r2, [r3, #28]
      break;
 800915a:	e041      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fb48 	bl	80097f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0208 	orr.w	r2, r2, #8
 8009176:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 0204 	bic.w	r2, r2, #4
 8009186:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	691a      	ldr	r2, [r3, #16]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	430a      	orrs	r2, r1
 8009198:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800919a:	e021      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fb8c 	bl	80098c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091b6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80091c6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	021a      	lsls	r2, r3, #8
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	430a      	orrs	r2, r1
 80091da:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80091dc:	e000      	b.n	80091e0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80091de:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091f0:	2300      	movs	r3, #0
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop

080091fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	b082      	sub	sp, #8
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009210:	2302      	movs	r3, #2
 8009212:	e031      	b.n	8009278 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2201      	movs	r2, #1
 8009218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2202      	movs	r2, #2
 8009220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 fbb0 	bl	800998c <TIM_SlaveTimer_SetConfig>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d009      	beq.n	8009246 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2200      	movs	r2, #0
 800923e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e018      	b.n	8009278 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009254:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	68da      	ldr	r2, [r3, #12]
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009264:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2201      	movs	r2, #1
 800926a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3708      	adds	r7, #8
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}

08009280 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a3c      	ldr	r2, [pc, #240]	; (8009384 <TIM_Base_SetConfig+0x104>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d00f      	beq.n	80092b8 <TIM_Base_SetConfig+0x38>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800929e:	d00b      	beq.n	80092b8 <TIM_Base_SetConfig+0x38>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a39      	ldr	r2, [pc, #228]	; (8009388 <TIM_Base_SetConfig+0x108>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d007      	beq.n	80092b8 <TIM_Base_SetConfig+0x38>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a38      	ldr	r2, [pc, #224]	; (800938c <TIM_Base_SetConfig+0x10c>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d003      	beq.n	80092b8 <TIM_Base_SetConfig+0x38>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	4a37      	ldr	r2, [pc, #220]	; (8009390 <TIM_Base_SetConfig+0x110>)
 80092b4:	4293      	cmp	r3, r2
 80092b6:	d108      	bne.n	80092ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	68fa      	ldr	r2, [r7, #12]
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	4a2d      	ldr	r2, [pc, #180]	; (8009384 <TIM_Base_SetConfig+0x104>)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d01b      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092d8:	d017      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	4a2a      	ldr	r2, [pc, #168]	; (8009388 <TIM_Base_SetConfig+0x108>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d013      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	4a29      	ldr	r2, [pc, #164]	; (800938c <TIM_Base_SetConfig+0x10c>)
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d00f      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	4a28      	ldr	r2, [pc, #160]	; (8009390 <TIM_Base_SetConfig+0x110>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d00b      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	4a27      	ldr	r2, [pc, #156]	; (8009394 <TIM_Base_SetConfig+0x114>)
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d007      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	4a26      	ldr	r2, [pc, #152]	; (8009398 <TIM_Base_SetConfig+0x118>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d003      	beq.n	800930a <TIM_Base_SetConfig+0x8a>
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	4a25      	ldr	r2, [pc, #148]	; (800939c <TIM_Base_SetConfig+0x11c>)
 8009306:	4293      	cmp	r3, r2
 8009308:	d108      	bne.n	800931c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	4313      	orrs	r3, r2
 800931a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	695b      	ldr	r3, [r3, #20]
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	689a      	ldr	r2, [r3, #8]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	4a10      	ldr	r2, [pc, #64]	; (8009384 <TIM_Base_SetConfig+0x104>)
 8009344:	4293      	cmp	r3, r2
 8009346:	d00f      	beq.n	8009368 <TIM_Base_SetConfig+0xe8>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a11      	ldr	r2, [pc, #68]	; (8009390 <TIM_Base_SetConfig+0x110>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d00b      	beq.n	8009368 <TIM_Base_SetConfig+0xe8>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <TIM_Base_SetConfig+0x114>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d007      	beq.n	8009368 <TIM_Base_SetConfig+0xe8>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a0f      	ldr	r2, [pc, #60]	; (8009398 <TIM_Base_SetConfig+0x118>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d003      	beq.n	8009368 <TIM_Base_SetConfig+0xe8>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a0e      	ldr	r2, [pc, #56]	; (800939c <TIM_Base_SetConfig+0x11c>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d103      	bne.n	8009370 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	615a      	str	r2, [r3, #20]
}
 8009376:	bf00      	nop
 8009378:	3714      	adds	r7, #20
 800937a:	46bd      	mov	sp, r7
 800937c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009380:	4770      	bx	lr
 8009382:	bf00      	nop
 8009384:	40012c00 	.word	0x40012c00
 8009388:	40000400 	.word	0x40000400
 800938c:	40000800 	.word	0x40000800
 8009390:	40013400 	.word	0x40013400
 8009394:	40014000 	.word	0x40014000
 8009398:	40014400 	.word	0x40014400
 800939c:	40014800 	.word	0x40014800

080093a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b087      	sub	sp, #28
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	f023 0201 	bic.w	r2, r3, #1
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6a1b      	ldr	r3, [r3, #32]
 80093ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	f023 0303 	bic.w	r3, r3, #3
 80093da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	f023 0302 	bic.w	r3, r3, #2
 80093ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	697a      	ldr	r2, [r7, #20]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a2c      	ldr	r2, [pc, #176]	; (80094ac <TIM_OC1_SetConfig+0x10c>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00f      	beq.n	8009420 <TIM_OC1_SetConfig+0x80>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a2b      	ldr	r2, [pc, #172]	; (80094b0 <TIM_OC1_SetConfig+0x110>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00b      	beq.n	8009420 <TIM_OC1_SetConfig+0x80>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a2a      	ldr	r2, [pc, #168]	; (80094b4 <TIM_OC1_SetConfig+0x114>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d007      	beq.n	8009420 <TIM_OC1_SetConfig+0x80>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a29      	ldr	r2, [pc, #164]	; (80094b8 <TIM_OC1_SetConfig+0x118>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_OC1_SetConfig+0x80>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a28      	ldr	r2, [pc, #160]	; (80094bc <TIM_OC1_SetConfig+0x11c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d10c      	bne.n	800943a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f023 0308 	bic.w	r3, r3, #8
 8009426:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	f023 0304 	bic.w	r3, r3, #4
 8009438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a1b      	ldr	r2, [pc, #108]	; (80094ac <TIM_OC1_SetConfig+0x10c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d00f      	beq.n	8009462 <TIM_OC1_SetConfig+0xc2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a1a      	ldr	r2, [pc, #104]	; (80094b0 <TIM_OC1_SetConfig+0x110>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d00b      	beq.n	8009462 <TIM_OC1_SetConfig+0xc2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a19      	ldr	r2, [pc, #100]	; (80094b4 <TIM_OC1_SetConfig+0x114>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d007      	beq.n	8009462 <TIM_OC1_SetConfig+0xc2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a18      	ldr	r2, [pc, #96]	; (80094b8 <TIM_OC1_SetConfig+0x118>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d003      	beq.n	8009462 <TIM_OC1_SetConfig+0xc2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a17      	ldr	r2, [pc, #92]	; (80094bc <TIM_OC1_SetConfig+0x11c>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d111      	bne.n	8009486 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009468:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009470:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	695b      	ldr	r3, [r3, #20]
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	4313      	orrs	r3, r2
 800947a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	699b      	ldr	r3, [r3, #24]
 8009480:	693a      	ldr	r2, [r7, #16]
 8009482:	4313      	orrs	r3, r2
 8009484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	693a      	ldr	r2, [r7, #16]
 800948a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	685a      	ldr	r2, [r3, #4]
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	697a      	ldr	r2, [r7, #20]
 800949e:	621a      	str	r2, [r3, #32]
}
 80094a0:	bf00      	nop
 80094a2:	371c      	adds	r7, #28
 80094a4:	46bd      	mov	sp, r7
 80094a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094aa:	4770      	bx	lr
 80094ac:	40012c00 	.word	0x40012c00
 80094b0:	40013400 	.word	0x40013400
 80094b4:	40014000 	.word	0x40014000
 80094b8:	40014400 	.word	0x40014400
 80094bc:	40014800 	.word	0x40014800

080094c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b087      	sub	sp, #28
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	6078      	str	r0, [r7, #4]
 80094c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	f023 0210 	bic.w	r2, r3, #16
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
 80094da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	699b      	ldr	r3, [r3, #24]
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	021b      	lsls	r3, r3, #8
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	4313      	orrs	r3, r2
 8009506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009508:	697b      	ldr	r3, [r7, #20]
 800950a:	f023 0320 	bic.w	r3, r3, #32
 800950e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	011b      	lsls	r3, r3, #4
 8009516:	697a      	ldr	r2, [r7, #20]
 8009518:	4313      	orrs	r3, r2
 800951a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	4a28      	ldr	r2, [pc, #160]	; (80095c0 <TIM_OC2_SetConfig+0x100>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d003      	beq.n	800952c <TIM_OC2_SetConfig+0x6c>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a27      	ldr	r2, [pc, #156]	; (80095c4 <TIM_OC2_SetConfig+0x104>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d10d      	bne.n	8009548 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800952c:	697b      	ldr	r3, [r7, #20]
 800952e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009532:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	011b      	lsls	r3, r3, #4
 800953a:	697a      	ldr	r2, [r7, #20]
 800953c:	4313      	orrs	r3, r2
 800953e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009540:	697b      	ldr	r3, [r7, #20]
 8009542:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009546:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a1d      	ldr	r2, [pc, #116]	; (80095c0 <TIM_OC2_SetConfig+0x100>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d00f      	beq.n	8009570 <TIM_OC2_SetConfig+0xb0>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a1c      	ldr	r2, [pc, #112]	; (80095c4 <TIM_OC2_SetConfig+0x104>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00b      	beq.n	8009570 <TIM_OC2_SetConfig+0xb0>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a1b      	ldr	r2, [pc, #108]	; (80095c8 <TIM_OC2_SetConfig+0x108>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d007      	beq.n	8009570 <TIM_OC2_SetConfig+0xb0>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a1a      	ldr	r2, [pc, #104]	; (80095cc <TIM_OC2_SetConfig+0x10c>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d003      	beq.n	8009570 <TIM_OC2_SetConfig+0xb0>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a19      	ldr	r2, [pc, #100]	; (80095d0 <TIM_OC2_SetConfig+0x110>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d113      	bne.n	8009598 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009570:	693b      	ldr	r3, [r7, #16]
 8009572:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800957e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	695b      	ldr	r3, [r3, #20]
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4313      	orrs	r3, r2
 800958a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	693a      	ldr	r2, [r7, #16]
 8009594:	4313      	orrs	r3, r2
 8009596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	693a      	ldr	r2, [r7, #16]
 800959c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	685a      	ldr	r2, [r3, #4]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	621a      	str	r2, [r3, #32]
}
 80095b2:	bf00      	nop
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	40012c00 	.word	0x40012c00
 80095c4:	40013400 	.word	0x40013400
 80095c8:	40014000 	.word	0x40014000
 80095cc:	40014400 	.word	0x40014400
 80095d0:	40014800 	.word	0x40014800

080095d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b087      	sub	sp, #28
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a1b      	ldr	r3, [r3, #32]
 80095e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f023 0303 	bic.w	r3, r3, #3
 800960e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	4313      	orrs	r3, r2
 8009618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	021b      	lsls	r3, r3, #8
 8009628:	697a      	ldr	r2, [r7, #20]
 800962a:	4313      	orrs	r3, r2
 800962c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <TIM_OC3_SetConfig+0xfc>)
 8009632:	4293      	cmp	r3, r2
 8009634:	d003      	beq.n	800963e <TIM_OC3_SetConfig+0x6a>
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	4a26      	ldr	r2, [pc, #152]	; (80096d4 <TIM_OC3_SetConfig+0x100>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d10d      	bne.n	800965a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009644:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	68db      	ldr	r3, [r3, #12]
 800964a:	021b      	lsls	r3, r3, #8
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009658:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a1c      	ldr	r2, [pc, #112]	; (80096d0 <TIM_OC3_SetConfig+0xfc>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d00f      	beq.n	8009682 <TIM_OC3_SetConfig+0xae>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a1b      	ldr	r2, [pc, #108]	; (80096d4 <TIM_OC3_SetConfig+0x100>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00b      	beq.n	8009682 <TIM_OC3_SetConfig+0xae>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a1a      	ldr	r2, [pc, #104]	; (80096d8 <TIM_OC3_SetConfig+0x104>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d007      	beq.n	8009682 <TIM_OC3_SetConfig+0xae>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a19      	ldr	r2, [pc, #100]	; (80096dc <TIM_OC3_SetConfig+0x108>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d003      	beq.n	8009682 <TIM_OC3_SetConfig+0xae>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a18      	ldr	r2, [pc, #96]	; (80096e0 <TIM_OC3_SetConfig+0x10c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d113      	bne.n	80096aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009682:	693b      	ldr	r3, [r7, #16]
 8009684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009688:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009690:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	695b      	ldr	r3, [r3, #20]
 8009696:	011b      	lsls	r3, r3, #4
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	4313      	orrs	r3, r2
 800969c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	699b      	ldr	r3, [r3, #24]
 80096a2:	011b      	lsls	r3, r3, #4
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	697a      	ldr	r2, [r7, #20]
 80096c2:	621a      	str	r2, [r3, #32]
}
 80096c4:	bf00      	nop
 80096c6:	371c      	adds	r7, #28
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr
 80096d0:	40012c00 	.word	0x40012c00
 80096d4:	40013400 	.word	0x40013400
 80096d8:	40014000 	.word	0x40014000
 80096dc:	40014400 	.word	0x40014400
 80096e0:	40014800 	.word	0x40014800

080096e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b087      	sub	sp, #28
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6a1b      	ldr	r3, [r3, #32]
 80096fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	69db      	ldr	r3, [r3, #28]
 800970a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009712:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009716:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800971e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	021b      	lsls	r3, r3, #8
 8009726:	68fa      	ldr	r2, [r7, #12]
 8009728:	4313      	orrs	r3, r2
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009732:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	031b      	lsls	r3, r3, #12
 800973a:	697a      	ldr	r2, [r7, #20]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	4a28      	ldr	r2, [pc, #160]	; (80097e4 <TIM_OC4_SetConfig+0x100>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d003      	beq.n	8009750 <TIM_OC4_SetConfig+0x6c>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	4a27      	ldr	r2, [pc, #156]	; (80097e8 <TIM_OC4_SetConfig+0x104>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d10d      	bne.n	800976c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009756:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	031b      	lsls	r3, r3, #12
 800975e:	697a      	ldr	r2, [r7, #20]
 8009760:	4313      	orrs	r3, r2
 8009762:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800976a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a1d      	ldr	r2, [pc, #116]	; (80097e4 <TIM_OC4_SetConfig+0x100>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d00f      	beq.n	8009794 <TIM_OC4_SetConfig+0xb0>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a1c      	ldr	r2, [pc, #112]	; (80097e8 <TIM_OC4_SetConfig+0x104>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00b      	beq.n	8009794 <TIM_OC4_SetConfig+0xb0>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a1b      	ldr	r2, [pc, #108]	; (80097ec <TIM_OC4_SetConfig+0x108>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d007      	beq.n	8009794 <TIM_OC4_SetConfig+0xb0>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a1a      	ldr	r2, [pc, #104]	; (80097f0 <TIM_OC4_SetConfig+0x10c>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d003      	beq.n	8009794 <TIM_OC4_SetConfig+0xb0>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a19      	ldr	r2, [pc, #100]	; (80097f4 <TIM_OC4_SetConfig+0x110>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d113      	bne.n	80097bc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800979a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80097a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	695b      	ldr	r3, [r3, #20]
 80097a8:	019b      	lsls	r3, r3, #6
 80097aa:	693a      	ldr	r2, [r7, #16]
 80097ac:	4313      	orrs	r3, r2
 80097ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	699b      	ldr	r3, [r3, #24]
 80097b4:	019b      	lsls	r3, r3, #6
 80097b6:	693a      	ldr	r2, [r7, #16]
 80097b8:	4313      	orrs	r3, r2
 80097ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	693a      	ldr	r2, [r7, #16]
 80097c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	685a      	ldr	r2, [r3, #4]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	697a      	ldr	r2, [r7, #20]
 80097d4:	621a      	str	r2, [r3, #32]
}
 80097d6:	bf00      	nop
 80097d8:	371c      	adds	r7, #28
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr
 80097e2:	bf00      	nop
 80097e4:	40012c00 	.word	0x40012c00
 80097e8:	40013400 	.word	0x40013400
 80097ec:	40014000 	.word	0x40014000
 80097f0:	40014400 	.word	0x40014400
 80097f4:	40014800 	.word	0x40014800

080097f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	6a1b      	ldr	r3, [r3, #32]
 8009812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800982a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	4313      	orrs	r3, r2
 8009834:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800983c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	689b      	ldr	r3, [r3, #8]
 8009842:	041b      	lsls	r3, r3, #16
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4313      	orrs	r3, r2
 8009848:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4a17      	ldr	r2, [pc, #92]	; (80098ac <TIM_OC5_SetConfig+0xb4>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d00f      	beq.n	8009872 <TIM_OC5_SetConfig+0x7a>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	4a16      	ldr	r2, [pc, #88]	; (80098b0 <TIM_OC5_SetConfig+0xb8>)
 8009856:	4293      	cmp	r3, r2
 8009858:	d00b      	beq.n	8009872 <TIM_OC5_SetConfig+0x7a>
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	4a15      	ldr	r2, [pc, #84]	; (80098b4 <TIM_OC5_SetConfig+0xbc>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d007      	beq.n	8009872 <TIM_OC5_SetConfig+0x7a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a14      	ldr	r2, [pc, #80]	; (80098b8 <TIM_OC5_SetConfig+0xc0>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d003      	beq.n	8009872 <TIM_OC5_SetConfig+0x7a>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a13      	ldr	r2, [pc, #76]	; (80098bc <TIM_OC5_SetConfig+0xc4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d109      	bne.n	8009886 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009872:	697b      	ldr	r3, [r7, #20]
 8009874:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009878:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	021b      	lsls	r3, r3, #8
 8009880:	697a      	ldr	r2, [r7, #20]
 8009882:	4313      	orrs	r3, r2
 8009884:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	68fa      	ldr	r2, [r7, #12]
 8009890:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685a      	ldr	r2, [r3, #4]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	693a      	ldr	r2, [r7, #16]
 800989e:	621a      	str	r2, [r3, #32]
}
 80098a0:	bf00      	nop
 80098a2:	371c      	adds	r7, #28
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr
 80098ac:	40012c00 	.word	0x40012c00
 80098b0:	40013400 	.word	0x40013400
 80098b4:	40014000 	.word	0x40014000
 80098b8:	40014400 	.word	0x40014400
 80098bc:	40014800 	.word	0x40014800

080098c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6a1b      	ldr	r3, [r3, #32]
 80098ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a1b      	ldr	r3, [r3, #32]
 80098da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	021b      	lsls	r3, r3, #8
 80098fa:	68fa      	ldr	r2, [r7, #12]
 80098fc:	4313      	orrs	r3, r2
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009906:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	051b      	lsls	r3, r3, #20
 800990e:	693a      	ldr	r2, [r7, #16]
 8009910:	4313      	orrs	r3, r2
 8009912:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	4a18      	ldr	r2, [pc, #96]	; (8009978 <TIM_OC6_SetConfig+0xb8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d00f      	beq.n	800993c <TIM_OC6_SetConfig+0x7c>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	4a17      	ldr	r2, [pc, #92]	; (800997c <TIM_OC6_SetConfig+0xbc>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00b      	beq.n	800993c <TIM_OC6_SetConfig+0x7c>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	4a16      	ldr	r2, [pc, #88]	; (8009980 <TIM_OC6_SetConfig+0xc0>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d007      	beq.n	800993c <TIM_OC6_SetConfig+0x7c>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a15      	ldr	r2, [pc, #84]	; (8009984 <TIM_OC6_SetConfig+0xc4>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d003      	beq.n	800993c <TIM_OC6_SetConfig+0x7c>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	4a14      	ldr	r2, [pc, #80]	; (8009988 <TIM_OC6_SetConfig+0xc8>)
 8009938:	4293      	cmp	r3, r2
 800993a:	d109      	bne.n	8009950 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009942:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	695b      	ldr	r3, [r3, #20]
 8009948:	029b      	lsls	r3, r3, #10
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	4313      	orrs	r3, r2
 800994e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	697a      	ldr	r2, [r7, #20]
 8009954:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	685a      	ldr	r2, [r3, #4]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	693a      	ldr	r2, [r7, #16]
 8009968:	621a      	str	r2, [r3, #32]
}
 800996a:	bf00      	nop
 800996c:	371c      	adds	r7, #28
 800996e:	46bd      	mov	sp, r7
 8009970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	40012c00 	.word	0x40012c00
 800997c:	40013400 	.word	0x40013400
 8009980:	40014000 	.word	0x40014000
 8009984:	40014400 	.word	0x40014400
 8009988:	40014800 	.word	0x40014800

0800998c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	689b      	ldr	r3, [r3, #8]
 800999c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80099a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099a8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	697a      	ldr	r2, [r7, #20]
 80099b0:	4313      	orrs	r3, r2
 80099b2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80099b4:	697b      	ldr	r3, [r7, #20]
 80099b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099ba:	f023 0307 	bic.w	r3, r3, #7
 80099be:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	697a      	ldr	r2, [r7, #20]
 80099c6:	4313      	orrs	r3, r2
 80099c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	685b      	ldr	r3, [r3, #4]
 80099d6:	2b60      	cmp	r3, #96	; 0x60
 80099d8:	d06d      	beq.n	8009ab6 <TIM_SlaveTimer_SetConfig+0x12a>
 80099da:	2b60      	cmp	r3, #96	; 0x60
 80099dc:	d80f      	bhi.n	80099fe <TIM_SlaveTimer_SetConfig+0x72>
 80099de:	2b20      	cmp	r3, #32
 80099e0:	d073      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 80099e2:	2b20      	cmp	r3, #32
 80099e4:	d804      	bhi.n	80099f0 <TIM_SlaveTimer_SetConfig+0x64>
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d06f      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 80099ea:	2b10      	cmp	r3, #16
 80099ec:	d06d      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 80099ee:	e06d      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 80099f0:	2b40      	cmp	r3, #64	; 0x40
 80099f2:	d028      	beq.n	8009a46 <TIM_SlaveTimer_SetConfig+0xba>
 80099f4:	2b50      	cmp	r3, #80	; 0x50
 80099f6:	d054      	beq.n	8009aa2 <TIM_SlaveTimer_SetConfig+0x116>
 80099f8:	2b30      	cmp	r3, #48	; 0x30
 80099fa:	d066      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 80099fc:	e066      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 80099fe:	4a36      	ldr	r2, [pc, #216]	; (8009ad8 <TIM_SlaveTimer_SetConfig+0x14c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d062      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a04:	4a34      	ldr	r2, [pc, #208]	; (8009ad8 <TIM_SlaveTimer_SetConfig+0x14c>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d808      	bhi.n	8009a1c <TIM_SlaveTimer_SetConfig+0x90>
 8009a0a:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009a0e:	d05c      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a10:	4a32      	ldr	r2, [pc, #200]	; (8009adc <TIM_SlaveTimer_SetConfig+0x150>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d059      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a16:	2b70      	cmp	r3, #112	; 0x70
 8009a18:	d00a      	beq.n	8009a30 <TIM_SlaveTimer_SetConfig+0xa4>
      break;
 8009a1a:	e057      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
  switch (sSlaveConfig->InputTrigger)
 8009a1c:	4a30      	ldr	r2, [pc, #192]	; (8009ae0 <TIM_SlaveTimer_SetConfig+0x154>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d053      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a22:	4a30      	ldr	r2, [pc, #192]	; (8009ae4 <TIM_SlaveTimer_SetConfig+0x158>)
 8009a24:	4293      	cmp	r3, r2
 8009a26:	d050      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
 8009a28:	4a2f      	ldr	r2, [pc, #188]	; (8009ae8 <TIM_SlaveTimer_SetConfig+0x15c>)
 8009a2a:	4293      	cmp	r3, r2
 8009a2c:	d04d      	beq.n	8009aca <TIM_SlaveTimer_SetConfig+0x13e>
      break;
 8009a2e:	e04d      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      TIM_ETR_SetConfig(htim->Instance,
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6818      	ldr	r0, [r3, #0]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	68d9      	ldr	r1, [r3, #12]
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	f000 f8b3 	bl	8009baa <TIM_ETR_SetConfig>
      break;
 8009a44:	e042      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2b05      	cmp	r3, #5
 8009a4c:	d004      	beq.n	8009a58 <TIM_SlaveTimer_SetConfig+0xcc>
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8009a56:	d101      	bne.n	8009a5c <TIM_SlaveTimer_SetConfig+0xd0>
        return HAL_ERROR;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e038      	b.n	8009ace <TIM_SlaveTimer_SetConfig+0x142>
      tmpccer = htim->Instance->CCER;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	6a1b      	ldr	r3, [r3, #32]
 8009a62:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	6a1a      	ldr	r2, [r3, #32]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f022 0201 	bic.w	r2, r2, #1
 8009a72:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	699b      	ldr	r3, [r3, #24]
 8009a7a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009a82:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	68fa      	ldr	r2, [r7, #12]
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68fa      	ldr	r2, [r7, #12]
 8009a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	693a      	ldr	r2, [r7, #16]
 8009a9e:	621a      	str	r2, [r3, #32]
      break;
 8009aa0:	e014      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6818      	ldr	r0, [r3, #0]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	6899      	ldr	r1, [r3, #8]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	691b      	ldr	r3, [r3, #16]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f000 f81c 	bl	8009aec <TIM_TI1_ConfigInputStage>
      break;
 8009ab4:	e00a      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6818      	ldr	r0, [r3, #0]
 8009aba:	683b      	ldr	r3, [r7, #0]
 8009abc:	6899      	ldr	r1, [r3, #8]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f000 f841 	bl	8009b4a <TIM_TI2_ConfigInputStage>
      break;
 8009ac8:	e000      	b.n	8009acc <TIM_SlaveTimer_SetConfig+0x140>
      break;
 8009aca:	bf00      	nop
  }
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3718      	adds	r7, #24
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	00100030 	.word	0x00100030
 8009adc:	00100020 	.word	0x00100020
 8009ae0:	00100060 	.word	0x00100060
 8009ae4:	00100070 	.word	0x00100070
 8009ae8:	00100040 	.word	0x00100040

08009aec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b087      	sub	sp, #28
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	60f8      	str	r0, [r7, #12]
 8009af4:	60b9      	str	r1, [r7, #8]
 8009af6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	f023 0201 	bic.w	r2, r3, #1
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	699b      	ldr	r3, [r3, #24]
 8009b0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b10:	693b      	ldr	r3, [r7, #16]
 8009b12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009b22:	697b      	ldr	r3, [r7, #20]
 8009b24:	f023 030a 	bic.w	r3, r3, #10
 8009b28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	697a      	ldr	r2, [r7, #20]
 8009b3c:	621a      	str	r2, [r3, #32]
}
 8009b3e:	bf00      	nop
 8009b40:	371c      	adds	r7, #28
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr

08009b4a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009b4a:	b480      	push	{r7}
 8009b4c:	b087      	sub	sp, #28
 8009b4e:	af00      	add	r7, sp, #0
 8009b50:	60f8      	str	r0, [r7, #12]
 8009b52:	60b9      	str	r1, [r7, #8]
 8009b54:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6a1b      	ldr	r3, [r3, #32]
 8009b5a:	f023 0210 	bic.w	r2, r3, #16
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	699b      	ldr	r3, [r3, #24]
 8009b66:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	6a1b      	ldr	r3, [r3, #32]
 8009b6c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009b74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	031b      	lsls	r3, r3, #12
 8009b7a:	697a      	ldr	r2, [r7, #20]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009b86:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	693a      	ldr	r2, [r7, #16]
 8009b8e:	4313      	orrs	r3, r2
 8009b90:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	697a      	ldr	r2, [r7, #20]
 8009b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	693a      	ldr	r2, [r7, #16]
 8009b9c:	621a      	str	r2, [r3, #32]
}
 8009b9e:	bf00      	nop
 8009ba0:	371c      	adds	r7, #28
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba8:	4770      	bx	lr

08009baa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009baa:	b480      	push	{r7}
 8009bac:	b087      	sub	sp, #28
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	60f8      	str	r0, [r7, #12]
 8009bb2:	60b9      	str	r1, [r7, #8]
 8009bb4:	607a      	str	r2, [r7, #4]
 8009bb6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009bbe:	697b      	ldr	r3, [r7, #20]
 8009bc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009bc4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	021a      	lsls	r2, r3, #8
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	431a      	orrs	r2, r3
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	697a      	ldr	r2, [r7, #20]
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	697a      	ldr	r2, [r7, #20]
 8009bdc:	609a      	str	r2, [r3, #8]
}
 8009bde:	bf00      	nop
 8009be0:	371c      	adds	r7, #28
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr
	...

08009bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bfc:	2b01      	cmp	r3, #1
 8009bfe:	d101      	bne.n	8009c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009c00:	2302      	movs	r3, #2
 8009c02:	e047      	b.n	8009c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2201      	movs	r2, #1
 8009c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	4a1d      	ldr	r2, [pc, #116]	; (8009ca0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d004      	beq.n	8009c38 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	4a1c      	ldr	r2, [pc, #112]	; (8009ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d108      	bne.n	8009c4a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009c3e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	68fa      	ldr	r2, [r7, #12]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68fa      	ldr	r2, [r7, #12]
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c66:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	68fa      	ldr	r2, [r7, #12]
 8009c78:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	68ba      	ldr	r2, [r7, #8]
 8009c80:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c92:	2300      	movs	r3, #0
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr
 8009ca0:	40012c00 	.word	0x40012c00
 8009ca4:	40013400 	.word	0x40013400

08009ca8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009ca8:	b480      	push	{r7}
 8009caa:	b085      	sub	sp, #20
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d101      	bne.n	8009cc4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009cc0:	2302      	movs	r3, #2
 8009cc2:	e087      	b.n	8009dd4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2201      	movs	r2, #1
 8009cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	689b      	ldr	r3, [r3, #8]
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4313      	orrs	r3, r2
 8009d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	691b      	ldr	r3, [r3, #16]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	695b      	ldr	r3, [r3, #20]
 8009d1c:	4313      	orrs	r3, r2
 8009d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	699b      	ldr	r3, [r3, #24]
 8009d38:	041b      	lsls	r3, r3, #16
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	4a27      	ldr	r2, [pc, #156]	; (8009de0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d004      	beq.n	8009d52 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a25      	ldr	r2, [pc, #148]	; (8009de4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d106      	bne.n	8009d60 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	69db      	ldr	r3, [r3, #28]
 8009d5c:	4313      	orrs	r3, r2
 8009d5e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4a1e      	ldr	r2, [pc, #120]	; (8009de0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d004      	beq.n	8009d74 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	4a1d      	ldr	r2, [pc, #116]	; (8009de4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	d126      	bne.n	8009dc2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7e:	051b      	lsls	r3, r3, #20
 8009d80:	4313      	orrs	r3, r2
 8009d82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	6a1b      	ldr	r3, [r3, #32]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	4a0e      	ldr	r2, [pc, #56]	; (8009de0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009da6:	4293      	cmp	r3, r2
 8009da8:	d004      	beq.n	8009db4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a0d      	ldr	r2, [pc, #52]	; (8009de4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d106      	bne.n	8009dc2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3714      	adds	r7, #20
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr
 8009de0:	40012c00 	.word	0x40012c00
 8009de4:	40013400 	.word	0x40013400

08009de8 <HAL_TIMEx_ConfigBreakInput>:
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)

{
 8009de8:	b480      	push	{r7}
 8009dea:	b08b      	sub	sp, #44	; 0x2c
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d101      	bne.n	8009e02 <HAL_TIMEx_ConfigBreakInput+0x1a>
 8009dfe:	2302      	movs	r3, #2
 8009e00:	e0bc      	b.n	8009f7c <HAL_TIMEx_ConfigBreakInput+0x194>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	2201      	movs	r2, #1
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (sBreakInputConfig->Source)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	2b0f      	cmp	r3, #15
 8009e12:	d855      	bhi.n	8009ec0 <HAL_TIMEx_ConfigBreakInput+0xd8>
 8009e14:	a201      	add	r2, pc, #4	; (adr r2, 8009e1c <HAL_TIMEx_ConfigBreakInput+0x34>)
 8009e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e1a:	bf00      	nop
 8009e1c:	08009e5d 	.word	0x08009e5d
 8009e20:	08009e71 	.word	0x08009e71
 8009e24:	08009ec1 	.word	0x08009ec1
 8009e28:	08009e85 	.word	0x08009e85
 8009e2c:	08009ec1 	.word	0x08009ec1
 8009e30:	08009ec1 	.word	0x08009ec1
 8009e34:	08009ec1 	.word	0x08009ec1
 8009e38:	08009e99 	.word	0x08009e99
 8009e3c:	08009ec1 	.word	0x08009ec1
 8009e40:	08009ec1 	.word	0x08009ec1
 8009e44:	08009ec1 	.word	0x08009ec1
 8009e48:	08009ec1 	.word	0x08009ec1
 8009e4c:	08009ec1 	.word	0x08009ec1
 8009e50:	08009ec1 	.word	0x08009ec1
 8009e54:	08009ec1 	.word	0x08009ec1
 8009e58:	08009ead 	.word	0x08009ead
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8009e60:	2300      	movs	r3, #0
 8009e62:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8009e64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e68:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 8009e6a:	2309      	movs	r3, #9
 8009e6c:	61bb      	str	r3, [r7, #24]
      break;
 8009e6e:	e030      	b.n	8009ed2 <HAL_TIMEx_ConfigBreakInput+0xea>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 8009e70:	2302      	movs	r3, #2
 8009e72:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8009e74:	2301      	movs	r3, #1
 8009e76:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8009e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e7c:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8009e7e:	230a      	movs	r3, #10
 8009e80:	61bb      	str	r3, [r7, #24]
      break;
 8009e82:	e026      	b.n	8009ed2 <HAL_TIMEx_ConfigBreakInput+0xea>
    }
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 8009e84:	2304      	movs	r3, #4
 8009e86:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8009e88:	2302      	movs	r3, #2
 8009e8a:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8009e8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009e90:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8009e92:	230b      	movs	r3, #11
 8009e94:	61bb      	str	r3, [r7, #24]
      break;
 8009e96:	e01c      	b.n	8009ed2 <HAL_TIMEx_ConfigBreakInput+0xea>
    }
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 8009e98:	2308      	movs	r3, #8
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 8009e9c:	2303      	movs	r3, #3
 8009e9e:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 8009ea0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ea4:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	61bb      	str	r3, [r7, #24]
      break;
 8009eaa:	e012      	b.n	8009ed2 <HAL_TIMEx_ConfigBreakInput+0xea>
    }
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 8009eac:	2310      	movs	r3, #16
 8009eae:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 8009eb0:	2304      	movs	r3, #4
 8009eb2:	61fb      	str	r3, [r7, #28]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 8009eb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009eb8:	623b      	str	r3, [r7, #32]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 8009eba:	230d      	movs	r3, #13
 8009ebc:	61bb      	str	r3, [r7, #24]
      break;
 8009ebe:	e008      	b.n	8009ed2 <HAL_TIMEx_ConfigBreakInput+0xea>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 8009ec0:	2300      	movs	r3, #0
 8009ec2:	627b      	str	r3, [r7, #36]	; 0x24
      bkin_polarity_mask = 0U;
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = 0U;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	61bb      	str	r3, [r7, #24]
      break;
 8009ed0:	bf00      	nop
    }
  }

  switch (BreakInput)
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d002      	beq.n	8009ede <HAL_TIMEx_ConfigBreakInput+0xf6>
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	d025      	beq.n	8009f28 <HAL_TIMEx_ConfigBreakInput+0x140>
      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
      break;
    }
    default:
      break;
 8009edc:	e049      	b.n	8009f72 <HAL_TIMEx_ConfigBreakInput+0x18a>
      tmporx = htim->Instance->AF1;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ee4:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee8:	43db      	mvns	r3, r3
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	4013      	ands	r3, r2
 8009eee:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	685a      	ldr	r2, [r3, #4]
 8009ef4:	69fb      	ldr	r3, [r7, #28]
 8009ef6:	409a      	lsls	r2, r3
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	4013      	ands	r3, r2
 8009efc:	697a      	ldr	r2, [r7, #20]
 8009efe:	4313      	orrs	r3, r2
 8009f00:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8009f02:	6a3b      	ldr	r3, [r7, #32]
 8009f04:	43db      	mvns	r3, r3
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	4013      	ands	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689a      	ldr	r2, [r3, #8]
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	409a      	lsls	r2, r3
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	4013      	ands	r3, r2
 8009f18:	697a      	ldr	r2, [r7, #20]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	617b      	str	r3, [r7, #20]
      htim->Instance->AF1 = tmporx;
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 8009f26:	e024      	b.n	8009f72 <HAL_TIMEx_ConfigBreakInput+0x18a>
      tmporx = htim->Instance->AF2;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009f2e:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_enable_mask;
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	43db      	mvns	r3, r3
 8009f34:	697a      	ldr	r2, [r7, #20]
 8009f36:	4013      	ands	r3, r2
 8009f38:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	685a      	ldr	r2, [r3, #4]
 8009f3e:	69fb      	ldr	r3, [r7, #28]
 8009f40:	409a      	lsls	r2, r3
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	4013      	ands	r3, r2
 8009f46:	697a      	ldr	r2, [r7, #20]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	617b      	str	r3, [r7, #20]
      tmporx &= ~bkin_polarity_mask;
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	43db      	mvns	r3, r3
 8009f50:	697a      	ldr	r2, [r7, #20]
 8009f52:	4013      	ands	r3, r2
 8009f54:	617b      	str	r3, [r7, #20]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	689a      	ldr	r2, [r3, #8]
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	409a      	lsls	r2, r3
 8009f5e:	6a3b      	ldr	r3, [r7, #32]
 8009f60:	4013      	ands	r3, r2
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	617b      	str	r3, [r7, #20]
      htim->Instance->AF2 = tmporx;
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8009f70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	372c      	adds	r7, #44	; 0x2c
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e042      	b.n	800a020 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d106      	bne.n	8009fb2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f7f9 ff41 	bl	8003e34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2224      	movs	r2, #36	; 0x24
 8009fb6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f022 0201 	bic.w	r2, r2, #1
 8009fc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f82c 	bl	800a028 <UART_SetConfig>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d101      	bne.n	8009fda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	e022      	b.n	800a020 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d002      	beq.n	8009fe8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 f9da 	bl	800b39c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	685a      	ldr	r2, [r3, #4]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ff6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a006:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f042 0201 	orr.w	r2, r2, #1
 800a016:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 fa61 	bl	800b4e0 <UART_CheckIdleState>
 800a01e:	4603      	mov	r3, r0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a028:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a02c:	b08a      	sub	sp, #40	; 0x28
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a032:	2300      	movs	r3, #0
 800a034:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a036:	2300      	movs	r3, #0
 800a038:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800a03a:	2300      	movs	r3, #0
 800a03c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	431a      	orrs	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	431a      	orrs	r2, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	69db      	ldr	r3, [r3, #28]
 800a052:	4313      	orrs	r3, r2
 800a054:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a05a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a05c:	4313      	orrs	r3, r2
 800a05e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	681a      	ldr	r2, [r3, #0]
 800a066:	4ba4      	ldr	r3, [pc, #656]	; (800a2f8 <UART_SetConfig+0x2d0>)
 800a068:	4013      	ands	r3, r2
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	6812      	ldr	r2, [r2, #0]
 800a06e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a070:	430b      	orrs	r3, r1
 800a072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	68da      	ldr	r2, [r3, #12]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	430a      	orrs	r2, r1
 800a088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	699b      	ldr	r3, [r3, #24]
 800a08e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a99      	ldr	r2, [pc, #612]	; (800a2fc <UART_SetConfig+0x2d4>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d004      	beq.n	800a0a4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a1b      	ldr	r3, [r3, #32]
 800a09e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0a0:	4313      	orrs	r3, r2
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a0ae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	6812      	ldr	r2, [r2, #0]
 800a0b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a0b8:	430b      	orrs	r3, r1
 800a0ba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0c2:	f023 010f 	bic.w	r1, r3, #15
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a8a      	ldr	r2, [pc, #552]	; (800a300 <UART_SetConfig+0x2d8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d126      	bne.n	800a12a <UART_SetConfig+0x102>
 800a0dc:	4b89      	ldr	r3, [pc, #548]	; (800a304 <UART_SetConfig+0x2dc>)
 800a0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d81a      	bhi.n	800a120 <UART_SetConfig+0xf8>
 800a0ea:	a201      	add	r2, pc, #4	; (adr r2, 800a0f0 <UART_SetConfig+0xc8>)
 800a0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f0:	0800a101 	.word	0x0800a101
 800a0f4:	0800a111 	.word	0x0800a111
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a119 	.word	0x0800a119
 800a100:	2301      	movs	r3, #1
 800a102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a106:	e0d6      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a108:	2302      	movs	r3, #2
 800a10a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a10e:	e0d2      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a110:	2304      	movs	r3, #4
 800a112:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a116:	e0ce      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a118:	2308      	movs	r3, #8
 800a11a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a11e:	e0ca      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a120:	2310      	movs	r3, #16
 800a122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a126:	bf00      	nop
 800a128:	e0c5      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4a76      	ldr	r2, [pc, #472]	; (800a308 <UART_SetConfig+0x2e0>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d138      	bne.n	800a1a6 <UART_SetConfig+0x17e>
 800a134:	4b73      	ldr	r3, [pc, #460]	; (800a304 <UART_SetConfig+0x2dc>)
 800a136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a13a:	f003 030c 	and.w	r3, r3, #12
 800a13e:	2b0c      	cmp	r3, #12
 800a140:	d82c      	bhi.n	800a19c <UART_SetConfig+0x174>
 800a142:	a201      	add	r2, pc, #4	; (adr r2, 800a148 <UART_SetConfig+0x120>)
 800a144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a148:	0800a17d 	.word	0x0800a17d
 800a14c:	0800a19d 	.word	0x0800a19d
 800a150:	0800a19d 	.word	0x0800a19d
 800a154:	0800a19d 	.word	0x0800a19d
 800a158:	0800a18d 	.word	0x0800a18d
 800a15c:	0800a19d 	.word	0x0800a19d
 800a160:	0800a19d 	.word	0x0800a19d
 800a164:	0800a19d 	.word	0x0800a19d
 800a168:	0800a185 	.word	0x0800a185
 800a16c:	0800a19d 	.word	0x0800a19d
 800a170:	0800a19d 	.word	0x0800a19d
 800a174:	0800a19d 	.word	0x0800a19d
 800a178:	0800a195 	.word	0x0800a195
 800a17c:	2300      	movs	r3, #0
 800a17e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a182:	e098      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a184:	2302      	movs	r3, #2
 800a186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a18a:	e094      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a18c:	2304      	movs	r3, #4
 800a18e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a192:	e090      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a194:	2308      	movs	r3, #8
 800a196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a19a:	e08c      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a19c:	2310      	movs	r3, #16
 800a19e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1a2:	bf00      	nop
 800a1a4:	e087      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a58      	ldr	r2, [pc, #352]	; (800a30c <UART_SetConfig+0x2e4>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d125      	bne.n	800a1fc <UART_SetConfig+0x1d4>
 800a1b0:	4b54      	ldr	r3, [pc, #336]	; (800a304 <UART_SetConfig+0x2dc>)
 800a1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a1b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a1ba:	2b10      	cmp	r3, #16
 800a1bc:	d011      	beq.n	800a1e2 <UART_SetConfig+0x1ba>
 800a1be:	2b10      	cmp	r3, #16
 800a1c0:	d802      	bhi.n	800a1c8 <UART_SetConfig+0x1a0>
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <UART_SetConfig+0x1aa>
 800a1c6:	e014      	b.n	800a1f2 <UART_SetConfig+0x1ca>
 800a1c8:	2b20      	cmp	r3, #32
 800a1ca:	d006      	beq.n	800a1da <UART_SetConfig+0x1b2>
 800a1cc:	2b30      	cmp	r3, #48	; 0x30
 800a1ce:	d00c      	beq.n	800a1ea <UART_SetConfig+0x1c2>
 800a1d0:	e00f      	b.n	800a1f2 <UART_SetConfig+0x1ca>
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1d8:	e06d      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a1da:	2302      	movs	r3, #2
 800a1dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1e0:	e069      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a1e2:	2304      	movs	r3, #4
 800a1e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1e8:	e065      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a1ea:	2308      	movs	r3, #8
 800a1ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1f0:	e061      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a1f2:	2310      	movs	r3, #16
 800a1f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a1f8:	bf00      	nop
 800a1fa:	e05c      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a43      	ldr	r2, [pc, #268]	; (800a310 <UART_SetConfig+0x2e8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d125      	bne.n	800a252 <UART_SetConfig+0x22a>
 800a206:	4b3f      	ldr	r3, [pc, #252]	; (800a304 <UART_SetConfig+0x2dc>)
 800a208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a20c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a210:	2b40      	cmp	r3, #64	; 0x40
 800a212:	d011      	beq.n	800a238 <UART_SetConfig+0x210>
 800a214:	2b40      	cmp	r3, #64	; 0x40
 800a216:	d802      	bhi.n	800a21e <UART_SetConfig+0x1f6>
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d005      	beq.n	800a228 <UART_SetConfig+0x200>
 800a21c:	e014      	b.n	800a248 <UART_SetConfig+0x220>
 800a21e:	2b80      	cmp	r3, #128	; 0x80
 800a220:	d006      	beq.n	800a230 <UART_SetConfig+0x208>
 800a222:	2bc0      	cmp	r3, #192	; 0xc0
 800a224:	d00c      	beq.n	800a240 <UART_SetConfig+0x218>
 800a226:	e00f      	b.n	800a248 <UART_SetConfig+0x220>
 800a228:	2300      	movs	r3, #0
 800a22a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a22e:	e042      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a230:	2302      	movs	r3, #2
 800a232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a236:	e03e      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a238:	2304      	movs	r3, #4
 800a23a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a23e:	e03a      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a240:	2308      	movs	r3, #8
 800a242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a246:	e036      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a248:	2310      	movs	r3, #16
 800a24a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a24e:	bf00      	nop
 800a250:	e031      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4a29      	ldr	r2, [pc, #164]	; (800a2fc <UART_SetConfig+0x2d4>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d129      	bne.n	800a2b0 <UART_SetConfig+0x288>
 800a25c:	4b29      	ldr	r3, [pc, #164]	; (800a304 <UART_SetConfig+0x2dc>)
 800a25e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a262:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a266:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a26a:	d014      	beq.n	800a296 <UART_SetConfig+0x26e>
 800a26c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a270:	d802      	bhi.n	800a278 <UART_SetConfig+0x250>
 800a272:	2b00      	cmp	r3, #0
 800a274:	d007      	beq.n	800a286 <UART_SetConfig+0x25e>
 800a276:	e016      	b.n	800a2a6 <UART_SetConfig+0x27e>
 800a278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a27c:	d007      	beq.n	800a28e <UART_SetConfig+0x266>
 800a27e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a282:	d00c      	beq.n	800a29e <UART_SetConfig+0x276>
 800a284:	e00f      	b.n	800a2a6 <UART_SetConfig+0x27e>
 800a286:	2300      	movs	r3, #0
 800a288:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a28c:	e013      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a28e:	2302      	movs	r3, #2
 800a290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a294:	e00f      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a296:	2304      	movs	r3, #4
 800a298:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a29c:	e00b      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a29e:	2308      	movs	r3, #8
 800a2a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2a4:	e007      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a2a6:	2310      	movs	r3, #16
 800a2a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a2ac:	bf00      	nop
 800a2ae:	e002      	b.n	800a2b6 <UART_SetConfig+0x28e>
 800a2b0:	2310      	movs	r3, #16
 800a2b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a10      	ldr	r2, [pc, #64]	; (800a2fc <UART_SetConfig+0x2d4>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	f040 842e 	bne.w	800ab1e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a2c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a2c6:	2b08      	cmp	r3, #8
 800a2c8:	f200 8169 	bhi.w	800a59e <UART_SetConfig+0x576>
 800a2cc:	a201      	add	r2, pc, #4	; (adr r2, 800a2d4 <UART_SetConfig+0x2ac>)
 800a2ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d2:	bf00      	nop
 800a2d4:	0800a315 	.word	0x0800a315
 800a2d8:	0800a59f 	.word	0x0800a59f
 800a2dc:	0800a3b7 	.word	0x0800a3b7
 800a2e0:	0800a59f 	.word	0x0800a59f
 800a2e4:	0800a44f 	.word	0x0800a44f
 800a2e8:	0800a59f 	.word	0x0800a59f
 800a2ec:	0800a59f 	.word	0x0800a59f
 800a2f0:	0800a59f 	.word	0x0800a59f
 800a2f4:	0800a4f1 	.word	0x0800a4f1
 800a2f8:	cfff69f3 	.word	0xcfff69f3
 800a2fc:	40008000 	.word	0x40008000
 800a300:	40013800 	.word	0x40013800
 800a304:	40021000 	.word	0x40021000
 800a308:	40004400 	.word	0x40004400
 800a30c:	40004800 	.word	0x40004800
 800a310:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a314:	f7fe fb06 	bl	8008924 <HAL_RCC_GetPCLK1Freq>
 800a318:	4602      	mov	r2, r0
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d044      	beq.n	800a3ac <UART_SetConfig+0x384>
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b01      	cmp	r3, #1
 800a328:	d03e      	beq.n	800a3a8 <UART_SetConfig+0x380>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a32e:	2b02      	cmp	r3, #2
 800a330:	d038      	beq.n	800a3a4 <UART_SetConfig+0x37c>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a336:	2b03      	cmp	r3, #3
 800a338:	d032      	beq.n	800a3a0 <UART_SetConfig+0x378>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b04      	cmp	r3, #4
 800a340:	d02c      	beq.n	800a39c <UART_SetConfig+0x374>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a346:	2b05      	cmp	r3, #5
 800a348:	d026      	beq.n	800a398 <UART_SetConfig+0x370>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a34e:	2b06      	cmp	r3, #6
 800a350:	d020      	beq.n	800a394 <UART_SetConfig+0x36c>
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a356:	2b07      	cmp	r3, #7
 800a358:	d01a      	beq.n	800a390 <UART_SetConfig+0x368>
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a35e:	2b08      	cmp	r3, #8
 800a360:	d014      	beq.n	800a38c <UART_SetConfig+0x364>
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a366:	2b09      	cmp	r3, #9
 800a368:	d00e      	beq.n	800a388 <UART_SetConfig+0x360>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a36e:	2b0a      	cmp	r3, #10
 800a370:	d008      	beq.n	800a384 <UART_SetConfig+0x35c>
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a376:	2b0b      	cmp	r3, #11
 800a378:	d102      	bne.n	800a380 <UART_SetConfig+0x358>
 800a37a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a37e:	e016      	b.n	800a3ae <UART_SetConfig+0x386>
 800a380:	2301      	movs	r3, #1
 800a382:	e014      	b.n	800a3ae <UART_SetConfig+0x386>
 800a384:	2380      	movs	r3, #128	; 0x80
 800a386:	e012      	b.n	800a3ae <UART_SetConfig+0x386>
 800a388:	2340      	movs	r3, #64	; 0x40
 800a38a:	e010      	b.n	800a3ae <UART_SetConfig+0x386>
 800a38c:	2320      	movs	r3, #32
 800a38e:	e00e      	b.n	800a3ae <UART_SetConfig+0x386>
 800a390:	2310      	movs	r3, #16
 800a392:	e00c      	b.n	800a3ae <UART_SetConfig+0x386>
 800a394:	230c      	movs	r3, #12
 800a396:	e00a      	b.n	800a3ae <UART_SetConfig+0x386>
 800a398:	230a      	movs	r3, #10
 800a39a:	e008      	b.n	800a3ae <UART_SetConfig+0x386>
 800a39c:	2308      	movs	r3, #8
 800a39e:	e006      	b.n	800a3ae <UART_SetConfig+0x386>
 800a3a0:	2306      	movs	r3, #6
 800a3a2:	e004      	b.n	800a3ae <UART_SetConfig+0x386>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	e002      	b.n	800a3ae <UART_SetConfig+0x386>
 800a3a8:	2302      	movs	r3, #2
 800a3aa:	e000      	b.n	800a3ae <UART_SetConfig+0x386>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3b2:	617b      	str	r3, [r7, #20]
        break;
 800a3b4:	e0f6      	b.n	800a5a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d044      	beq.n	800a448 <UART_SetConfig+0x420>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3c2:	2b01      	cmp	r3, #1
 800a3c4:	d03e      	beq.n	800a444 <UART_SetConfig+0x41c>
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	d038      	beq.n	800a440 <UART_SetConfig+0x418>
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3d2:	2b03      	cmp	r3, #3
 800a3d4:	d032      	beq.n	800a43c <UART_SetConfig+0x414>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3da:	2b04      	cmp	r3, #4
 800a3dc:	d02c      	beq.n	800a438 <UART_SetConfig+0x410>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	2b05      	cmp	r3, #5
 800a3e4:	d026      	beq.n	800a434 <UART_SetConfig+0x40c>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ea:	2b06      	cmp	r3, #6
 800a3ec:	d020      	beq.n	800a430 <UART_SetConfig+0x408>
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f2:	2b07      	cmp	r3, #7
 800a3f4:	d01a      	beq.n	800a42c <UART_SetConfig+0x404>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	2b08      	cmp	r3, #8
 800a3fc:	d014      	beq.n	800a428 <UART_SetConfig+0x400>
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a402:	2b09      	cmp	r3, #9
 800a404:	d00e      	beq.n	800a424 <UART_SetConfig+0x3fc>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40a:	2b0a      	cmp	r3, #10
 800a40c:	d008      	beq.n	800a420 <UART_SetConfig+0x3f8>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a412:	2b0b      	cmp	r3, #11
 800a414:	d102      	bne.n	800a41c <UART_SetConfig+0x3f4>
 800a416:	f24f 4324 	movw	r3, #62500	; 0xf424
 800a41a:	e016      	b.n	800a44a <UART_SetConfig+0x422>
 800a41c:	4ba1      	ldr	r3, [pc, #644]	; (800a6a4 <UART_SetConfig+0x67c>)
 800a41e:	e014      	b.n	800a44a <UART_SetConfig+0x422>
 800a420:	4ba1      	ldr	r3, [pc, #644]	; (800a6a8 <UART_SetConfig+0x680>)
 800a422:	e012      	b.n	800a44a <UART_SetConfig+0x422>
 800a424:	4ba1      	ldr	r3, [pc, #644]	; (800a6ac <UART_SetConfig+0x684>)
 800a426:	e010      	b.n	800a44a <UART_SetConfig+0x422>
 800a428:	4ba1      	ldr	r3, [pc, #644]	; (800a6b0 <UART_SetConfig+0x688>)
 800a42a:	e00e      	b.n	800a44a <UART_SetConfig+0x422>
 800a42c:	4ba1      	ldr	r3, [pc, #644]	; (800a6b4 <UART_SetConfig+0x68c>)
 800a42e:	e00c      	b.n	800a44a <UART_SetConfig+0x422>
 800a430:	4ba1      	ldr	r3, [pc, #644]	; (800a6b8 <UART_SetConfig+0x690>)
 800a432:	e00a      	b.n	800a44a <UART_SetConfig+0x422>
 800a434:	4ba1      	ldr	r3, [pc, #644]	; (800a6bc <UART_SetConfig+0x694>)
 800a436:	e008      	b.n	800a44a <UART_SetConfig+0x422>
 800a438:	4ba1      	ldr	r3, [pc, #644]	; (800a6c0 <UART_SetConfig+0x698>)
 800a43a:	e006      	b.n	800a44a <UART_SetConfig+0x422>
 800a43c:	4ba1      	ldr	r3, [pc, #644]	; (800a6c4 <UART_SetConfig+0x69c>)
 800a43e:	e004      	b.n	800a44a <UART_SetConfig+0x422>
 800a440:	4ba1      	ldr	r3, [pc, #644]	; (800a6c8 <UART_SetConfig+0x6a0>)
 800a442:	e002      	b.n	800a44a <UART_SetConfig+0x422>
 800a444:	4ba1      	ldr	r3, [pc, #644]	; (800a6cc <UART_SetConfig+0x6a4>)
 800a446:	e000      	b.n	800a44a <UART_SetConfig+0x422>
 800a448:	4b96      	ldr	r3, [pc, #600]	; (800a6a4 <UART_SetConfig+0x67c>)
 800a44a:	617b      	str	r3, [r7, #20]
        break;
 800a44c:	e0aa      	b.n	800a5a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a44e:	f7fe f9fb 	bl	8008848 <HAL_RCC_GetSysClockFreq>
 800a452:	4602      	mov	r2, r0
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d044      	beq.n	800a4e6 <UART_SetConfig+0x4be>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a460:	2b01      	cmp	r3, #1
 800a462:	d03e      	beq.n	800a4e2 <UART_SetConfig+0x4ba>
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a468:	2b02      	cmp	r3, #2
 800a46a:	d038      	beq.n	800a4de <UART_SetConfig+0x4b6>
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a470:	2b03      	cmp	r3, #3
 800a472:	d032      	beq.n	800a4da <UART_SetConfig+0x4b2>
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d02c      	beq.n	800a4d6 <UART_SetConfig+0x4ae>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a480:	2b05      	cmp	r3, #5
 800a482:	d026      	beq.n	800a4d2 <UART_SetConfig+0x4aa>
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	2b06      	cmp	r3, #6
 800a48a:	d020      	beq.n	800a4ce <UART_SetConfig+0x4a6>
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a490:	2b07      	cmp	r3, #7
 800a492:	d01a      	beq.n	800a4ca <UART_SetConfig+0x4a2>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a498:	2b08      	cmp	r3, #8
 800a49a:	d014      	beq.n	800a4c6 <UART_SetConfig+0x49e>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a0:	2b09      	cmp	r3, #9
 800a4a2:	d00e      	beq.n	800a4c2 <UART_SetConfig+0x49a>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	2b0a      	cmp	r3, #10
 800a4aa:	d008      	beq.n	800a4be <UART_SetConfig+0x496>
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	2b0b      	cmp	r3, #11
 800a4b2:	d102      	bne.n	800a4ba <UART_SetConfig+0x492>
 800a4b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a4b8:	e016      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e014      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4be:	2380      	movs	r3, #128	; 0x80
 800a4c0:	e012      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4c2:	2340      	movs	r3, #64	; 0x40
 800a4c4:	e010      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4c6:	2320      	movs	r3, #32
 800a4c8:	e00e      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4ca:	2310      	movs	r3, #16
 800a4cc:	e00c      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4ce:	230c      	movs	r3, #12
 800a4d0:	e00a      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4d2:	230a      	movs	r3, #10
 800a4d4:	e008      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4d6:	2308      	movs	r3, #8
 800a4d8:	e006      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4da:	2306      	movs	r3, #6
 800a4dc:	e004      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4de:	2304      	movs	r3, #4
 800a4e0:	e002      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	e000      	b.n	800a4e8 <UART_SetConfig+0x4c0>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ec:	617b      	str	r3, [r7, #20]
        break;
 800a4ee:	e059      	b.n	800a5a4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d04e      	beq.n	800a596 <UART_SetConfig+0x56e>
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fc:	2b01      	cmp	r3, #1
 800a4fe:	d047      	beq.n	800a590 <UART_SetConfig+0x568>
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	2b02      	cmp	r3, #2
 800a506:	d040      	beq.n	800a58a <UART_SetConfig+0x562>
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a50c:	2b03      	cmp	r3, #3
 800a50e:	d039      	beq.n	800a584 <UART_SetConfig+0x55c>
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a514:	2b04      	cmp	r3, #4
 800a516:	d032      	beq.n	800a57e <UART_SetConfig+0x556>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	2b05      	cmp	r3, #5
 800a51e:	d02b      	beq.n	800a578 <UART_SetConfig+0x550>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a524:	2b06      	cmp	r3, #6
 800a526:	d024      	beq.n	800a572 <UART_SetConfig+0x54a>
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52c:	2b07      	cmp	r3, #7
 800a52e:	d01d      	beq.n	800a56c <UART_SetConfig+0x544>
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	2b08      	cmp	r3, #8
 800a536:	d016      	beq.n	800a566 <UART_SetConfig+0x53e>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53c:	2b09      	cmp	r3, #9
 800a53e:	d00f      	beq.n	800a560 <UART_SetConfig+0x538>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	2b0a      	cmp	r3, #10
 800a546:	d008      	beq.n	800a55a <UART_SetConfig+0x532>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	2b0b      	cmp	r3, #11
 800a54e:	d101      	bne.n	800a554 <UART_SetConfig+0x52c>
 800a550:	2380      	movs	r3, #128	; 0x80
 800a552:	e022      	b.n	800a59a <UART_SetConfig+0x572>
 800a554:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a558:	e01f      	b.n	800a59a <UART_SetConfig+0x572>
 800a55a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a55e:	e01c      	b.n	800a59a <UART_SetConfig+0x572>
 800a560:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a564:	e019      	b.n	800a59a <UART_SetConfig+0x572>
 800a566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a56a:	e016      	b.n	800a59a <UART_SetConfig+0x572>
 800a56c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a570:	e013      	b.n	800a59a <UART_SetConfig+0x572>
 800a572:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800a576:	e010      	b.n	800a59a <UART_SetConfig+0x572>
 800a578:	f640 43cc 	movw	r3, #3276	; 0xccc
 800a57c:	e00d      	b.n	800a59a <UART_SetConfig+0x572>
 800a57e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a582:	e00a      	b.n	800a59a <UART_SetConfig+0x572>
 800a584:	f241 5355 	movw	r3, #5461	; 0x1555
 800a588:	e007      	b.n	800a59a <UART_SetConfig+0x572>
 800a58a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a58e:	e004      	b.n	800a59a <UART_SetConfig+0x572>
 800a590:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a594:	e001      	b.n	800a59a <UART_SetConfig+0x572>
 800a596:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a59a:	617b      	str	r3, [r7, #20]
        break;
 800a59c:	e002      	b.n	800a5a4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 800a59e:	2301      	movs	r3, #1
 800a5a0:	76fb      	strb	r3, [r7, #27]
        break;
 800a5a2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	f000 86cd 	beq.w	800b346 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	685a      	ldr	r2, [r3, #4]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	4413      	add	r3, r2
 800a5b6:	697a      	ldr	r2, [r7, #20]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d305      	bcc.n	800a5c8 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5c2:	697a      	ldr	r2, [r7, #20]
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d903      	bls.n	800a5d0 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 800a5c8:	2301      	movs	r3, #1
 800a5ca:	76fb      	strb	r3, [r7, #27]
 800a5cc:	f000 bebb 	b.w	800b346 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 800a5d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5d4:	2b08      	cmp	r3, #8
 800a5d6:	f200 828d 	bhi.w	800aaf4 <UART_SetConfig+0xacc>
 800a5da:	a201      	add	r2, pc, #4	; (adr r2, 800a5e0 <UART_SetConfig+0x5b8>)
 800a5dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e0:	0800a605 	.word	0x0800a605
 800a5e4:	0800aaf5 	.word	0x0800aaf5
 800a5e8:	0800a76f 	.word	0x0800a76f
 800a5ec:	0800aaf5 	.word	0x0800aaf5
 800a5f0:	0800a865 	.word	0x0800a865
 800a5f4:	0800aaf5 	.word	0x0800aaf5
 800a5f8:	0800aaf5 	.word	0x0800aaf5
 800a5fc:	0800aaf5 	.word	0x0800aaf5
 800a600:	0800a9a3 	.word	0x0800a9a3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a604:	f7fe f98e 	bl	8008924 <HAL_RCC_GetPCLK1Freq>
 800a608:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f04f 0100 	mov.w	r1, #0
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	2b00      	cmp	r3, #0
 800a618:	d07d      	beq.n	800a716 <UART_SetConfig+0x6ee>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d074      	beq.n	800a70c <UART_SetConfig+0x6e4>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a626:	2b02      	cmp	r3, #2
 800a628:	d06b      	beq.n	800a702 <UART_SetConfig+0x6da>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d062      	beq.n	800a6f8 <UART_SetConfig+0x6d0>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a636:	2b04      	cmp	r3, #4
 800a638:	d059      	beq.n	800a6ee <UART_SetConfig+0x6c6>
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	2b05      	cmp	r3, #5
 800a640:	d050      	beq.n	800a6e4 <UART_SetConfig+0x6bc>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	2b06      	cmp	r3, #6
 800a648:	d047      	beq.n	800a6da <UART_SetConfig+0x6b2>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	2b07      	cmp	r3, #7
 800a650:	d03e      	beq.n	800a6d0 <UART_SetConfig+0x6a8>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	2b08      	cmp	r3, #8
 800a658:	d01f      	beq.n	800a69a <UART_SetConfig+0x672>
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	2b09      	cmp	r3, #9
 800a660:	d016      	beq.n	800a690 <UART_SetConfig+0x668>
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a666:	2b0a      	cmp	r3, #10
 800a668:	d00d      	beq.n	800a686 <UART_SetConfig+0x65e>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a66e:	2b0b      	cmp	r3, #11
 800a670:	d104      	bne.n	800a67c <UART_SetConfig+0x654>
 800a672:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a676:	f04f 0400 	mov.w	r4, #0
 800a67a:	e050      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a67c:	f04f 0301 	mov.w	r3, #1
 800a680:	f04f 0400 	mov.w	r4, #0
 800a684:	e04b      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a686:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a68a:	f04f 0400 	mov.w	r4, #0
 800a68e:	e046      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a690:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a694:	f04f 0400 	mov.w	r4, #0
 800a698:	e041      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a69a:	f04f 0320 	mov.w	r3, #32
 800a69e:	f04f 0400 	mov.w	r4, #0
 800a6a2:	e03c      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a6a4:	00f42400 	.word	0x00f42400
 800a6a8:	0001e848 	.word	0x0001e848
 800a6ac:	0003d090 	.word	0x0003d090
 800a6b0:	0007a120 	.word	0x0007a120
 800a6b4:	000f4240 	.word	0x000f4240
 800a6b8:	00145855 	.word	0x00145855
 800a6bc:	00186a00 	.word	0x00186a00
 800a6c0:	001e8480 	.word	0x001e8480
 800a6c4:	0028b0aa 	.word	0x0028b0aa
 800a6c8:	003d0900 	.word	0x003d0900
 800a6cc:	007a1200 	.word	0x007a1200
 800a6d0:	f04f 0310 	mov.w	r3, #16
 800a6d4:	f04f 0400 	mov.w	r4, #0
 800a6d8:	e021      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a6da:	f04f 030c 	mov.w	r3, #12
 800a6de:	f04f 0400 	mov.w	r4, #0
 800a6e2:	e01c      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a6e4:	f04f 030a 	mov.w	r3, #10
 800a6e8:	f04f 0400 	mov.w	r4, #0
 800a6ec:	e017      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a6ee:	f04f 0308 	mov.w	r3, #8
 800a6f2:	f04f 0400 	mov.w	r4, #0
 800a6f6:	e012      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a6f8:	f04f 0306 	mov.w	r3, #6
 800a6fc:	f04f 0400 	mov.w	r4, #0
 800a700:	e00d      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a702:	f04f 0304 	mov.w	r3, #4
 800a706:	f04f 0400 	mov.w	r4, #0
 800a70a:	e008      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a70c:	f04f 0302 	mov.w	r3, #2
 800a710:	f04f 0400 	mov.w	r4, #0
 800a714:	e003      	b.n	800a71e <UART_SetConfig+0x6f6>
 800a716:	f04f 0301 	mov.w	r3, #1
 800a71a:	f04f 0400 	mov.w	r4, #0
 800a71e:	461a      	mov	r2, r3
 800a720:	4623      	mov	r3, r4
 800a722:	f7f5 fd79 	bl	8000218 <__aeabi_uldivmod>
 800a726:	4603      	mov	r3, r0
 800a728:	460c      	mov	r4, r1
 800a72a:	4619      	mov	r1, r3
 800a72c:	4622      	mov	r2, r4
 800a72e:	f04f 0300 	mov.w	r3, #0
 800a732:	f04f 0400 	mov.w	r4, #0
 800a736:	0214      	lsls	r4, r2, #8
 800a738:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a73c:	020b      	lsls	r3, r1, #8
 800a73e:	687a      	ldr	r2, [r7, #4]
 800a740:	6852      	ldr	r2, [r2, #4]
 800a742:	0852      	lsrs	r2, r2, #1
 800a744:	4611      	mov	r1, r2
 800a746:	f04f 0200 	mov.w	r2, #0
 800a74a:	eb13 0b01 	adds.w	fp, r3, r1
 800a74e:	eb44 0c02 	adc.w	ip, r4, r2
 800a752:	4658      	mov	r0, fp
 800a754:	4661      	mov	r1, ip
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	685b      	ldr	r3, [r3, #4]
 800a75a:	f04f 0400 	mov.w	r4, #0
 800a75e:	461a      	mov	r2, r3
 800a760:	4623      	mov	r3, r4
 800a762:	f7f5 fd59 	bl	8000218 <__aeabi_uldivmod>
 800a766:	4603      	mov	r3, r0
 800a768:	460c      	mov	r4, r1
 800a76a:	61fb      	str	r3, [r7, #28]
            break;
 800a76c:	e1c5      	b.n	800aafa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a772:	2b00      	cmp	r3, #0
 800a774:	d05b      	beq.n	800a82e <UART_SetConfig+0x806>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d053      	beq.n	800a826 <UART_SetConfig+0x7fe>
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a782:	2b02      	cmp	r3, #2
 800a784:	d04b      	beq.n	800a81e <UART_SetConfig+0x7f6>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d043      	beq.n	800a816 <UART_SetConfig+0x7ee>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a792:	2b04      	cmp	r3, #4
 800a794:	d03b      	beq.n	800a80e <UART_SetConfig+0x7e6>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a79a:	2b05      	cmp	r3, #5
 800a79c:	d033      	beq.n	800a806 <UART_SetConfig+0x7de>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a2:	2b06      	cmp	r3, #6
 800a7a4:	d02b      	beq.n	800a7fe <UART_SetConfig+0x7d6>
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7aa:	2b07      	cmp	r3, #7
 800a7ac:	d023      	beq.n	800a7f6 <UART_SetConfig+0x7ce>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b2:	2b08      	cmp	r3, #8
 800a7b4:	d01b      	beq.n	800a7ee <UART_SetConfig+0x7c6>
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ba:	2b09      	cmp	r3, #9
 800a7bc:	d013      	beq.n	800a7e6 <UART_SetConfig+0x7be>
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c2:	2b0a      	cmp	r3, #10
 800a7c4:	d00b      	beq.n	800a7de <UART_SetConfig+0x7b6>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ca:	2b0b      	cmp	r3, #11
 800a7cc:	d103      	bne.n	800a7d6 <UART_SetConfig+0x7ae>
 800a7ce:	4bae      	ldr	r3, [pc, #696]	; (800aa88 <UART_SetConfig+0xa60>)
 800a7d0:	f04f 0400 	mov.w	r4, #0
 800a7d4:	e02e      	b.n	800a834 <UART_SetConfig+0x80c>
 800a7d6:	4bad      	ldr	r3, [pc, #692]	; (800aa8c <UART_SetConfig+0xa64>)
 800a7d8:	f04f 0400 	mov.w	r4, #0
 800a7dc:	e02a      	b.n	800a834 <UART_SetConfig+0x80c>
 800a7de:	4bac      	ldr	r3, [pc, #688]	; (800aa90 <UART_SetConfig+0xa68>)
 800a7e0:	f04f 0400 	mov.w	r4, #0
 800a7e4:	e026      	b.n	800a834 <UART_SetConfig+0x80c>
 800a7e6:	4bab      	ldr	r3, [pc, #684]	; (800aa94 <UART_SetConfig+0xa6c>)
 800a7e8:	f04f 0400 	mov.w	r4, #0
 800a7ec:	e022      	b.n	800a834 <UART_SetConfig+0x80c>
 800a7ee:	4baa      	ldr	r3, [pc, #680]	; (800aa98 <UART_SetConfig+0xa70>)
 800a7f0:	f04f 0400 	mov.w	r4, #0
 800a7f4:	e01e      	b.n	800a834 <UART_SetConfig+0x80c>
 800a7f6:	4ba9      	ldr	r3, [pc, #676]	; (800aa9c <UART_SetConfig+0xa74>)
 800a7f8:	f04f 0400 	mov.w	r4, #0
 800a7fc:	e01a      	b.n	800a834 <UART_SetConfig+0x80c>
 800a7fe:	a49e      	add	r4, pc, #632	; (adr r4, 800aa78 <UART_SetConfig+0xa50>)
 800a800:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a804:	e016      	b.n	800a834 <UART_SetConfig+0x80c>
 800a806:	4ba6      	ldr	r3, [pc, #664]	; (800aaa0 <UART_SetConfig+0xa78>)
 800a808:	f04f 0400 	mov.w	r4, #0
 800a80c:	e012      	b.n	800a834 <UART_SetConfig+0x80c>
 800a80e:	4ba5      	ldr	r3, [pc, #660]	; (800aaa4 <UART_SetConfig+0xa7c>)
 800a810:	f04f 0400 	mov.w	r4, #0
 800a814:	e00e      	b.n	800a834 <UART_SetConfig+0x80c>
 800a816:	a49a      	add	r4, pc, #616	; (adr r4, 800aa80 <UART_SetConfig+0xa58>)
 800a818:	e9d4 3400 	ldrd	r3, r4, [r4]
 800a81c:	e00a      	b.n	800a834 <UART_SetConfig+0x80c>
 800a81e:	4ba2      	ldr	r3, [pc, #648]	; (800aaa8 <UART_SetConfig+0xa80>)
 800a820:	f04f 0400 	mov.w	r4, #0
 800a824:	e006      	b.n	800a834 <UART_SetConfig+0x80c>
 800a826:	4ba1      	ldr	r3, [pc, #644]	; (800aaac <UART_SetConfig+0xa84>)
 800a828:	f04f 0400 	mov.w	r4, #0
 800a82c:	e002      	b.n	800a834 <UART_SetConfig+0x80c>
 800a82e:	4b97      	ldr	r3, [pc, #604]	; (800aa8c <UART_SetConfig+0xa64>)
 800a830:	f04f 0400 	mov.w	r4, #0
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	6852      	ldr	r2, [r2, #4]
 800a838:	0852      	lsrs	r2, r2, #1
 800a83a:	4611      	mov	r1, r2
 800a83c:	f04f 0200 	mov.w	r2, #0
 800a840:	eb13 0b01 	adds.w	fp, r3, r1
 800a844:	eb44 0c02 	adc.w	ip, r4, r2
 800a848:	4658      	mov	r0, fp
 800a84a:	4661      	mov	r1, ip
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	f04f 0400 	mov.w	r4, #0
 800a854:	461a      	mov	r2, r3
 800a856:	4623      	mov	r3, r4
 800a858:	f7f5 fcde 	bl	8000218 <__aeabi_uldivmod>
 800a85c:	4603      	mov	r3, r0
 800a85e:	460c      	mov	r4, r1
 800a860:	61fb      	str	r3, [r7, #28]
            break;
 800a862:	e14a      	b.n	800aafa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800a864:	f7fd fff0 	bl	8008848 <HAL_RCC_GetSysClockFreq>
 800a868:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f04f 0100 	mov.w	r1, #0
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a876:	2b00      	cmp	r3, #0
 800a878:	d067      	beq.n	800a94a <UART_SetConfig+0x922>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d05e      	beq.n	800a940 <UART_SetConfig+0x918>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a886:	2b02      	cmp	r3, #2
 800a888:	d055      	beq.n	800a936 <UART_SetConfig+0x90e>
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a88e:	2b03      	cmp	r3, #3
 800a890:	d04c      	beq.n	800a92c <UART_SetConfig+0x904>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b04      	cmp	r3, #4
 800a898:	d043      	beq.n	800a922 <UART_SetConfig+0x8fa>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89e:	2b05      	cmp	r3, #5
 800a8a0:	d03a      	beq.n	800a918 <UART_SetConfig+0x8f0>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8a6:	2b06      	cmp	r3, #6
 800a8a8:	d031      	beq.n	800a90e <UART_SetConfig+0x8e6>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ae:	2b07      	cmp	r3, #7
 800a8b0:	d028      	beq.n	800a904 <UART_SetConfig+0x8dc>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8b6:	2b08      	cmp	r3, #8
 800a8b8:	d01f      	beq.n	800a8fa <UART_SetConfig+0x8d2>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8be:	2b09      	cmp	r3, #9
 800a8c0:	d016      	beq.n	800a8f0 <UART_SetConfig+0x8c8>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8c6:	2b0a      	cmp	r3, #10
 800a8c8:	d00d      	beq.n	800a8e6 <UART_SetConfig+0x8be>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8ce:	2b0b      	cmp	r3, #11
 800a8d0:	d104      	bne.n	800a8dc <UART_SetConfig+0x8b4>
 800a8d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a8d6:	f04f 0400 	mov.w	r4, #0
 800a8da:	e03a      	b.n	800a952 <UART_SetConfig+0x92a>
 800a8dc:	f04f 0301 	mov.w	r3, #1
 800a8e0:	f04f 0400 	mov.w	r4, #0
 800a8e4:	e035      	b.n	800a952 <UART_SetConfig+0x92a>
 800a8e6:	f04f 0380 	mov.w	r3, #128	; 0x80
 800a8ea:	f04f 0400 	mov.w	r4, #0
 800a8ee:	e030      	b.n	800a952 <UART_SetConfig+0x92a>
 800a8f0:	f04f 0340 	mov.w	r3, #64	; 0x40
 800a8f4:	f04f 0400 	mov.w	r4, #0
 800a8f8:	e02b      	b.n	800a952 <UART_SetConfig+0x92a>
 800a8fa:	f04f 0320 	mov.w	r3, #32
 800a8fe:	f04f 0400 	mov.w	r4, #0
 800a902:	e026      	b.n	800a952 <UART_SetConfig+0x92a>
 800a904:	f04f 0310 	mov.w	r3, #16
 800a908:	f04f 0400 	mov.w	r4, #0
 800a90c:	e021      	b.n	800a952 <UART_SetConfig+0x92a>
 800a90e:	f04f 030c 	mov.w	r3, #12
 800a912:	f04f 0400 	mov.w	r4, #0
 800a916:	e01c      	b.n	800a952 <UART_SetConfig+0x92a>
 800a918:	f04f 030a 	mov.w	r3, #10
 800a91c:	f04f 0400 	mov.w	r4, #0
 800a920:	e017      	b.n	800a952 <UART_SetConfig+0x92a>
 800a922:	f04f 0308 	mov.w	r3, #8
 800a926:	f04f 0400 	mov.w	r4, #0
 800a92a:	e012      	b.n	800a952 <UART_SetConfig+0x92a>
 800a92c:	f04f 0306 	mov.w	r3, #6
 800a930:	f04f 0400 	mov.w	r4, #0
 800a934:	e00d      	b.n	800a952 <UART_SetConfig+0x92a>
 800a936:	f04f 0304 	mov.w	r3, #4
 800a93a:	f04f 0400 	mov.w	r4, #0
 800a93e:	e008      	b.n	800a952 <UART_SetConfig+0x92a>
 800a940:	f04f 0302 	mov.w	r3, #2
 800a944:	f04f 0400 	mov.w	r4, #0
 800a948:	e003      	b.n	800a952 <UART_SetConfig+0x92a>
 800a94a:	f04f 0301 	mov.w	r3, #1
 800a94e:	f04f 0400 	mov.w	r4, #0
 800a952:	461a      	mov	r2, r3
 800a954:	4623      	mov	r3, r4
 800a956:	f7f5 fc5f 	bl	8000218 <__aeabi_uldivmod>
 800a95a:	4603      	mov	r3, r0
 800a95c:	460c      	mov	r4, r1
 800a95e:	4619      	mov	r1, r3
 800a960:	4622      	mov	r2, r4
 800a962:	f04f 0300 	mov.w	r3, #0
 800a966:	f04f 0400 	mov.w	r4, #0
 800a96a:	0214      	lsls	r4, r2, #8
 800a96c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a970:	020b      	lsls	r3, r1, #8
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	6852      	ldr	r2, [r2, #4]
 800a976:	0852      	lsrs	r2, r2, #1
 800a978:	4611      	mov	r1, r2
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	eb13 0b01 	adds.w	fp, r3, r1
 800a982:	eb44 0c02 	adc.w	ip, r4, r2
 800a986:	4658      	mov	r0, fp
 800a988:	4661      	mov	r1, ip
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	685b      	ldr	r3, [r3, #4]
 800a98e:	f04f 0400 	mov.w	r4, #0
 800a992:	461a      	mov	r2, r3
 800a994:	4623      	mov	r3, r4
 800a996:	f7f5 fc3f 	bl	8000218 <__aeabi_uldivmod>
 800a99a:	4603      	mov	r3, r0
 800a99c:	460c      	mov	r4, r1
 800a99e:	61fb      	str	r3, [r7, #28]
            break;
 800a9a0:	e0ab      	b.n	800aafa <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8088 	beq.w	800aabc <UART_SetConfig+0xa94>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d05b      	beq.n	800aa6c <UART_SetConfig+0xa44>
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d052      	beq.n	800aa62 <UART_SetConfig+0xa3a>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	2b03      	cmp	r3, #3
 800a9c2:	d04a      	beq.n	800aa5a <UART_SetConfig+0xa32>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c8:	2b04      	cmp	r3, #4
 800a9ca:	d041      	beq.n	800aa50 <UART_SetConfig+0xa28>
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d0:	2b05      	cmp	r3, #5
 800a9d2:	d039      	beq.n	800aa48 <UART_SetConfig+0xa20>
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9d8:	2b06      	cmp	r3, #6
 800a9da:	d031      	beq.n	800aa40 <UART_SetConfig+0xa18>
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e0:	2b07      	cmp	r3, #7
 800a9e2:	d028      	beq.n	800aa36 <UART_SetConfig+0xa0e>
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9e8:	2b08      	cmp	r3, #8
 800a9ea:	d01f      	beq.n	800aa2c <UART_SetConfig+0xa04>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f0:	2b09      	cmp	r3, #9
 800a9f2:	d016      	beq.n	800aa22 <UART_SetConfig+0x9fa>
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f8:	2b0a      	cmp	r3, #10
 800a9fa:	d00d      	beq.n	800aa18 <UART_SetConfig+0x9f0>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa00:	2b0b      	cmp	r3, #11
 800aa02:	d104      	bne.n	800aa0e <UART_SetConfig+0x9e6>
 800aa04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa08:	f04f 0400 	mov.w	r4, #0
 800aa0c:	e05a      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa0e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aa12:	f04f 0400 	mov.w	r4, #0
 800aa16:	e055      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aa1c:	f04f 0400 	mov.w	r4, #0
 800aa20:	e050      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aa26:	f04f 0400 	mov.w	r4, #0
 800aa2a:	e04b      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800aa30:	f04f 0400 	mov.w	r4, #0
 800aa34:	e046      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa36:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800aa3a:	f04f 0400 	mov.w	r4, #0
 800aa3e:	e041      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa40:	4b1b      	ldr	r3, [pc, #108]	; (800aab0 <UART_SetConfig+0xa88>)
 800aa42:	f04f 0400 	mov.w	r4, #0
 800aa46:	e03d      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa48:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <UART_SetConfig+0xa8c>)
 800aa4a:	f04f 0400 	mov.w	r4, #0
 800aa4e:	e039      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa50:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800aa54:	f04f 0400 	mov.w	r4, #0
 800aa58:	e034      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa5a:	4b17      	ldr	r3, [pc, #92]	; (800aab8 <UART_SetConfig+0xa90>)
 800aa5c:	f04f 0400 	mov.w	r4, #0
 800aa60:	e030      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa62:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aa66:	f04f 0400 	mov.w	r4, #0
 800aa6a:	e02b      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa6c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aa70:	f04f 0400 	mov.w	r4, #0
 800aa74:	e026      	b.n	800aac4 <UART_SetConfig+0xa9c>
 800aa76:	bf00      	nop
 800aa78:	14585500 	.word	0x14585500
 800aa7c:	00000000 	.word	0x00000000
 800aa80:	28b0aa00 	.word	0x28b0aa00
 800aa84:	00000000 	.word	0x00000000
 800aa88:	00f42400 	.word	0x00f42400
 800aa8c:	f4240000 	.word	0xf4240000
 800aa90:	01e84800 	.word	0x01e84800
 800aa94:	03d09000 	.word	0x03d09000
 800aa98:	07a12000 	.word	0x07a12000
 800aa9c:	0f424000 	.word	0x0f424000
 800aaa0:	186a0000 	.word	0x186a0000
 800aaa4:	1e848000 	.word	0x1e848000
 800aaa8:	3d090000 	.word	0x3d090000
 800aaac:	7a120000 	.word	0x7a120000
 800aab0:	000aaa00 	.word	0x000aaa00
 800aab4:	000ccc00 	.word	0x000ccc00
 800aab8:	00155500 	.word	0x00155500
 800aabc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800aac0:	f04f 0400 	mov.w	r4, #0
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	6852      	ldr	r2, [r2, #4]
 800aac8:	0852      	lsrs	r2, r2, #1
 800aaca:	4611      	mov	r1, r2
 800aacc:	f04f 0200 	mov.w	r2, #0
 800aad0:	eb13 0b01 	adds.w	fp, r3, r1
 800aad4:	eb44 0c02 	adc.w	ip, r4, r2
 800aad8:	4658      	mov	r0, fp
 800aada:	4661      	mov	r1, ip
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	685b      	ldr	r3, [r3, #4]
 800aae0:	f04f 0400 	mov.w	r4, #0
 800aae4:	461a      	mov	r2, r3
 800aae6:	4623      	mov	r3, r4
 800aae8:	f7f5 fb96 	bl	8000218 <__aeabi_uldivmod>
 800aaec:	4603      	mov	r3, r0
 800aaee:	460c      	mov	r4, r1
 800aaf0:	61fb      	str	r3, [r7, #28]
            break;
 800aaf2:	e002      	b.n	800aafa <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 800aaf4:	2301      	movs	r3, #1
 800aaf6:	76fb      	strb	r3, [r7, #27]
            break;
 800aaf8:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aafa:	69fb      	ldr	r3, [r7, #28]
 800aafc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab00:	d309      	bcc.n	800ab16 <UART_SetConfig+0xaee>
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab08:	d205      	bcs.n	800ab16 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	69fa      	ldr	r2, [r7, #28]
 800ab10:	60da      	str	r2, [r3, #12]
 800ab12:	f000 bc18 	b.w	800b346 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 800ab16:	2301      	movs	r3, #1
 800ab18:	76fb      	strb	r3, [r7, #27]
 800ab1a:	f000 bc14 	b.w	800b346 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ab26:	f040 8204 	bne.w	800af32 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 800ab2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	f200 81df 	bhi.w	800aef2 <UART_SetConfig+0xeca>
 800ab34:	a201      	add	r2, pc, #4	; (adr r2, 800ab3c <UART_SetConfig+0xb14>)
 800ab36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab3a:	bf00      	nop
 800ab3c:	0800ab61 	.word	0x0800ab61
 800ab40:	0800ac19 	.word	0x0800ac19
 800ab44:	0800acd1 	.word	0x0800acd1
 800ab48:	0800aef3 	.word	0x0800aef3
 800ab4c:	0800ad79 	.word	0x0800ad79
 800ab50:	0800aef3 	.word	0x0800aef3
 800ab54:	0800aef3 	.word	0x0800aef3
 800ab58:	0800aef3 	.word	0x0800aef3
 800ab5c:	0800ae31 	.word	0x0800ae31
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab60:	f7fd fee0 	bl	8008924 <HAL_RCC_GetPCLK1Freq>
 800ab64:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d044      	beq.n	800abf8 <UART_SetConfig+0xbd0>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d03e      	beq.n	800abf4 <UART_SetConfig+0xbcc>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d038      	beq.n	800abf0 <UART_SetConfig+0xbc8>
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab82:	2b03      	cmp	r3, #3
 800ab84:	d032      	beq.n	800abec <UART_SetConfig+0xbc4>
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab8a:	2b04      	cmp	r3, #4
 800ab8c:	d02c      	beq.n	800abe8 <UART_SetConfig+0xbc0>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab92:	2b05      	cmp	r3, #5
 800ab94:	d026      	beq.n	800abe4 <UART_SetConfig+0xbbc>
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab9a:	2b06      	cmp	r3, #6
 800ab9c:	d020      	beq.n	800abe0 <UART_SetConfig+0xbb8>
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba2:	2b07      	cmp	r3, #7
 800aba4:	d01a      	beq.n	800abdc <UART_SetConfig+0xbb4>
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abaa:	2b08      	cmp	r3, #8
 800abac:	d014      	beq.n	800abd8 <UART_SetConfig+0xbb0>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb2:	2b09      	cmp	r3, #9
 800abb4:	d00e      	beq.n	800abd4 <UART_SetConfig+0xbac>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abba:	2b0a      	cmp	r3, #10
 800abbc:	d008      	beq.n	800abd0 <UART_SetConfig+0xba8>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abc2:	2b0b      	cmp	r3, #11
 800abc4:	d102      	bne.n	800abcc <UART_SetConfig+0xba4>
 800abc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800abca:	e016      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abcc:	2301      	movs	r3, #1
 800abce:	e014      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abd0:	2380      	movs	r3, #128	; 0x80
 800abd2:	e012      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abd4:	2340      	movs	r3, #64	; 0x40
 800abd6:	e010      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abd8:	2320      	movs	r3, #32
 800abda:	e00e      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abdc:	2310      	movs	r3, #16
 800abde:	e00c      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abe0:	230c      	movs	r3, #12
 800abe2:	e00a      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abe4:	230a      	movs	r3, #10
 800abe6:	e008      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abe8:	2308      	movs	r3, #8
 800abea:	e006      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abec:	2306      	movs	r3, #6
 800abee:	e004      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abf0:	2304      	movs	r3, #4
 800abf2:	e002      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abf4:	2302      	movs	r3, #2
 800abf6:	e000      	b.n	800abfa <UART_SetConfig+0xbd2>
 800abf8:	2301      	movs	r3, #1
 800abfa:	693a      	ldr	r2, [r7, #16]
 800abfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac00:	005a      	lsls	r2, r3, #1
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	085b      	lsrs	r3, r3, #1
 800ac08:	441a      	add	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	61fb      	str	r3, [r7, #28]
        break;
 800ac16:	e16f      	b.n	800aef8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac18:	f7fd fe9a 	bl	8008950 <HAL_RCC_GetPCLK2Freq>
 800ac1c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d044      	beq.n	800acb0 <UART_SetConfig+0xc88>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d03e      	beq.n	800acac <UART_SetConfig+0xc84>
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac32:	2b02      	cmp	r3, #2
 800ac34:	d038      	beq.n	800aca8 <UART_SetConfig+0xc80>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3a:	2b03      	cmp	r3, #3
 800ac3c:	d032      	beq.n	800aca4 <UART_SetConfig+0xc7c>
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac42:	2b04      	cmp	r3, #4
 800ac44:	d02c      	beq.n	800aca0 <UART_SetConfig+0xc78>
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac4a:	2b05      	cmp	r3, #5
 800ac4c:	d026      	beq.n	800ac9c <UART_SetConfig+0xc74>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac52:	2b06      	cmp	r3, #6
 800ac54:	d020      	beq.n	800ac98 <UART_SetConfig+0xc70>
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac5a:	2b07      	cmp	r3, #7
 800ac5c:	d01a      	beq.n	800ac94 <UART_SetConfig+0xc6c>
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac62:	2b08      	cmp	r3, #8
 800ac64:	d014      	beq.n	800ac90 <UART_SetConfig+0xc68>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac6a:	2b09      	cmp	r3, #9
 800ac6c:	d00e      	beq.n	800ac8c <UART_SetConfig+0xc64>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac72:	2b0a      	cmp	r3, #10
 800ac74:	d008      	beq.n	800ac88 <UART_SetConfig+0xc60>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac7a:	2b0b      	cmp	r3, #11
 800ac7c:	d102      	bne.n	800ac84 <UART_SetConfig+0xc5c>
 800ac7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac82:	e016      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800ac84:	2301      	movs	r3, #1
 800ac86:	e014      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800ac88:	2380      	movs	r3, #128	; 0x80
 800ac8a:	e012      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800ac8c:	2340      	movs	r3, #64	; 0x40
 800ac8e:	e010      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800ac90:	2320      	movs	r3, #32
 800ac92:	e00e      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800ac94:	2310      	movs	r3, #16
 800ac96:	e00c      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800ac98:	230c      	movs	r3, #12
 800ac9a:	e00a      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800ac9c:	230a      	movs	r3, #10
 800ac9e:	e008      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800aca0:	2308      	movs	r3, #8
 800aca2:	e006      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800aca4:	2306      	movs	r3, #6
 800aca6:	e004      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800aca8:	2304      	movs	r3, #4
 800acaa:	e002      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800acac:	2302      	movs	r3, #2
 800acae:	e000      	b.n	800acb2 <UART_SetConfig+0xc8a>
 800acb0:	2301      	movs	r3, #1
 800acb2:	693a      	ldr	r2, [r7, #16]
 800acb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800acb8:	005a      	lsls	r2, r3, #1
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	085b      	lsrs	r3, r3, #1
 800acc0:	441a      	add	r2, r3
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acca:	b29b      	uxth	r3, r3
 800accc:	61fb      	str	r3, [r7, #28]
        break;
 800acce:	e113      	b.n	800aef8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d043      	beq.n	800ad60 <UART_SetConfig+0xd38>
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d03d      	beq.n	800ad5c <UART_SetConfig+0xd34>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	d037      	beq.n	800ad58 <UART_SetConfig+0xd30>
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acec:	2b03      	cmp	r3, #3
 800acee:	d031      	beq.n	800ad54 <UART_SetConfig+0xd2c>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf4:	2b04      	cmp	r3, #4
 800acf6:	d02b      	beq.n	800ad50 <UART_SetConfig+0xd28>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfc:	2b05      	cmp	r3, #5
 800acfe:	d025      	beq.n	800ad4c <UART_SetConfig+0xd24>
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	2b06      	cmp	r3, #6
 800ad06:	d01f      	beq.n	800ad48 <UART_SetConfig+0xd20>
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad0c:	2b07      	cmp	r3, #7
 800ad0e:	d019      	beq.n	800ad44 <UART_SetConfig+0xd1c>
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad14:	2b08      	cmp	r3, #8
 800ad16:	d013      	beq.n	800ad40 <UART_SetConfig+0xd18>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad1c:	2b09      	cmp	r3, #9
 800ad1e:	d00d      	beq.n	800ad3c <UART_SetConfig+0xd14>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad24:	2b0a      	cmp	r3, #10
 800ad26:	d007      	beq.n	800ad38 <UART_SetConfig+0xd10>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad2c:	2b0b      	cmp	r3, #11
 800ad2e:	d101      	bne.n	800ad34 <UART_SetConfig+0xd0c>
 800ad30:	4b8d      	ldr	r3, [pc, #564]	; (800af68 <UART_SetConfig+0xf40>)
 800ad32:	e016      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad34:	4b8d      	ldr	r3, [pc, #564]	; (800af6c <UART_SetConfig+0xf44>)
 800ad36:	e014      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad38:	4b8d      	ldr	r3, [pc, #564]	; (800af70 <UART_SetConfig+0xf48>)
 800ad3a:	e012      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad3c:	4b8d      	ldr	r3, [pc, #564]	; (800af74 <UART_SetConfig+0xf4c>)
 800ad3e:	e010      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad40:	4b8d      	ldr	r3, [pc, #564]	; (800af78 <UART_SetConfig+0xf50>)
 800ad42:	e00e      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad44:	4b8d      	ldr	r3, [pc, #564]	; (800af7c <UART_SetConfig+0xf54>)
 800ad46:	e00c      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad48:	4b8d      	ldr	r3, [pc, #564]	; (800af80 <UART_SetConfig+0xf58>)
 800ad4a:	e00a      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad4c:	4b8d      	ldr	r3, [pc, #564]	; (800af84 <UART_SetConfig+0xf5c>)
 800ad4e:	e008      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad50:	4b8d      	ldr	r3, [pc, #564]	; (800af88 <UART_SetConfig+0xf60>)
 800ad52:	e006      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad54:	4b8d      	ldr	r3, [pc, #564]	; (800af8c <UART_SetConfig+0xf64>)
 800ad56:	e004      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad58:	4b8d      	ldr	r3, [pc, #564]	; (800af90 <UART_SetConfig+0xf68>)
 800ad5a:	e002      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad5c:	4b8d      	ldr	r3, [pc, #564]	; (800af94 <UART_SetConfig+0xf6c>)
 800ad5e:	e000      	b.n	800ad62 <UART_SetConfig+0xd3a>
 800ad60:	4b82      	ldr	r3, [pc, #520]	; (800af6c <UART_SetConfig+0xf44>)
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	6852      	ldr	r2, [r2, #4]
 800ad66:	0852      	lsrs	r2, r2, #1
 800ad68:	441a      	add	r2, r3
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad72:	b29b      	uxth	r3, r3
 800ad74:	61fb      	str	r3, [r7, #28]
        break;
 800ad76:	e0bf      	b.n	800aef8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad78:	f7fd fd66 	bl	8008848 <HAL_RCC_GetSysClockFreq>
 800ad7c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d044      	beq.n	800ae10 <UART_SetConfig+0xde8>
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d03e      	beq.n	800ae0c <UART_SetConfig+0xde4>
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad92:	2b02      	cmp	r3, #2
 800ad94:	d038      	beq.n	800ae08 <UART_SetConfig+0xde0>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad9a:	2b03      	cmp	r3, #3
 800ad9c:	d032      	beq.n	800ae04 <UART_SetConfig+0xddc>
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ada2:	2b04      	cmp	r3, #4
 800ada4:	d02c      	beq.n	800ae00 <UART_SetConfig+0xdd8>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adaa:	2b05      	cmp	r3, #5
 800adac:	d026      	beq.n	800adfc <UART_SetConfig+0xdd4>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	2b06      	cmp	r3, #6
 800adb4:	d020      	beq.n	800adf8 <UART_SetConfig+0xdd0>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adba:	2b07      	cmp	r3, #7
 800adbc:	d01a      	beq.n	800adf4 <UART_SetConfig+0xdcc>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	2b08      	cmp	r3, #8
 800adc4:	d014      	beq.n	800adf0 <UART_SetConfig+0xdc8>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adca:	2b09      	cmp	r3, #9
 800adcc:	d00e      	beq.n	800adec <UART_SetConfig+0xdc4>
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add2:	2b0a      	cmp	r3, #10
 800add4:	d008      	beq.n	800ade8 <UART_SetConfig+0xdc0>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adda:	2b0b      	cmp	r3, #11
 800addc:	d102      	bne.n	800ade4 <UART_SetConfig+0xdbc>
 800adde:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ade2:	e016      	b.n	800ae12 <UART_SetConfig+0xdea>
 800ade4:	2301      	movs	r3, #1
 800ade6:	e014      	b.n	800ae12 <UART_SetConfig+0xdea>
 800ade8:	2380      	movs	r3, #128	; 0x80
 800adea:	e012      	b.n	800ae12 <UART_SetConfig+0xdea>
 800adec:	2340      	movs	r3, #64	; 0x40
 800adee:	e010      	b.n	800ae12 <UART_SetConfig+0xdea>
 800adf0:	2320      	movs	r3, #32
 800adf2:	e00e      	b.n	800ae12 <UART_SetConfig+0xdea>
 800adf4:	2310      	movs	r3, #16
 800adf6:	e00c      	b.n	800ae12 <UART_SetConfig+0xdea>
 800adf8:	230c      	movs	r3, #12
 800adfa:	e00a      	b.n	800ae12 <UART_SetConfig+0xdea>
 800adfc:	230a      	movs	r3, #10
 800adfe:	e008      	b.n	800ae12 <UART_SetConfig+0xdea>
 800ae00:	2308      	movs	r3, #8
 800ae02:	e006      	b.n	800ae12 <UART_SetConfig+0xdea>
 800ae04:	2306      	movs	r3, #6
 800ae06:	e004      	b.n	800ae12 <UART_SetConfig+0xdea>
 800ae08:	2304      	movs	r3, #4
 800ae0a:	e002      	b.n	800ae12 <UART_SetConfig+0xdea>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e000      	b.n	800ae12 <UART_SetConfig+0xdea>
 800ae10:	2301      	movs	r3, #1
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae18:	005a      	lsls	r2, r3, #1
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	685b      	ldr	r3, [r3, #4]
 800ae1e:	085b      	lsrs	r3, r3, #1
 800ae20:	441a      	add	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	61fb      	str	r3, [r7, #28]
        break;
 800ae2e:	e063      	b.n	800aef8 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d04f      	beq.n	800aed8 <UART_SetConfig+0xeb0>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d048      	beq.n	800aed2 <UART_SetConfig+0xeaa>
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae44:	2b02      	cmp	r3, #2
 800ae46:	d041      	beq.n	800aecc <UART_SetConfig+0xea4>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4c:	2b03      	cmp	r3, #3
 800ae4e:	d03a      	beq.n	800aec6 <UART_SetConfig+0xe9e>
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d033      	beq.n	800aec0 <UART_SetConfig+0xe98>
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	2b05      	cmp	r3, #5
 800ae5e:	d02c      	beq.n	800aeba <UART_SetConfig+0xe92>
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae64:	2b06      	cmp	r3, #6
 800ae66:	d025      	beq.n	800aeb4 <UART_SetConfig+0xe8c>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	2b07      	cmp	r3, #7
 800ae6e:	d01e      	beq.n	800aeae <UART_SetConfig+0xe86>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae74:	2b08      	cmp	r3, #8
 800ae76:	d017      	beq.n	800aea8 <UART_SetConfig+0xe80>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae7c:	2b09      	cmp	r3, #9
 800ae7e:	d010      	beq.n	800aea2 <UART_SetConfig+0xe7a>
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae84:	2b0a      	cmp	r3, #10
 800ae86:	d009      	beq.n	800ae9c <UART_SetConfig+0xe74>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8c:	2b0b      	cmp	r3, #11
 800ae8e:	d102      	bne.n	800ae96 <UART_SetConfig+0xe6e>
 800ae90:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae94:	e022      	b.n	800aedc <UART_SetConfig+0xeb4>
 800ae96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800ae9a:	e01f      	b.n	800aedc <UART_SetConfig+0xeb4>
 800ae9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800aea0:	e01c      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea6:	e019      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aea8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aeac:	e016      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aeae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aeb2:	e013      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aeb4:	f241 5354 	movw	r3, #5460	; 0x1554
 800aeb8:	e010      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aeba:	f641 1398 	movw	r3, #6552	; 0x1998
 800aebe:	e00d      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aec0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800aec4:	e00a      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aec6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800aeca:	e007      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aecc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800aed0:	e004      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aed6:	e001      	b.n	800aedc <UART_SetConfig+0xeb4>
 800aed8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800aedc:	687a      	ldr	r2, [r7, #4]
 800aede:	6852      	ldr	r2, [r2, #4]
 800aee0:	0852      	lsrs	r2, r2, #1
 800aee2:	441a      	add	r2, r3
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	685b      	ldr	r3, [r3, #4]
 800aee8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	61fb      	str	r3, [r7, #28]
        break;
 800aef0:	e002      	b.n	800aef8 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	76fb      	strb	r3, [r7, #27]
        break;
 800aef6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	2b0f      	cmp	r3, #15
 800aefc:	d916      	bls.n	800af2c <UART_SetConfig+0xf04>
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af04:	d212      	bcs.n	800af2c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	f023 030f 	bic.w	r3, r3, #15
 800af0e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800af10:	69fb      	ldr	r3, [r7, #28]
 800af12:	085b      	lsrs	r3, r3, #1
 800af14:	b29b      	uxth	r3, r3
 800af16:	f003 0307 	and.w	r3, r3, #7
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	89fb      	ldrh	r3, [r7, #14]
 800af1e:	4313      	orrs	r3, r2
 800af20:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	89fa      	ldrh	r2, [r7, #14]
 800af28:	60da      	str	r2, [r3, #12]
 800af2a:	e20c      	b.n	800b346 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800af2c:	2301      	movs	r3, #1
 800af2e:	76fb      	strb	r3, [r7, #27]
 800af30:	e209      	b.n	800b346 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 800af32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800af36:	2b08      	cmp	r3, #8
 800af38:	f200 81f4 	bhi.w	800b324 <UART_SetConfig+0x12fc>
 800af3c:	a201      	add	r2, pc, #4	; (adr r2, 800af44 <UART_SetConfig+0xf1c>)
 800af3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af42:	bf00      	nop
 800af44:	0800af99 	.word	0x0800af99
 800af48:	0800b04f 	.word	0x0800b04f
 800af4c:	0800b105 	.word	0x0800b105
 800af50:	0800b325 	.word	0x0800b325
 800af54:	0800b1af 	.word	0x0800b1af
 800af58:	0800b325 	.word	0x0800b325
 800af5c:	0800b325 	.word	0x0800b325
 800af60:	0800b325 	.word	0x0800b325
 800af64:	0800b265 	.word	0x0800b265
 800af68:	0001e848 	.word	0x0001e848
 800af6c:	01e84800 	.word	0x01e84800
 800af70:	0003d090 	.word	0x0003d090
 800af74:	0007a120 	.word	0x0007a120
 800af78:	000f4240 	.word	0x000f4240
 800af7c:	001e8480 	.word	0x001e8480
 800af80:	0028b0aa 	.word	0x0028b0aa
 800af84:	0030d400 	.word	0x0030d400
 800af88:	003d0900 	.word	0x003d0900
 800af8c:	00516154 	.word	0x00516154
 800af90:	007a1200 	.word	0x007a1200
 800af94:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af98:	f7fd fcc4 	bl	8008924 <HAL_RCC_GetPCLK1Freq>
 800af9c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d044      	beq.n	800b030 <UART_SetConfig+0x1008>
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d03e      	beq.n	800b02c <UART_SetConfig+0x1004>
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d038      	beq.n	800b028 <UART_SetConfig+0x1000>
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afba:	2b03      	cmp	r3, #3
 800afbc:	d032      	beq.n	800b024 <UART_SetConfig+0xffc>
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d02c      	beq.n	800b020 <UART_SetConfig+0xff8>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afca:	2b05      	cmp	r3, #5
 800afcc:	d026      	beq.n	800b01c <UART_SetConfig+0xff4>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afd2:	2b06      	cmp	r3, #6
 800afd4:	d020      	beq.n	800b018 <UART_SetConfig+0xff0>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afda:	2b07      	cmp	r3, #7
 800afdc:	d01a      	beq.n	800b014 <UART_SetConfig+0xfec>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afe2:	2b08      	cmp	r3, #8
 800afe4:	d014      	beq.n	800b010 <UART_SetConfig+0xfe8>
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afea:	2b09      	cmp	r3, #9
 800afec:	d00e      	beq.n	800b00c <UART_SetConfig+0xfe4>
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aff2:	2b0a      	cmp	r3, #10
 800aff4:	d008      	beq.n	800b008 <UART_SetConfig+0xfe0>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800affa:	2b0b      	cmp	r3, #11
 800affc:	d102      	bne.n	800b004 <UART_SetConfig+0xfdc>
 800affe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b002:	e016      	b.n	800b032 <UART_SetConfig+0x100a>
 800b004:	2301      	movs	r3, #1
 800b006:	e014      	b.n	800b032 <UART_SetConfig+0x100a>
 800b008:	2380      	movs	r3, #128	; 0x80
 800b00a:	e012      	b.n	800b032 <UART_SetConfig+0x100a>
 800b00c:	2340      	movs	r3, #64	; 0x40
 800b00e:	e010      	b.n	800b032 <UART_SetConfig+0x100a>
 800b010:	2320      	movs	r3, #32
 800b012:	e00e      	b.n	800b032 <UART_SetConfig+0x100a>
 800b014:	2310      	movs	r3, #16
 800b016:	e00c      	b.n	800b032 <UART_SetConfig+0x100a>
 800b018:	230c      	movs	r3, #12
 800b01a:	e00a      	b.n	800b032 <UART_SetConfig+0x100a>
 800b01c:	230a      	movs	r3, #10
 800b01e:	e008      	b.n	800b032 <UART_SetConfig+0x100a>
 800b020:	2308      	movs	r3, #8
 800b022:	e006      	b.n	800b032 <UART_SetConfig+0x100a>
 800b024:	2306      	movs	r3, #6
 800b026:	e004      	b.n	800b032 <UART_SetConfig+0x100a>
 800b028:	2304      	movs	r3, #4
 800b02a:	e002      	b.n	800b032 <UART_SetConfig+0x100a>
 800b02c:	2302      	movs	r3, #2
 800b02e:	e000      	b.n	800b032 <UART_SetConfig+0x100a>
 800b030:	2301      	movs	r3, #1
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	fbb2 f2f3 	udiv	r2, r2, r3
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	685b      	ldr	r3, [r3, #4]
 800b03c:	085b      	lsrs	r3, r3, #1
 800b03e:	441a      	add	r2, r3
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	fbb2 f3f3 	udiv	r3, r2, r3
 800b048:	b29b      	uxth	r3, r3
 800b04a:	61fb      	str	r3, [r7, #28]
        break;
 800b04c:	e16d      	b.n	800b32a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b04e:	f7fd fc7f 	bl	8008950 <HAL_RCC_GetPCLK2Freq>
 800b052:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d044      	beq.n	800b0e6 <UART_SetConfig+0x10be>
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b060:	2b01      	cmp	r3, #1
 800b062:	d03e      	beq.n	800b0e2 <UART_SetConfig+0x10ba>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b068:	2b02      	cmp	r3, #2
 800b06a:	d038      	beq.n	800b0de <UART_SetConfig+0x10b6>
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b070:	2b03      	cmp	r3, #3
 800b072:	d032      	beq.n	800b0da <UART_SetConfig+0x10b2>
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b078:	2b04      	cmp	r3, #4
 800b07a:	d02c      	beq.n	800b0d6 <UART_SetConfig+0x10ae>
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b080:	2b05      	cmp	r3, #5
 800b082:	d026      	beq.n	800b0d2 <UART_SetConfig+0x10aa>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b088:	2b06      	cmp	r3, #6
 800b08a:	d020      	beq.n	800b0ce <UART_SetConfig+0x10a6>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b090:	2b07      	cmp	r3, #7
 800b092:	d01a      	beq.n	800b0ca <UART_SetConfig+0x10a2>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b098:	2b08      	cmp	r3, #8
 800b09a:	d014      	beq.n	800b0c6 <UART_SetConfig+0x109e>
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a0:	2b09      	cmp	r3, #9
 800b0a2:	d00e      	beq.n	800b0c2 <UART_SetConfig+0x109a>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a8:	2b0a      	cmp	r3, #10
 800b0aa:	d008      	beq.n	800b0be <UART_SetConfig+0x1096>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	2b0b      	cmp	r3, #11
 800b0b2:	d102      	bne.n	800b0ba <UART_SetConfig+0x1092>
 800b0b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b0b8:	e016      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e014      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0be:	2380      	movs	r3, #128	; 0x80
 800b0c0:	e012      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0c2:	2340      	movs	r3, #64	; 0x40
 800b0c4:	e010      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0c6:	2320      	movs	r3, #32
 800b0c8:	e00e      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0ca:	2310      	movs	r3, #16
 800b0cc:	e00c      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0ce:	230c      	movs	r3, #12
 800b0d0:	e00a      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0d2:	230a      	movs	r3, #10
 800b0d4:	e008      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0d6:	2308      	movs	r3, #8
 800b0d8:	e006      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0da:	2306      	movs	r3, #6
 800b0dc:	e004      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0de:	2304      	movs	r3, #4
 800b0e0:	e002      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0e2:	2302      	movs	r3, #2
 800b0e4:	e000      	b.n	800b0e8 <UART_SetConfig+0x10c0>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	693a      	ldr	r2, [r7, #16]
 800b0ea:	fbb2 f2f3 	udiv	r2, r2, r3
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	085b      	lsrs	r3, r3, #1
 800b0f4:	441a      	add	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0fe:	b29b      	uxth	r3, r3
 800b100:	61fb      	str	r3, [r7, #28]
        break;
 800b102:	e112      	b.n	800b32a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d044      	beq.n	800b196 <UART_SetConfig+0x116e>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	2b01      	cmp	r3, #1
 800b112:	d03e      	beq.n	800b192 <UART_SetConfig+0x116a>
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d038      	beq.n	800b18e <UART_SetConfig+0x1166>
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b120:	2b03      	cmp	r3, #3
 800b122:	d032      	beq.n	800b18a <UART_SetConfig+0x1162>
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b128:	2b04      	cmp	r3, #4
 800b12a:	d02c      	beq.n	800b186 <UART_SetConfig+0x115e>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b130:	2b05      	cmp	r3, #5
 800b132:	d026      	beq.n	800b182 <UART_SetConfig+0x115a>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b138:	2b06      	cmp	r3, #6
 800b13a:	d020      	beq.n	800b17e <UART_SetConfig+0x1156>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b140:	2b07      	cmp	r3, #7
 800b142:	d01a      	beq.n	800b17a <UART_SetConfig+0x1152>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b148:	2b08      	cmp	r3, #8
 800b14a:	d014      	beq.n	800b176 <UART_SetConfig+0x114e>
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b150:	2b09      	cmp	r3, #9
 800b152:	d00e      	beq.n	800b172 <UART_SetConfig+0x114a>
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b158:	2b0a      	cmp	r3, #10
 800b15a:	d008      	beq.n	800b16e <UART_SetConfig+0x1146>
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b160:	2b0b      	cmp	r3, #11
 800b162:	d102      	bne.n	800b16a <UART_SetConfig+0x1142>
 800b164:	f24f 4324 	movw	r3, #62500	; 0xf424
 800b168:	e016      	b.n	800b198 <UART_SetConfig+0x1170>
 800b16a:	4b81      	ldr	r3, [pc, #516]	; (800b370 <UART_SetConfig+0x1348>)
 800b16c:	e014      	b.n	800b198 <UART_SetConfig+0x1170>
 800b16e:	4b81      	ldr	r3, [pc, #516]	; (800b374 <UART_SetConfig+0x134c>)
 800b170:	e012      	b.n	800b198 <UART_SetConfig+0x1170>
 800b172:	4b81      	ldr	r3, [pc, #516]	; (800b378 <UART_SetConfig+0x1350>)
 800b174:	e010      	b.n	800b198 <UART_SetConfig+0x1170>
 800b176:	4b81      	ldr	r3, [pc, #516]	; (800b37c <UART_SetConfig+0x1354>)
 800b178:	e00e      	b.n	800b198 <UART_SetConfig+0x1170>
 800b17a:	4b81      	ldr	r3, [pc, #516]	; (800b380 <UART_SetConfig+0x1358>)
 800b17c:	e00c      	b.n	800b198 <UART_SetConfig+0x1170>
 800b17e:	4b81      	ldr	r3, [pc, #516]	; (800b384 <UART_SetConfig+0x135c>)
 800b180:	e00a      	b.n	800b198 <UART_SetConfig+0x1170>
 800b182:	4b81      	ldr	r3, [pc, #516]	; (800b388 <UART_SetConfig+0x1360>)
 800b184:	e008      	b.n	800b198 <UART_SetConfig+0x1170>
 800b186:	4b81      	ldr	r3, [pc, #516]	; (800b38c <UART_SetConfig+0x1364>)
 800b188:	e006      	b.n	800b198 <UART_SetConfig+0x1170>
 800b18a:	4b81      	ldr	r3, [pc, #516]	; (800b390 <UART_SetConfig+0x1368>)
 800b18c:	e004      	b.n	800b198 <UART_SetConfig+0x1170>
 800b18e:	4b81      	ldr	r3, [pc, #516]	; (800b394 <UART_SetConfig+0x136c>)
 800b190:	e002      	b.n	800b198 <UART_SetConfig+0x1170>
 800b192:	4b81      	ldr	r3, [pc, #516]	; (800b398 <UART_SetConfig+0x1370>)
 800b194:	e000      	b.n	800b198 <UART_SetConfig+0x1170>
 800b196:	4b76      	ldr	r3, [pc, #472]	; (800b370 <UART_SetConfig+0x1348>)
 800b198:	687a      	ldr	r2, [r7, #4]
 800b19a:	6852      	ldr	r2, [r2, #4]
 800b19c:	0852      	lsrs	r2, r2, #1
 800b19e:	441a      	add	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	61fb      	str	r3, [r7, #28]
        break;
 800b1ac:	e0bd      	b.n	800b32a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1ae:	f7fd fb4b 	bl	8008848 <HAL_RCC_GetSysClockFreq>
 800b1b2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d044      	beq.n	800b246 <UART_SetConfig+0x121e>
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d03e      	beq.n	800b242 <UART_SetConfig+0x121a>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d038      	beq.n	800b23e <UART_SetConfig+0x1216>
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d0:	2b03      	cmp	r3, #3
 800b1d2:	d032      	beq.n	800b23a <UART_SetConfig+0x1212>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d8:	2b04      	cmp	r3, #4
 800b1da:	d02c      	beq.n	800b236 <UART_SetConfig+0x120e>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e0:	2b05      	cmp	r3, #5
 800b1e2:	d026      	beq.n	800b232 <UART_SetConfig+0x120a>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1e8:	2b06      	cmp	r3, #6
 800b1ea:	d020      	beq.n	800b22e <UART_SetConfig+0x1206>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f0:	2b07      	cmp	r3, #7
 800b1f2:	d01a      	beq.n	800b22a <UART_SetConfig+0x1202>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1f8:	2b08      	cmp	r3, #8
 800b1fa:	d014      	beq.n	800b226 <UART_SetConfig+0x11fe>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	2b09      	cmp	r3, #9
 800b202:	d00e      	beq.n	800b222 <UART_SetConfig+0x11fa>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	2b0a      	cmp	r3, #10
 800b20a:	d008      	beq.n	800b21e <UART_SetConfig+0x11f6>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b210:	2b0b      	cmp	r3, #11
 800b212:	d102      	bne.n	800b21a <UART_SetConfig+0x11f2>
 800b214:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b218:	e016      	b.n	800b248 <UART_SetConfig+0x1220>
 800b21a:	2301      	movs	r3, #1
 800b21c:	e014      	b.n	800b248 <UART_SetConfig+0x1220>
 800b21e:	2380      	movs	r3, #128	; 0x80
 800b220:	e012      	b.n	800b248 <UART_SetConfig+0x1220>
 800b222:	2340      	movs	r3, #64	; 0x40
 800b224:	e010      	b.n	800b248 <UART_SetConfig+0x1220>
 800b226:	2320      	movs	r3, #32
 800b228:	e00e      	b.n	800b248 <UART_SetConfig+0x1220>
 800b22a:	2310      	movs	r3, #16
 800b22c:	e00c      	b.n	800b248 <UART_SetConfig+0x1220>
 800b22e:	230c      	movs	r3, #12
 800b230:	e00a      	b.n	800b248 <UART_SetConfig+0x1220>
 800b232:	230a      	movs	r3, #10
 800b234:	e008      	b.n	800b248 <UART_SetConfig+0x1220>
 800b236:	2308      	movs	r3, #8
 800b238:	e006      	b.n	800b248 <UART_SetConfig+0x1220>
 800b23a:	2306      	movs	r3, #6
 800b23c:	e004      	b.n	800b248 <UART_SetConfig+0x1220>
 800b23e:	2304      	movs	r3, #4
 800b240:	e002      	b.n	800b248 <UART_SetConfig+0x1220>
 800b242:	2302      	movs	r3, #2
 800b244:	e000      	b.n	800b248 <UART_SetConfig+0x1220>
 800b246:	2301      	movs	r3, #1
 800b248:	693a      	ldr	r2, [r7, #16]
 800b24a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	085b      	lsrs	r3, r3, #1
 800b254:	441a      	add	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	685b      	ldr	r3, [r3, #4]
 800b25a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25e:	b29b      	uxth	r3, r3
 800b260:	61fb      	str	r3, [r7, #28]
        break;
 800b262:	e062      	b.n	800b32a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d04e      	beq.n	800b30a <UART_SetConfig+0x12e2>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b270:	2b01      	cmp	r3, #1
 800b272:	d047      	beq.n	800b304 <UART_SetConfig+0x12dc>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b278:	2b02      	cmp	r3, #2
 800b27a:	d040      	beq.n	800b2fe <UART_SetConfig+0x12d6>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b280:	2b03      	cmp	r3, #3
 800b282:	d039      	beq.n	800b2f8 <UART_SetConfig+0x12d0>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	2b04      	cmp	r3, #4
 800b28a:	d032      	beq.n	800b2f2 <UART_SetConfig+0x12ca>
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	2b05      	cmp	r3, #5
 800b292:	d02b      	beq.n	800b2ec <UART_SetConfig+0x12c4>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b298:	2b06      	cmp	r3, #6
 800b29a:	d024      	beq.n	800b2e6 <UART_SetConfig+0x12be>
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	2b07      	cmp	r3, #7
 800b2a2:	d01d      	beq.n	800b2e0 <UART_SetConfig+0x12b8>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a8:	2b08      	cmp	r3, #8
 800b2aa:	d016      	beq.n	800b2da <UART_SetConfig+0x12b2>
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b0:	2b09      	cmp	r3, #9
 800b2b2:	d00f      	beq.n	800b2d4 <UART_SetConfig+0x12ac>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2b8:	2b0a      	cmp	r3, #10
 800b2ba:	d008      	beq.n	800b2ce <UART_SetConfig+0x12a6>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c0:	2b0b      	cmp	r3, #11
 800b2c2:	d101      	bne.n	800b2c8 <UART_SetConfig+0x12a0>
 800b2c4:	2380      	movs	r3, #128	; 0x80
 800b2c6:	e022      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2cc:	e01f      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b2d2:	e01c      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2d8:	e019      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b2de:	e016      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2e4:	e013      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2e6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800b2ea:	e010      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2ec:	f640 43cc 	movw	r3, #3276	; 0xccc
 800b2f0:	e00d      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2f6:	e00a      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2f8:	f241 5355 	movw	r3, #5461	; 0x1555
 800b2fc:	e007      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b2fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b302:	e004      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b308:	e001      	b.n	800b30e <UART_SetConfig+0x12e6>
 800b30a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	6852      	ldr	r2, [r2, #4]
 800b312:	0852      	lsrs	r2, r2, #1
 800b314:	441a      	add	r2, r3
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b31e:	b29b      	uxth	r3, r3
 800b320:	61fb      	str	r3, [r7, #28]
        break;
 800b322:	e002      	b.n	800b32a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 800b324:	2301      	movs	r3, #1
 800b326:	76fb      	strb	r3, [r7, #27]
        break;
 800b328:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b32a:	69fb      	ldr	r3, [r7, #28]
 800b32c:	2b0f      	cmp	r3, #15
 800b32e:	d908      	bls.n	800b342 <UART_SetConfig+0x131a>
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b336:	d204      	bcs.n	800b342 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	69fa      	ldr	r2, [r7, #28]
 800b33e:	60da      	str	r2, [r3, #12]
 800b340:	e001      	b.n	800b346 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800b342:	2301      	movs	r3, #1
 800b344:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2201      	movs	r2, #1
 800b352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800b362:	7efb      	ldrb	r3, [r7, #27]
}
 800b364:	4618      	mov	r0, r3
 800b366:	3728      	adds	r7, #40	; 0x28
 800b368:	46bd      	mov	sp, r7
 800b36a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800b36e:	bf00      	nop
 800b370:	00f42400 	.word	0x00f42400
 800b374:	0001e848 	.word	0x0001e848
 800b378:	0003d090 	.word	0x0003d090
 800b37c:	0007a120 	.word	0x0007a120
 800b380:	000f4240 	.word	0x000f4240
 800b384:	00145855 	.word	0x00145855
 800b388:	00186a00 	.word	0x00186a00
 800b38c:	001e8480 	.word	0x001e8480
 800b390:	0028b0aa 	.word	0x0028b0aa
 800b394:	003d0900 	.word	0x003d0900
 800b398:	007a1200 	.word	0x007a1200

0800b39c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b083      	sub	sp, #12
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3a8:	f003 0301 	and.w	r3, r3, #1
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d00a      	beq.n	800b3c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	685b      	ldr	r3, [r3, #4]
 800b3b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	430a      	orrs	r2, r1
 800b3c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ca:	f003 0302 	and.w	r3, r3, #2
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00a      	beq.n	800b3e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	430a      	orrs	r2, r1
 800b3e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ec:	f003 0304 	and.w	r3, r3, #4
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d00a      	beq.n	800b40a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	685b      	ldr	r3, [r3, #4]
 800b3fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	430a      	orrs	r2, r1
 800b408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b40e:	f003 0308 	and.w	r3, r3, #8
 800b412:	2b00      	cmp	r3, #0
 800b414:	d00a      	beq.n	800b42c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	685b      	ldr	r3, [r3, #4]
 800b41c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	430a      	orrs	r2, r1
 800b42a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b430:	f003 0310 	and.w	r3, r3, #16
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00a      	beq.n	800b44e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	689b      	ldr	r3, [r3, #8]
 800b43e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	430a      	orrs	r2, r1
 800b44c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b452:	f003 0320 	and.w	r3, r3, #32
 800b456:	2b00      	cmp	r3, #0
 800b458:	d00a      	beq.n	800b470 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	430a      	orrs	r2, r1
 800b46e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d01a      	beq.n	800b4b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	685b      	ldr	r3, [r3, #4]
 800b482:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	430a      	orrs	r2, r1
 800b490:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b496:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b49a:	d10a      	bne.n	800b4b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	430a      	orrs	r2, r1
 800b4b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d00a      	beq.n	800b4d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	430a      	orrs	r2, r1
 800b4d2:	605a      	str	r2, [r3, #4]
  }
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b086      	sub	sp, #24
 800b4e4:	af02      	add	r7, sp, #8
 800b4e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b4f0:	f7f9 ff02 	bl	80052f8 <HAL_GetTick>
 800b4f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	f003 0308 	and.w	r3, r3, #8
 800b500:	2b08      	cmp	r3, #8
 800b502:	d10e      	bne.n	800b522 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b504:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	2200      	movs	r2, #0
 800b50e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 f82c 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800b518:	4603      	mov	r3, r0
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d001      	beq.n	800b522 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b51e:	2303      	movs	r3, #3
 800b520:	e022      	b.n	800b568 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	f003 0304 	and.w	r3, r3, #4
 800b52c:	2b04      	cmp	r3, #4
 800b52e:	d10e      	bne.n	800b54e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b530:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b534:	9300      	str	r3, [sp, #0]
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 f816 	bl	800b570 <UART_WaitOnFlagUntilTimeout>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d001      	beq.n	800b54e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b54a:	2303      	movs	r3, #3
 800b54c:	e00c      	b.n	800b568 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2220      	movs	r2, #32
 800b552:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	2220      	movs	r2, #32
 800b55a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2200      	movs	r2, #0
 800b562:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3710      	adds	r7, #16
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	603b      	str	r3, [r7, #0]
 800b57c:	4613      	mov	r3, r2
 800b57e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b580:	e02c      	b.n	800b5dc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b582:	69bb      	ldr	r3, [r7, #24]
 800b584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b588:	d028      	beq.n	800b5dc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b58a:	f7f9 feb5 	bl	80052f8 <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	1ad3      	subs	r3, r2, r3
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	429a      	cmp	r2, r3
 800b598:	d302      	bcc.n	800b5a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b59a:	69bb      	ldr	r3, [r7, #24]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d11d      	bne.n	800b5dc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	681a      	ldr	r2, [r3, #0]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b5ae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	689a      	ldr	r2, [r3, #8]
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f022 0201 	bic.w	r2, r2, #1
 800b5be:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2220      	movs	r2, #32
 800b5c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2220      	movs	r2, #32
 800b5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800b5d8:	2303      	movs	r3, #3
 800b5da:	e00f      	b.n	800b5fc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	69da      	ldr	r2, [r3, #28]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	4013      	ands	r3, r2
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	bf0c      	ite	eq
 800b5ec:	2301      	moveq	r3, #1
 800b5ee:	2300      	movne	r3, #0
 800b5f0:	b2db      	uxtb	r3, r3
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	79fb      	ldrb	r3, [r7, #7]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d0c3      	beq.n	800b582 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b604:	b480      	push	{r7}
 800b606:	b085      	sub	sp, #20
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b612:	2b01      	cmp	r3, #1
 800b614:	d101      	bne.n	800b61a <HAL_UARTEx_DisableFifoMode+0x16>
 800b616:	2302      	movs	r3, #2
 800b618:	e027      	b.n	800b66a <HAL_UARTEx_DisableFifoMode+0x66>
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2201      	movs	r2, #1
 800b61e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	2224      	movs	r2, #36	; 0x24
 800b626:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	681a      	ldr	r2, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f022 0201 	bic.w	r2, r2, #1
 800b640:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b648:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2220      	movs	r2, #32
 800b65c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2200      	movs	r2, #0
 800b664:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b668:	2300      	movs	r3, #0
}
 800b66a:	4618      	mov	r0, r3
 800b66c:	3714      	adds	r7, #20
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b686:	2b01      	cmp	r3, #1
 800b688:	d101      	bne.n	800b68e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b68a:	2302      	movs	r3, #2
 800b68c:	e02d      	b.n	800b6ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2201      	movs	r2, #1
 800b692:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2224      	movs	r2, #36	; 0x24
 800b69a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	681a      	ldr	r2, [r3, #0]
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f022 0201 	bic.w	r2, r2, #1
 800b6b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	683a      	ldr	r2, [r7, #0]
 800b6c6:	430a      	orrs	r2, r1
 800b6c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6ca:	6878      	ldr	r0, [r7, #4]
 800b6cc:	f000 f850 	bl	800b770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2220      	movs	r2, #32
 800b6dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b084      	sub	sp, #16
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
 800b6fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b702:	2b01      	cmp	r3, #1
 800b704:	d101      	bne.n	800b70a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b706:	2302      	movs	r3, #2
 800b708:	e02d      	b.n	800b766 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	2201      	movs	r2, #1
 800b70e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	2224      	movs	r2, #36	; 0x24
 800b716:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	681a      	ldr	r2, [r3, #0]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	f022 0201 	bic.w	r2, r2, #1
 800b730:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	689b      	ldr	r3, [r3, #8]
 800b738:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	683a      	ldr	r2, [r7, #0]
 800b742:	430a      	orrs	r2, r1
 800b744:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b746:	6878      	ldr	r0, [r7, #4]
 800b748:	f000 f812 	bl	800b770 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68fa      	ldr	r2, [r7, #12]
 800b752:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2220      	movs	r2, #32
 800b758:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2200      	movs	r2, #0
 800b760:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3710      	adds	r7, #16
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
	...

0800b770 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b770:	b480      	push	{r7}
 800b772:	b089      	sub	sp, #36	; 0x24
 800b774:	af00      	add	r7, sp, #0
 800b776:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b778:	4a2f      	ldr	r2, [pc, #188]	; (800b838 <UARTEx_SetNbDataToProcess+0xc8>)
 800b77a:	f107 0314 	add.w	r3, r7, #20
 800b77e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b782:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b786:	4a2d      	ldr	r2, [pc, #180]	; (800b83c <UARTEx_SetNbDataToProcess+0xcc>)
 800b788:	f107 030c 	add.w	r3, r7, #12
 800b78c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b790:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d108      	bne.n	800b7ae <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2201      	movs	r2, #1
 800b7a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b7ac:	e03d      	b.n	800b82a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b7ae:	2308      	movs	r3, #8
 800b7b0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b7b2:	2308      	movs	r3, #8
 800b7b4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	0e5b      	lsrs	r3, r3, #25
 800b7be:	b2db      	uxtb	r3, r3
 800b7c0:	f003 0307 	and.w	r3, r3, #7
 800b7c4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	689b      	ldr	r3, [r3, #8]
 800b7cc:	0f5b      	lsrs	r3, r3, #29
 800b7ce:	b2db      	uxtb	r3, r3
 800b7d0:	f003 0307 	and.w	r3, r3, #7
 800b7d4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b7d6:	7fbb      	ldrb	r3, [r7, #30]
 800b7d8:	7f3a      	ldrb	r2, [r7, #28]
 800b7da:	f107 0120 	add.w	r1, r7, #32
 800b7de:	440a      	add	r2, r1
 800b7e0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b7e4:	fb02 f303 	mul.w	r3, r2, r3
 800b7e8:	7f3a      	ldrb	r2, [r7, #28]
 800b7ea:	f107 0120 	add.w	r1, r7, #32
 800b7ee:	440a      	add	r2, r1
 800b7f0:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b7f4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b800:	7ffb      	ldrb	r3, [r7, #31]
 800b802:	7f7a      	ldrb	r2, [r7, #29]
 800b804:	f107 0120 	add.w	r1, r7, #32
 800b808:	440a      	add	r2, r1
 800b80a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b80e:	fb02 f303 	mul.w	r3, r2, r3
 800b812:	7f7a      	ldrb	r2, [r7, #29]
 800b814:	f107 0120 	add.w	r1, r7, #32
 800b818:	440a      	add	r2, r1
 800b81a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b81e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b822:	b29a      	uxth	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b82a:	bf00      	nop
 800b82c:	3724      	adds	r7, #36	; 0x24
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
 800b836:	bf00      	nop
 800b838:	0800fd48 	.word	0x0800fd48
 800b83c:	0800fd50 	.word	0x0800fd50

0800b840 <VBS_GetAvBusVoltage_V>:
  * @brief  It return latest averaged Vbus measurement expressed in Volts
  * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  * @retval uint16_t Latest averaged Vbus measurement in Volts
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
 800b840:	b480      	push	{r7}
 800b842:	b085      	sub	sp, #20
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	88db      	ldrh	r3, [r3, #6]
 800b84c:	60fb      	str	r3, [r7, #12]
  temp *= pHandle->ConversionFactor;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	885b      	ldrh	r3, [r3, #2]
 800b852:	461a      	mov	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	fb02 f303 	mul.w	r3, r2, r3
 800b85a:	60fb      	str	r3, [r7, #12]
  temp /= 65536u;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	0c1b      	lsrs	r3, r3, #16
 800b860:	60fb      	str	r3, [r7, #12]

  return ( ( uint16_t )temp );
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	b29b      	uxth	r3, r3
}
 800b866:	4618      	mov	r0, r3
 800b868:	3714      	adds	r7, #20
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 800b872:	b480      	push	{r7}
 800b874:	b089      	sub	sp, #36	; 0x24
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
  uint16_t table_element;
  uint32_t uw_temp;
  int32_t  sw_temp;
  qd_t local_vqd = Vqd;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	60fb      	str	r3, [r7, #12]

  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800b880:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b884:	f9b7 2000 	ldrsh.w	r2, [r7]
 800b888:	fb02 f203 	mul.w	r2, r2, r3
            ( int32_t )( Vqd.d ) * Vqd.d;
 800b88c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b890:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800b894:	fb01 f303 	mul.w	r3, r1, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 800b898:	4413      	add	r3, r2
 800b89a:	61fb      	str	r3, [r7, #28]

  uw_temp = ( uint32_t ) sw_temp;
 800b89c:	69fb      	ldr	r3, [r7, #28]
 800b89e:	61bb      	str	r3, [r7, #24]

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	881b      	ldrh	r3, [r3, #0]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	fb03 f302 	mul.w	r3, r3, r2
 800b8ae:	69ba      	ldr	r2, [r7, #24]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d930      	bls.n	800b916 <Circle_Limitation+0xa4>
  {

    uw_temp /= ( uint32_t )( 16777216 );
 800b8b4:	69bb      	ldr	r3, [r7, #24]
 800b8b6:	0e1b      	lsrs	r3, r3, #24
 800b8b8:	61bb      	str	r3, [r7, #24]

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	f893 30b2 	ldrb.w	r3, [r3, #178]	; 0xb2
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	1a9b      	subs	r3, r3, r2
 800b8c6:	61bb      	str	r3, [r7, #24]

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	005b      	lsls	r3, r3, #1
 800b8d0:	4413      	add	r3, r2
 800b8d2:	889b      	ldrh	r3, [r3, #4]
 800b8d4:	82fb      	strh	r3, [r7, #22]

    sw_temp = Vqd.q * ( int32_t )table_element;
 800b8d6:	f9b7 3000 	ldrsh.w	r3, [r7]
 800b8da:	461a      	mov	r2, r3
 800b8dc:	8afb      	ldrh	r3, [r7, #22]
 800b8de:	fb03 f302 	mul.w	r3, r3, r2
 800b8e2:	61fb      	str	r3, [r7, #28]
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 800b8e4:	69fb      	ldr	r3, [r7, #28]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	da02      	bge.n	800b8f0 <Circle_Limitation+0x7e>
 800b8ea:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b8ee:	337f      	adds	r3, #127	; 0x7f
 800b8f0:	13db      	asrs	r3, r3, #15
 800b8f2:	b21b      	sxth	r3, r3
 800b8f4:	81bb      	strh	r3, [r7, #12]

    sw_temp = Vqd.d * ( int32_t )( table_element );
 800b8f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	8afb      	ldrh	r3, [r7, #22]
 800b8fe:	fb03 f302 	mul.w	r3, r3, r2
 800b902:	61fb      	str	r3, [r7, #28]
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 800b904:	69fb      	ldr	r3, [r7, #28]
 800b906:	2b00      	cmp	r3, #0
 800b908:	da02      	bge.n	800b910 <Circle_Limitation+0x9e>
 800b90a:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 800b90e:	337f      	adds	r3, #127	; 0x7f
 800b910:	13db      	asrs	r3, r3, #15
 800b912:	b21b      	sxth	r3, r3
 800b914:	81fb      	strh	r3, [r7, #14]
  }

  return ( local_vqd );
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	613b      	str	r3, [r7, #16]
 800b91a:	2300      	movs	r3, #0
 800b91c:	8a3a      	ldrh	r2, [r7, #16]
 800b91e:	f362 030f 	bfi	r3, r2, #0, #16
 800b922:	8a7a      	ldrh	r2, [r7, #18]
 800b924:	f362 431f 	bfi	r3, r2, #16, #16
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3724      	adds	r7, #36	; 0x24
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <DAC_SetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A.
  * @retval none.
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
 800b934:	b480      	push	{r7}
 800b936:	b085      	sub	sp, #20
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
 800b93c:	460b      	mov	r3, r1
 800b93e:	70fb      	strb	r3, [r7, #3]
 800b940:	4613      	mov	r3, r2
 800b942:	70bb      	strb	r3, [r7, #2]
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	60fb      	str	r3, [r7, #12]
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 800b948:	78fb      	ldrb	r3, [r7, #3]
 800b94a:	68fa      	ldr	r2, [r7, #12]
 800b94c:	4413      	add	r3, r2
 800b94e:	78ba      	ldrb	r2, [r7, #2]
 800b950:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
}
 800b954:	bf00      	nop
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <DAC_GetChannelConfig>:
  * @retval MC_Protocol_REG_t The variables provided in out through the inspected
  *         channel. It will be one of the exported UI register (Ex.
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	460b      	mov	r3, r1
 800b96a:	70fb      	strb	r3, [r7, #3]
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	60fb      	str	r3, [r7, #12]
  return (pDacHandle->bChannel_variable[bChannel]);
 800b970:	78fb      	ldrb	r3, [r7, #3]
 800b972:	68fa      	ldr	r2, [r7, #12]
 800b974:	4413      	add	r3, r2
 800b976:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr

0800b986 <DAC_SetUserChannelValue>:
  * @param  hValue the value to be put in output.
  * @retval none.
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
 800b986:	b480      	push	{r7}
 800b988:	b085      	sub	sp, #20
 800b98a:	af00      	add	r7, sp, #0
 800b98c:	6078      	str	r0, [r7, #4]
 800b98e:	460b      	mov	r3, r1
 800b990:	70fb      	strb	r3, [r7, #3]
 800b992:	4613      	mov	r3, r2
 800b994:	803b      	strh	r3, [r7, #0]
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	60fb      	str	r3, [r7, #12]
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 800b99a:	78fb      	ldrb	r3, [r7, #3]
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	3318      	adds	r3, #24
 800b9a0:	005b      	lsls	r3, r3, #1
 800b9a2:	4413      	add	r3, r2
 800b9a4:	883a      	ldrh	r2, [r7, #0]
 800b9a6:	805a      	strh	r2, [r3, #2]
}
 800b9a8:	bf00      	nop
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr

0800b9b4 <DAC_GetUserChannelValue>:
  * @param  user interface handle
  * @param  bUserChNumber the "User DAC channel" to be programmed.
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b085      	sub	sp, #20
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	460b      	mov	r3, r1
 800b9be:	70fb      	strb	r3, [r7, #3]
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	60fb      	str	r3, [r7, #12]
  return (pDacHandle->hUserValue[bUserChNumber]);
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	3318      	adds	r3, #24
 800b9ca:	005b      	lsls	r3, r3, #1
 800b9cc:	4413      	add	r3, r2
 800b9ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3714      	adds	r7, #20
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9dc:	4770      	bx	lr

0800b9de <EAC_Init>:
* @param  pENC: the encoder used by the EAC.
* @retval none.
*/
__weak void EAC_Init( EncAlign_Handle_t * pHandle, SpeednTorqCtrl_Handle_t * pSTC, VirtualSpeedSensor_Handle_t * pVSS,
               ENCODER_Handle_t * pENC )
{
 800b9de:	b480      	push	{r7}
 800b9e0:	b085      	sub	sp, #20
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	60f8      	str	r0, [r7, #12]
 800b9e6:	60b9      	str	r1, [r7, #8]
 800b9e8:	607a      	str	r2, [r7, #4]
 800b9ea:	603b      	str	r3, [r7, #0]
  pHandle->pSTC = pSTC;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	68ba      	ldr	r2, [r7, #8]
 800b9f0:	601a      	str	r2, [r3, #0]
  pHandle->pVSS = pVSS;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	687a      	ldr	r2, [r7, #4]
 800b9f6:	605a      	str	r2, [r3, #4]
  pHandle->pENC = pENC;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	683a      	ldr	r2, [r7, #0]
 800b9fc:	609a      	str	r2, [r3, #8]
  pHandle->EncAligned = false;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2200      	movs	r2, #0
 800ba02:	739a      	strb	r2, [r3, #14]
  pHandle->EncRestart = false;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	2200      	movs	r2, #0
 800ba08:	73da      	strb	r2, [r3, #15]
}
 800ba0a:	bf00      	nop
 800ba0c:	3714      	adds	r7, #20
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
	...

0800ba18 <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b084      	sub	sp, #16
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	2200      	movs	r2, #0
 800ba26:	2100      	movs	r1, #0
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f004 f8a1 	bl	800fb70 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685a      	ldr	r2, [r3, #4]
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f004 f87b 	bl	800fb36 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	2100      	movs	r1, #0
 800ba46:	4618      	mov	r0, r3
 800ba48:	f003 fad8 	bl	800effc <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2200      	movs	r2, #0
 800ba52:	2100      	movs	r1, #0
 800ba54:	4618      	mov	r0, r3
 800ba56:	f003 fae3 	bl	800f020 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	6818      	ldr	r0, [r3, #0]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f9b3 1012 	ldrsh.w	r1, [r3, #18]
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	8adb      	ldrh	r3, [r3, #22]
 800ba68:	461a      	mov	r2, r3
 800ba6a:	f003 fad9 	bl	800f020 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	8adb      	ldrh	r3, [r3, #22]
 800ba72:	461a      	mov	r2, r3
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	8a1b      	ldrh	r3, [r3, #16]
 800ba78:	fb03 f302 	mul.w	r3, r3, r2
 800ba7c:	60fb      	str	r3, [r7, #12]
  wAux /= 1000u;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	4a09      	ldr	r2, [pc, #36]	; (800baa8 <EAC_StartAlignment+0x90>)
 800ba82:	fba2 2303 	umull	r2, r3, r2, r3
 800ba86:	099b      	lsrs	r3, r3, #6
 800ba88:	60fb      	str	r3, [r7, #12]
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	819a      	strh	r2, [r3, #12]
  pHandle->hRemainingTicks++;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	899b      	ldrh	r3, [r3, #12]
 800ba96:	3301      	adds	r3, #1
 800ba98:	b29a      	uxth	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	819a      	strh	r2, [r3, #12]
}
 800ba9e:	bf00      	nop
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
 800baa6:	bf00      	nop
 800baa8:	10624dd3 	.word	0x10624dd3

0800baac <EAC_Exec>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval bool It returns true when the programmed alignment has been
  *         completed.
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
 800baac:	b580      	push	{r7, lr}
 800baae:	b084      	sub	sp, #16
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  bool retVal = true;
 800bab4:	2301      	movs	r3, #1
 800bab6:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->hRemainingTicks > 0u )
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	899b      	ldrh	r3, [r3, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d020      	beq.n	800bb02 <EAC_Exec+0x56>
  {
    pHandle->hRemainingTicks--;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	899b      	ldrh	r3, [r3, #12]
 800bac4:	3b01      	subs	r3, #1
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	819a      	strh	r2, [r3, #12]

    if ( pHandle->hRemainingTicks == 0u )
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	899b      	ldrh	r3, [r3, #12]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d114      	bne.n	800bafe <EAC_Exec+0x52>
    {
      /* Set pVSS mechanical angle.*/
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	689a      	ldr	r2, [r3, #8]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800bade:	4619      	mov	r1, r3
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	7e1b      	ldrb	r3, [r3, #24]
 800bae4:	fb91 f3f3 	sdiv	r3, r1, r3
 800bae8:	b21b      	sxth	r3, r3
 800baea:	4619      	mov	r1, r3
 800baec:	4610      	mov	r0, r2
 800baee:	f000 fadf 	bl	800c0b0 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2201      	movs	r2, #1
 800baf6:	739a      	strb	r2, [r3, #14]
      retVal = true;
 800baf8:	2301      	movs	r3, #1
 800bafa:	73fb      	strb	r3, [r7, #15]
 800bafc:	e001      	b.n	800bb02 <EAC_Exec+0x56>
    }
    else
    {
      retVal = false;
 800bafe:	2300      	movs	r3, #0
 800bb00:	73fb      	strb	r3, [r7, #15]
    }
  }

  return retVal;
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb04:	4618      	mov	r0, r3
 800bb06:	3710      	adds	r7, #16
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}

0800bb0c <EAC_IsAligned>:
  * @brief  It returns true if the encoder has been aligned at least
  *         one time, false if hasn't been never aligned.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b083      	sub	sp, #12
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  return pHandle->EncAligned;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	7b9b      	ldrb	r3, [r3, #14]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <EAC_SetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	70fb      	strb	r3, [r7, #3]
  pHandle->EncRestart = restart;
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	78fa      	ldrb	r2, [r7, #3]
 800bb34:	73da      	strb	r2, [r3, #15]
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr

0800bb42 <EAC_GetRestartState>:
/**
  * @brief  Returns true if a restart after an encoder alignment has been requested.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
 800bb42:	b480      	push	{r7}
 800bb44:	b083      	sub	sp, #12
 800bb46:	af00      	add	r7, sp, #0
 800bb48:	6078      	str	r0, [r7, #4]
  return pHandle->EncRestart;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	7bdb      	ldrb	r3, [r3, #15]
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <LL_TIM_EnableCounter>:
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b083      	sub	sp, #12
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	f043 0201 	orr.w	r2, r3, #1
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	601a      	str	r2, [r3, #0]
}
 800bb6e:	bf00      	nop
 800bb70:	370c      	adds	r7, #12
 800bb72:	46bd      	mov	sp, r7
 800bb74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb78:	4770      	bx	lr

0800bb7a <LL_TIM_SetCounter>:
{
 800bb7a:	b480      	push	{r7}
 800bb7c:	b083      	sub	sp, #12
 800bb7e:	af00      	add	r7, sp, #0
 800bb80:	6078      	str	r0, [r7, #4]
 800bb82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	683a      	ldr	r2, [r7, #0]
 800bb88:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bb8a:	bf00      	nop
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr

0800bb96 <LL_TIM_GetCounter>:
{
 800bb96:	b480      	push	{r7}
 800bb98:	b083      	sub	sp, #12
 800bb9a:	af00      	add	r7, sp, #0
 800bb9c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	370c      	adds	r7, #12
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr

0800bbae <LL_TIM_GetDirection>:
{
 800bbae:	b480      	push	{r7}
 800bbb0:	b083      	sub	sp, #12
 800bbb2:	af00      	add	r7, sp, #0
 800bbb4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f003 0310 	and.w	r3, r3, #16
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <LL_TIM_EnableUIFRemap>:
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	601a      	str	r2, [r3, #0]
}
 800bbde:	bf00      	nop
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
	...

0800bbec <LL_TIM_IC_SetFilter>:
{
 800bbec:	b4b0      	push	{r4, r5, r7}
 800bbee:	b085      	sub	sp, #20
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	2b01      	cmp	r3, #1
 800bbfc:	d02e      	beq.n	800bc5c <LL_TIM_IC_SetFilter+0x70>
 800bbfe:	68bb      	ldr	r3, [r7, #8]
 800bc00:	2b04      	cmp	r3, #4
 800bc02:	d029      	beq.n	800bc58 <LL_TIM_IC_SetFilter+0x6c>
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	2b10      	cmp	r3, #16
 800bc08:	d024      	beq.n	800bc54 <LL_TIM_IC_SetFilter+0x68>
 800bc0a:	68bb      	ldr	r3, [r7, #8]
 800bc0c:	2b40      	cmp	r3, #64	; 0x40
 800bc0e:	d01f      	beq.n	800bc50 <LL_TIM_IC_SetFilter+0x64>
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bc16:	d019      	beq.n	800bc4c <LL_TIM_IC_SetFilter+0x60>
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc1e:	d013      	beq.n	800bc48 <LL_TIM_IC_SetFilter+0x5c>
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc26:	d00d      	beq.n	800bc44 <LL_TIM_IC_SetFilter+0x58>
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bc2e:	d007      	beq.n	800bc40 <LL_TIM_IC_SetFilter+0x54>
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc36:	d101      	bne.n	800bc3c <LL_TIM_IC_SetFilter+0x50>
 800bc38:	2308      	movs	r3, #8
 800bc3a:	e010      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc3c:	2309      	movs	r3, #9
 800bc3e:	e00e      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc40:	2307      	movs	r3, #7
 800bc42:	e00c      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc44:	2306      	movs	r3, #6
 800bc46:	e00a      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc48:	2305      	movs	r3, #5
 800bc4a:	e008      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc4c:	2304      	movs	r3, #4
 800bc4e:	e006      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc50:	2303      	movs	r3, #3
 800bc52:	e004      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc54:	2302      	movs	r3, #2
 800bc56:	e002      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc58:	2301      	movs	r3, #1
 800bc5a:	e000      	b.n	800bc5e <LL_TIM_IC_SetFilter+0x72>
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	3318      	adds	r3, #24
 800bc64:	461a      	mov	r2, r3
 800bc66:	4629      	mov	r1, r5
 800bc68:	4b0c      	ldr	r3, [pc, #48]	; (800bc9c <LL_TIM_IC_SetFilter+0xb0>)
 800bc6a:	5c5b      	ldrb	r3, [r3, r1]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 800bc70:	6822      	ldr	r2, [r4, #0]
 800bc72:	4629      	mov	r1, r5
 800bc74:	4b0a      	ldr	r3, [pc, #40]	; (800bca0 <LL_TIM_IC_SetFilter+0xb4>)
 800bc76:	5c5b      	ldrb	r3, [r3, r1]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	23f0      	movs	r3, #240	; 0xf0
 800bc7c:	408b      	lsls	r3, r1
 800bc7e:	43db      	mvns	r3, r3
 800bc80:	401a      	ands	r2, r3
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	0c1b      	lsrs	r3, r3, #16
 800bc86:	4628      	mov	r0, r5
 800bc88:	4905      	ldr	r1, [pc, #20]	; (800bca0 <LL_TIM_IC_SetFilter+0xb4>)
 800bc8a:	5c09      	ldrb	r1, [r1, r0]
 800bc8c:	408b      	lsls	r3, r1
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	6023      	str	r3, [r4, #0]
}
 800bc92:	bf00      	nop
 800bc94:	3714      	adds	r7, #20
 800bc96:	46bd      	mov	sp, r7
 800bc98:	bcb0      	pop	{r4, r5, r7}
 800bc9a:	4770      	bx	lr
 800bc9c:	0800fec0 	.word	0x0800fec0
 800bca0:	0800fecc 	.word	0x0800fecc

0800bca4 <LL_TIM_ClearFlag_UPDATE>:
{
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f06f 0201 	mvn.w	r2, #1
 800bcb2:	611a      	str	r2, [r3, #16]
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <LL_TIM_EnableIT_UPDATE>:
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68db      	ldr	r3, [r3, #12]
 800bccc:	f043 0201 	orr.w	r2, r3, #1
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	60da      	str	r2, [r3, #12]
}
 800bcd4:	bf00      	nop
 800bcd6:	370c      	adds	r7, #12
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <LL_TIM_DisableIT_UPDATE>:
{
 800bce0:	b480      	push	{r7}
 800bce2:	b083      	sub	sp, #12
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	68db      	ldr	r3, [r3, #12]
 800bcec:	f023 0201 	bic.w	r2, r3, #1
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	60da      	str	r2, [r3, #12]
}
 800bcf4:	bf00      	nop
 800bcf6:	370c      	adds	r7, #12
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <ENC_Init>:
            sensors.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b086      	sub	sp, #24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]

  TIM_TypeDef * TIMx = pHandle->TIMx;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6a1b      	ldr	r3, [r3, #32]
 800bd0c:	613b      	str	r3, [r7, #16]
  uint8_t BufferSize;
  uint8_t Index;


#ifdef TIM_CNT_UIFCPY
  LL_TIM_EnableUIFRemap ( TIMx );
 800bd0e:	6938      	ldr	r0, [r7, #16]
 800bd10:	f7ff ff5b 	bl	800bbca <LL_TIM_EnableUIFRemap>
#define ENC_MAX_OVERFLOW_NB     ((uint16_t)2048) /* 2^11*/
#else
#define ENC_MAX_OVERFLOW_NB     (1)
#endif
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );
 800bd14:	2100      	movs	r1, #0
 800bd16:	6938      	ldr	r0, [r7, #16]
 800bd18:	f7ff ff2f 	bl	800bb7a <LL_TIM_SetCounter>

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bd22:	461a      	mov	r2, r3
 800bd24:	f04f 33ff 	mov.w	r3, #4294967295
 800bd28:	fbb3 f2f2 	udiv	r2, r3, r2
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	669a      	str	r2, [r3, #104]	; 0x68
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 800bd36:	461a      	mov	r2, r3
 800bd38:	4613      	mov	r3, r2
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	4413      	add	r3, r2
 800bd3e:	005b      	lsls	r3, r3, #1
 800bd40:	461a      	mov	r2, r3
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800bd4c:	051b      	lsls	r3, r3, #20
 800bd4e:	461a      	mov	r2, r3
 800bd50:	2101      	movs	r1, #1
 800bd52:	6938      	ldr	r0, [r7, #16]
 800bd54:	f7ff ff4a 	bl	800bbec <LL_TIM_IC_SetFilter>
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH2, ( uint32_t )(pHandle->ICx_Filter << 20));
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800bd5e:	051b      	lsls	r3, r3, #20
 800bd60:	461a      	mov	r2, r3
 800bd62:	2110      	movs	r1, #16
 800bd64:	6938      	ldr	r0, [r7, #16]
 800bd66:	f7ff ff41 	bl	800bbec <LL_TIM_IC_SetFilter>

  LL_TIM_ClearFlag_UPDATE ( TIMx );
 800bd6a:	6938      	ldr	r0, [r7, #16]
 800bd6c:	f7ff ff9a 	bl	800bca4 <LL_TIM_ClearFlag_UPDATE>
  LL_TIM_EnableIT_UPDATE ( TIMx );
 800bd70:	6938      	ldr	r0, [r7, #16]
 800bd72:	f7ff ffa5 	bl	800bcc0 <LL_TIM_EnableIT_UPDATE>

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );
 800bd76:	6938      	ldr	r0, [r7, #16]
 800bd78:	f7ff feef 	bl	800bb5a <LL_TIM_EnableCounter>

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800bd82:	73fb      	strb	r3, [r7, #15]

  for ( Index = 0u; Index < BufferSize; Index++ )
 800bd84:	2300      	movs	r3, #0
 800bd86:	75fb      	strb	r3, [r7, #23]
 800bd88:	e008      	b.n	800bd9c <ENC_Init+0x9c>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800bd8a:	7dfa      	ldrb	r2, [r7, #23]
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	320a      	adds	r2, #10
 800bd90:	2100      	movs	r1, #0
 800bd92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( Index = 0u; Index < BufferSize; Index++ )
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	3301      	adds	r3, #1
 800bd9a:	75fb      	strb	r3, [r7, #23]
 800bd9c:	7dfa      	ldrb	r2, [r7, #23]
 800bd9e:	7bfb      	ldrb	r3, [r7, #15]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d3f2      	bcc.n	800bd8a <ENC_Init+0x8a>
  }
}
 800bda4:	bf00      	nop
 800bda6:	3718      	adds	r7, #24
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	bd80      	pop	{r7, pc}

0800bdac <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 800bdac:	b480      	push	{r7}
 800bdae:	b085      	sub	sp, #20
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	6078      	str	r0, [r7, #4]
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	73fb      	strb	r3, [r7, #15]
 800bdb8:	e008      	b.n	800bdcc <ENC_Clear+0x20>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800bdba:	7bfa      	ldrb	r2, [r7, #15]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	320a      	adds	r2, #10
 800bdc0:	2100      	movs	r1, #0
 800bdc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 800bdc6:	7bfb      	ldrb	r3, [r7, #15]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	73fb      	strb	r3, [r7, #15]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800bdd2:	7bfa      	ldrb	r2, [r7, #15]
 800bdd4:	429a      	cmp	r2, r3
 800bdd6:	d3f0      	bcc.n	800bdba <ENC_Clear+0xe>
  }
  pHandle->SensorIsReliable = true;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	2201      	movs	r2, #1
 800bddc:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
}
 800bde0:	bf00      	nop
 800bde2:	3714      	adds	r7, #20
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr

0800bdec <ENC_CalcAngle>:
*         of the instantaneous value of the timer counter.
* @param  pHandle: handler of the current instance of the encoder component
* @retval int16_t Measured electrical angle in s16degree format.
*/
__weak int16_t ENC_CalcAngle( ENCODER_Handle_t * pHandle )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b086      	sub	sp, #24
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7ff fecc 	bl	800bb96 <LL_TIM_GetCounter>
 800bdfe:	4603      	mov	r3, r0
 800be00:	b29b      	uxth	r3, r3
           ( int32_t )( pHandle->U32MAXdivPulseNumber );
 800be02:	687a      	ldr	r2, [r7, #4]
 800be04:	6e92      	ldr	r2, [r2, #104]	; 0x68
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 800be06:	fb02 f303 	mul.w	r3, r2, r3
 800be0a:	617b      	str	r3, [r7, #20]

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	2b00      	cmp	r3, #0
 800be10:	da02      	bge.n	800be18 <ENC_CalcAngle+0x2c>
 800be12:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800be16:	33ff      	adds	r3, #255	; 0xff
 800be18:	141b      	asrs	r3, r3, #16
 800be1a:	827b      	strh	r3, [r7, #18]

  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	88db      	ldrh	r3, [r3, #6]
 800be20:	823b      	strh	r3, [r7, #16]

  pHandle->_Super.hMecAngle = mecAngle;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	8a7a      	ldrh	r2, [r7, #18]
 800be26:	80da      	strh	r2, [r3, #6]
  
  /*Computes and stores the rotor electrical angle*/
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	785b      	ldrb	r3, [r3, #1]
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	8a7b      	ldrh	r3, [r7, #18]
 800be30:	fb12 f303 	smulbb	r3, r2, r3
 800be34:	b29b      	uxth	r3, r3
 800be36:	81fb      	strh	r3, [r7, #14]

  pHandle->_Super.hElAngle = elAngle;
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	89fa      	ldrh	r2, [r7, #14]
 800be3c:	809a      	strh	r2, [r3, #4]
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 800be3e:	8a7a      	ldrh	r2, [r7, #18]
 800be40:	8a3b      	ldrh	r3, [r7, #16]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	b29b      	uxth	r3, r3
 800be46:	81bb      	strh	r3, [r7, #12]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	689a      	ldr	r2, [r3, #8]
 800be4c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800be50:	441a      	add	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	609a      	str	r2, [r3, #8]

  /*Returns rotor electrical angle*/
  return ( elAngle );
 800be56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3718      	adds	r7, #24
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}

0800be62 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800be62:	b580      	push	{r7, lr}
 800be64:	b08c      	sub	sp, #48	; 0x30
 800be66:	af00      	add	r7, sp, #0
 800be68:	6078      	str	r0, [r7, #4]
 800be6a:	6039      	str	r1, [r7, #0]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a1b      	ldr	r3, [r3, #32]
 800be70:	627b      	str	r3, [r7, #36]	; 0x24
  int32_t wOverallAngleVariation = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	62fb      	str	r3, [r7, #44]	; 0x2c
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
 800be76:	2300      	movs	r3, #0
 800be78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  bool bReliability = true;
 800be7c:	2301      	movs	r3, #1
 800be7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800be88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t OverflowCntSample;
  uint32_t CntCapture;
  uint32_t directionSample;
  uint8_t OFbit = 0;
 800be8c:	2300      	movs	r3, #0
 800be8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

#ifdef TIM_CNT_UIFCPY
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
 800be92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be94:	f7ff ff24 	bl	800bce0 <LL_TIM_DisableIT_UPDATE>
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
 800be98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be9a:	f7ff fe7c 	bl	800bb96 <LL_TIM_GetCounter>
 800be9e:	61f8      	str	r0, [r7, #28]
  OverflowCntSample = pHandle->TimerOverflowNb;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	61bb      	str	r3, [r7, #24]
  pHandle->TimerOverflowNb = 0;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
  directionSample =  LL_TIM_GetDirection( TIMx );
 800beb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800beb4:	f7ff fe7b 	bl	800bbae <LL_TIM_GetDirection>
 800beb8:	6178      	str	r0, [r7, #20]
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	0fdb      	lsrs	r3, r3, #31
 800bebe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  if ( OFbit )
 800bec2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d002      	beq.n	800bed0 <ENC_CalcAvrgMecSpeedUnit+0x6e>
    We have to take this overflow into account in the angle computation,
    but we must not take it into account a second time in the accmulator,
    so we have to clear the pending flag. If the OFbit is not set, it does not mean
    that an Interrupt has not occured since the last read, but it has not been taken
    into accout, we must not clear the interrupt in order to accumulate it */
    LL_TIM_ClearFlag_UPDATE( TIMx );
 800beca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800becc:	f7ff feea 	bl	800bca4 <LL_TIM_ClearFlag_UPDATE>
  }
  LL_TIM_EnableIT_UPDATE ( TIMx );
 800bed0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bed2:	f7ff fef5 	bl	800bcc0 <LL_TIM_EnableIT_UPDATE>
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bedc:	61fb      	str	r3, [r7, #28]
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 800bede:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	4413      	add	r3, r2
 800bee6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800beea:	d903      	bls.n	800bef4 <ENC_CalcAvrgMecSpeedUnit+0x92>
  {
    pHandle->TimerOverflowError = true;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	2201      	movs	r2, #1
 800bef0:	f883 2079 	strb.w	r2, [r3, #121]	; 0x79
  }

  /*Calculation of delta angle*/
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	2b10      	cmp	r3, #16
 800bef8:	d119      	bne.n	800bf2e <ENC_CalcAvrgMecSpeedUnit+0xcc>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture > pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	f8b2 2072 	ldrh.w	r2, [r2, #114]	; 0x72
 800bf02:	1a9a      	subs	r2, r3, r2
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 800bf04:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800bf08:	69bb      	ldr	r3, [r7, #24]
 800bf0a:	440b      	add	r3, r1
 800bf0c:	6879      	ldr	r1, [r7, #4]
 800bf0e:	f8b1 106e 	ldrh.w	r1, [r1, #110]	; 0x6e
 800bf12:	fb01 f303 	mul.w	r3, r1, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800bf16:	6879      	ldr	r1, [r7, #4]
 800bf18:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 800bf1c:	b2c9      	uxtb	r1, r1
 800bf1e:	4608      	mov	r0, r1
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 800bf20:	1ad1      	subs	r1, r2, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f100 020a 	add.w	r2, r0, #10
 800bf28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800bf2c:	e018      	b.n	800bf60 <ENC_CalcAvrgMecSpeedUnit+0xfe>
    /* if UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF. */
#ifndef TIM_CNT_UIFCPY
    OverflowCntSample = ( CntCapture < pHandle->PreviousCapture ) ? 1 : 0;
#endif
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	f8b2 2072 	ldrh.w	r2, [r2, #114]	; 0x72
 800bf36:	1a9a      	subs	r2, r3, r2
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 800bf38:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	440b      	add	r3, r1
 800bf40:	6879      	ldr	r1, [r7, #4]
 800bf42:	f8b1 106e 	ldrh.w	r1, [r1, #110]	; 0x6e
 800bf46:	fb01 f303 	mul.w	r3, r1, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800bf4a:	6879      	ldr	r1, [r7, #4]
 800bf4c:	f891 1078 	ldrb.w	r1, [r1, #120]	; 0x78
 800bf50:	b2c9      	uxtb	r1, r1
 800bf52:	4608      	mov	r0, r1
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 800bf54:	18d1      	adds	r1, r2, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	f100 020a 	add.w	r2, r0, #10
 800bf5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }


  /*Computes & returns average mechanical speed */
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800bf60:	2300      	movs	r3, #0
 800bf62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf66:	e00d      	b.n	800bf84 <ENC_CalcAvrgMecSpeedUnit+0x122>
  {
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800bf68:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	320a      	adds	r2, #10
 800bf70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bf76:	4413      	add	r3, r2
 800bf78:	62fb      	str	r3, [r7, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800bf7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf7e:	3301      	adds	r3, #1
 800bf80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bf84:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bf88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d3eb      	bcc.n	800bf68 <ENC_CalcAvrgMecSpeedUnit+0x106>
  }
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf94:	461a      	mov	r2, r3
 800bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf98:	fb02 f303 	mul.w	r3, r2, r3
 800bf9c:	613b      	str	r3, [r7, #16]
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800bfa4:	461a      	mov	r2, r3
           ( int32_t )( pHandle->SpeedBufferSize );
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 800bfac:	fb03 f302 	mul.w	r3, r3, r2
 800bfb0:	60fb      	str	r3, [r7, #12]
  wtemp1 /= wtemp2;
 800bfb2:	693a      	ldr	r2, [r7, #16]
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	fb92 f3f3 	sdiv	r3, r2, r3
 800bfba:	613b      	str	r3, [r7, #16]
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	b21a      	sxth	r2, r3
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	801a      	strh	r2, [r3, #0]

  /*Computes & stores average mechanical acceleration */
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	b29a      	uxth	r2, r3
                                   pHandle->_Super.hAvrMecSpeedUnit );
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800bfce:	b29b      	uxth	r3, r3
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	b21a      	sxth	r2, r3
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	825a      	strh	r2, [r3, #18]

  /*Stores average mechanical speed */
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	b21a      	sxth	r2, r3
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	819a      	strh	r2, [r3, #12]

  /*Computes & stores the instantaneous electrical speed [dpp], var wtemp1*/
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800bfe8:	b2db      	uxtb	r3, r3
 800bfea:	461a      	mov	r2, r3
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	320a      	adds	r2, #10
 800bff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	f8b2 206c 	ldrh.w	r2, [r2, #108]	; 0x6c
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 800bffa:	fb02 f303 	mul.w	r3, r2, r3
           ( int32_t )pHandle->_Super.bElToMecRatio;
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	7852      	ldrb	r2, [r2, #1]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 800c002:	fb02 f303 	mul.w	r3, r2, r3
 800c006:	613b      	str	r3, [r7, #16]
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f8b3 306e 	ldrh.w	r3, [r3, #110]	; 0x6e
 800c00e:	461a      	mov	r2, r3
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	fb93 f3f2 	sdiv	r3, r3, r2
 800c016:	613b      	str	r3, [r7, #16]
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	69db      	ldr	r3, [r3, #28]
 800c01c:	461a      	mov	r2, r3
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	fb02 f303 	mul.w	r3, r2, r3
 800c024:	613b      	str	r3, [r7, #16]
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	8b5b      	ldrh	r3, [r3, #26]
 800c02a:	461a      	mov	r2, r3
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c032:	613b      	str	r3, [r7, #16]

  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	b21a      	sxth	r2, r3
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	81da      	strh	r2, [r3, #14]

  /*last captured value update*/
  pHandle->PreviousCapture = CntCapture;
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	b29a      	uxth	r2, r3
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8a3 2072 	strh.w	r2, [r3, #114]	; 0x72
  /*Buffer index update*/
  pHandle->DeltaCapturesIndex++;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	3301      	adds	r3, #1
 800c050:	b2da      	uxtb	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  if ( pHandle->DeltaCapturesIndex == pHandle->SpeedBufferSize )
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 800c066:	429a      	cmp	r2, r3
 800c068:	d103      	bne.n	800c072 <ENC_CalcAvrgMecSpeedUnit+0x210>
  {
    pHandle->DeltaCapturesIndex = 0u;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	2200      	movs	r2, #0
 800c06e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d00b      	beq.n	800c094 <ENC_CalcAvrgMecSpeedUnit+0x232>
  {
    bReliability = false;
 800c07c:	2300      	movs	r3, #0
 800c07e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    pHandle->SensorIsReliable = false;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	78da      	ldrb	r2, [r3, #3]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	701a      	strb	r2, [r3, #0]
 800c092:	e007      	b.n	800c0a4 <ENC_CalcAvrgMecSpeedUnit+0x242>

  }
  else
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	4618      	mov	r0, r3
 800c09a:	f002 fea9 	bl	800edf0 <SPD_IsMecSpeedReliable>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  }

  return ( bReliability );
 800c0a4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3730      	adds	r7, #48	; 0x30
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}

0800c0b0 <ENC_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  hMecAngle new value of rotor mechanical angle (s16degrees)
  * @retval none
  */
__weak void ENC_SetMecAngle( ENCODER_Handle_t * pHandle, int16_t hMecAngle )
{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b087      	sub	sp, #28
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	460b      	mov	r3, r1
 800c0ba:	807b      	strh	r3, [r7, #2]
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6a1b      	ldr	r3, [r3, #32]
 800c0c0:	613b      	str	r3, [r7, #16]

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	887a      	ldrh	r2, [r7, #2]
 800c0c6:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	785b      	ldrb	r3, [r3, #1]
 800c0cc:	b29a      	uxth	r2, r3
 800c0ce:	887b      	ldrh	r3, [r7, #2]
 800c0d0:	fb12 f303 	smulbb	r3, r2, r3
 800c0d4:	b29b      	uxth	r3, r3
 800c0d6:	b21a      	sxth	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	809a      	strh	r2, [r3, #4]
  if ( hMecAngle < 0 )
 800c0dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	da07      	bge.n	800c0f4 <ENC_SetMecAngle+0x44>
  {
    hMecAngle *= -1;
 800c0e4:	887b      	ldrh	r3, [r7, #2]
 800c0e6:	425b      	negs	r3, r3
 800c0e8:	b29b      	uxth	r3, r3
 800c0ea:	807b      	strh	r3, [r7, #2]
    hMecAngleuint = 65535u - ( uint16_t )hMecAngle;
 800c0ec:	887b      	ldrh	r3, [r7, #2]
 800c0ee:	43db      	mvns	r3, r3
 800c0f0:	82fb      	strh	r3, [r7, #22]
 800c0f2:	e001      	b.n	800c0f8 <ENC_SetMecAngle+0x48>
  }
  else
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
 800c0f4:	887b      	ldrh	r3, [r7, #2]
 800c0f6:	82fb      	strh	r3, [r7, #22]
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 800c0f8:	8afb      	ldrh	r3, [r7, #22]
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	f8b2 206e 	ldrh.w	r2, [r2, #110]	; 0x6e
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 800c100:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 800c104:	4a06      	ldr	r2, [pc, #24]	; (800c120 <ENC_SetMecAngle+0x70>)
 800c106:	fba2 2303 	umull	r2, r3, r2, r3
 800c10a:	0bdb      	lsrs	r3, r3, #15
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 800c10c:	81fb      	strh	r3, [r7, #14]

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 800c10e:	89fa      	ldrh	r2, [r7, #14]
 800c110:	693b      	ldr	r3, [r7, #16]
 800c112:	625a      	str	r2, [r3, #36]	; 0x24
  
}
 800c114:	bf00      	nop
 800c116:	371c      	adds	r7, #28
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	80008001 	.word	0x80008001

0800c124 <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 800c124:	b480      	push	{r7}
 800c126:	b085      	sub	sp, #20
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
  ENCODER_Handle_t * pHandle = ( ENCODER_Handle_t * ) pHandleVoid;
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	60fb      	str	r3, [r7, #12]

  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	f8b3 3070 	ldrh.w	r3, [r3, #112]	; 0x70
 800c136:	b29b      	uxth	r3, r3
 800c138:	3301      	adds	r3, #1
 800c13a:	b29a      	uxth	r2, r3
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70

  return MC_NULL;
 800c142:	2300      	movs	r3, #0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3714      	adds	r7, #20
 800c148:	46bd      	mov	sp, r7
 800c14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14e:	4770      	bx	lr

0800c150 <FCP_Init>:
 * @todo Complete documentation
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
 800c150:	b480      	push	{r7}
 800c152:	b083      	sub	sp, #12
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  pHandle->RxTimeoutCountdown = 0;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	825a      	strh	r2, [r3, #18]

  pHandle->TxFrame.Code = 0x0;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	2200      	movs	r2, #0
 800c162:	751a      	strb	r2, [r3, #20]
  pHandle->TxFrame.Size = 0;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	755a      	strb	r2, [r3, #21]
  pHandle->TxFrame.FrameCRC = 0;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2200      	movs	r2, #0
 800c16e:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
  pHandle->TxFrameLevel = 0;
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  pHandle->RxFrame.Code = 0x0;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
  pHandle->RxFrame.Size = 0;
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	2200      	movs	r2, #0
 800c196:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
  pHandle->RxFrameLevel = 0;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
}
 800c1aa:	bf00      	nop
 800c1ac:	370c      	adds	r7, #12
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b4:	4770      	bx	lr

0800c1b6 <FCP_SetClient>:
__weak void FCP_SetClient( FCP_Handle_t * pHandle,
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
 800c1b6:	b480      	push	{r7}
 800c1b8:	b085      	sub	sp, #20
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	60f8      	str	r0, [r7, #12]
 800c1be:	60b9      	str	r1, [r7, #8]
 800c1c0:	607a      	str	r2, [r7, #4]
 800c1c2:	603b      	str	r3, [r7, #0]
  if ( MC_NULL != pHandle )
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d00b      	beq.n	800c1e2 <FCP_SetClient+0x2c>
  {
    pHandle->ClientEntity = pClient;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	68ba      	ldr	r2, [r7, #8]
 800c1ce:	601a      	str	r2, [r3, #0]
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	605a      	str	r2, [r3, #4]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	683a      	ldr	r2, [r7, #0]
 800c1da:	609a      	str	r2, [r3, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	69ba      	ldr	r2, [r7, #24]
 800c1e0:	60da      	str	r2, [r3, #12]
  }
}
 800c1e2:	bf00      	nop
 800c1e4:	3714      	adds	r7, #20
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr

0800c1ee <FCP_CalcCRC>:
    pHandle->RxTimeout = Timeout;
  }
}

__weak uint8_t FCP_CalcCRC( FCP_Frame_t * pFrame )
{
 800c1ee:	b480      	push	{r7}
 800c1f0:	b085      	sub	sp, #20
 800c1f2:	af00      	add	r7, sp, #0
 800c1f4:	6078      	str	r0, [r7, #4]
  uint8_t nCRC = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	73fb      	strb	r3, [r7, #15]
  uint16_t nSum = 0;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	81bb      	strh	r3, [r7, #12]
  uint8_t idx;

  if( MC_NULL != pFrame )
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d027      	beq.n	800c254 <FCP_CalcCRC+0x66>
  {
    nSum += pFrame->Code;
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	781b      	ldrb	r3, [r3, #0]
 800c208:	b29a      	uxth	r2, r3
 800c20a:	89bb      	ldrh	r3, [r7, #12]
 800c20c:	4413      	add	r3, r2
 800c20e:	81bb      	strh	r3, [r7, #12]
    nSum += pFrame->Size;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	785b      	ldrb	r3, [r3, #1]
 800c214:	b29a      	uxth	r2, r3
 800c216:	89bb      	ldrh	r3, [r7, #12]
 800c218:	4413      	add	r3, r2
 800c21a:	81bb      	strh	r3, [r7, #12]

    for ( idx = 0; idx < pFrame->Size; idx++ )
 800c21c:	2300      	movs	r3, #0
 800c21e:	72fb      	strb	r3, [r7, #11]
 800c220:	e00a      	b.n	800c238 <FCP_CalcCRC+0x4a>
    {
      nSum += pFrame->Buffer[idx];
 800c222:	7afb      	ldrb	r3, [r7, #11]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	4413      	add	r3, r2
 800c228:	789b      	ldrb	r3, [r3, #2]
 800c22a:	b29a      	uxth	r2, r3
 800c22c:	89bb      	ldrh	r3, [r7, #12]
 800c22e:	4413      	add	r3, r2
 800c230:	81bb      	strh	r3, [r7, #12]
    for ( idx = 0; idx < pFrame->Size; idx++ )
 800c232:	7afb      	ldrb	r3, [r7, #11]
 800c234:	3301      	adds	r3, #1
 800c236:	72fb      	strb	r3, [r7, #11]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	785b      	ldrb	r3, [r3, #1]
 800c23c:	7afa      	ldrb	r2, [r7, #11]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d3ef      	bcc.n	800c222 <FCP_CalcCRC+0x34>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
 800c242:	89bb      	ldrh	r3, [r7, #12]
 800c244:	73fb      	strb	r3, [r7, #15]
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 800c246:	89bb      	ldrh	r3, [r7, #12]
 800c248:	0a1b      	lsrs	r3, r3, #8
 800c24a:	b29b      	uxth	r3, r3
 800c24c:	b2da      	uxtb	r2, r3
 800c24e:	7bfb      	ldrb	r3, [r7, #15]
 800c250:	4413      	add	r3, r2
 800c252:	73fb      	strb	r3, [r7, #15]
  }

  return nCRC ;
 800c254:	7bfb      	ldrb	r3, [r7, #15]
}
 800c256:	4618      	mov	r0, r3
 800c258:	3714      	adds	r7, #20
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 800c262:	b480      	push	{r7}
 800c264:	b085      	sub	sp, #20
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800c26a:	2300      	movs	r3, #0
 800c26c:	81fb      	strh	r3, [r7, #14]
 800c26e:	e007      	b.n	800c280 <MPM_Clear+0x1e>
  {
    pHandle->hMeasBuffer[i] = 0;
 800c270:	89fa      	ldrh	r2, [r7, #14]
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2100      	movs	r1, #0
 800c276:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800c27a:	89fb      	ldrh	r3, [r7, #14]
 800c27c:	3301      	adds	r3, #1
 800c27e:	81fb      	strh	r3, [r7, #14]
 800c280:	89fb      	ldrh	r3, [r7, #14]
 800c282:	2b7f      	cmp	r3, #127	; 0x7f
 800c284:	d9f4      	bls.n	800c270 <MPM_Clear+0xe>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2200      	movs	r2, #0
 800c28a:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102

}
 800c296:	bf00      	nop
 800c298:	3714      	adds	r7, #20
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <MPM_CalcElMotorPower>:
  *         motor power.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak int16_t MPM_CalcElMotorPower( MotorPowMeas_Handle_t * pHandle, int16_t CurrentMotorPower )
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b085      	sub	sp, #20
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	807b      	strh	r3, [r7, #2]
  uint16_t i;
  int32_t wAux = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	60bb      	str	r3, [r7, #8]

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	887a      	ldrh	r2, [r7, #2]
 800c2be:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	f8b3 2100 	ldrh.w	r2, [r3, #256]	; 0x100
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8a3 2102 	strh.w	r2, [r3, #258]	; 0x102
  pHandle->hNextMeasBufferIndex++;
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800c2d4:	3301      	adds	r3, #1
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f8b3 3100 	ldrh.w	r3, [r3, #256]	; 0x100
 800c2e4:	2b7f      	cmp	r3, #127	; 0x7f
 800c2e6:	d903      	bls.n	800c2f0 <MPM_CalcElMotorPower+0x4e>
  {
    pHandle->hNextMeasBufferIndex = 0u;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f8a3 2100 	strh.w	r2, [r3, #256]	; 0x100
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	81fb      	strh	r3, [r7, #14]
 800c2f4:	e00a      	b.n	800c30c <MPM_CalcElMotorPower+0x6a>
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 800c2f6:	89fa      	ldrh	r2, [r7, #14]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800c2fe:	461a      	mov	r2, r3
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	4413      	add	r3, r2
 800c304:	60bb      	str	r3, [r7, #8]
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 800c306:	89fb      	ldrh	r3, [r7, #14]
 800c308:	3301      	adds	r3, #1
 800c30a:	81fb      	strh	r3, [r7, #14]
 800c30c:	89fb      	ldrh	r3, [r7, #14]
 800c30e:	2b7f      	cmp	r3, #127	; 0x7f
 800c310:	d9f1      	bls.n	800c2f6 <MPM_CalcElMotorPower+0x54>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	2b00      	cmp	r3, #0
 800c316:	da00      	bge.n	800c31a <MPM_CalcElMotorPower+0x78>
 800c318:	337f      	adds	r3, #127	; 0x7f
 800c31a:	11db      	asrs	r3, r3, #7
 800c31c:	60bb      	str	r3, [r7, #8]
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	b21a      	sxth	r2, r3
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
 800c328:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3714      	adds	r7, #20
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <MPM_GetAvrgElMotorPowerW>:
  *         expressed in watt.
  * @param pHandle pointer on the related component instance.
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
 800c338:	b480      	push	{r7}
 800c33a:	b083      	sub	sp, #12
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrgElMotorPowerW );
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f9b3 3104 	ldrsh.w	r3, [r3, #260]	; 0x104
}
 800c346:	4618      	mov	r0, r3
 800c348:	370c      	adds	r7, #12
 800c34a:	46bd      	mov	sp, r7
 800c34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c350:	4770      	bx	lr

0800c352 <NTC_SetFaultState>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Updated internal fault status
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
 800c352:	b480      	push	{r7}
 800c354:	b085      	sub	sp, #20
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	8a1a      	ldrh	r2, [r3, #16]
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	8b5b      	ldrh	r3, [r3, #26]
 800c362:	429a      	cmp	r2, r3
 800c364:	d902      	bls.n	800c36c <NTC_SetFaultState+0x1a>
  {
    hFault = MC_OVER_TEMP;
 800c366:	2308      	movs	r3, #8
 800c368:	81fb      	strh	r3, [r7, #14]
 800c36a:	e00b      	b.n	800c384 <NTC_SetFaultState+0x32>
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	8a1a      	ldrh	r2, [r3, #16]
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	8b9b      	ldrh	r3, [r3, #28]
 800c374:	429a      	cmp	r2, r3
 800c376:	d202      	bcs.n	800c37e <NTC_SetFaultState+0x2c>
  {
    hFault = MC_NO_ERROR;
 800c378:	2300      	movs	r3, #0
 800c37a:	81fb      	strh	r3, [r7, #14]
 800c37c:	e002      	b.n	800c384 <NTC_SetFaultState+0x32>
  }
  else
  {
    hFault = pHandle->hFaultState;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	8adb      	ldrh	r3, [r3, #22]
 800c382:	81fb      	strh	r3, [r7, #14]
  }
  return hFault;
 800c384:	89fb      	ldrh	r3, [r7, #14]
}
 800c386:	4618      	mov	r0, r3
 800c388:	3714      	adds	r7, #20
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <NTC_Init>:
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 *
 *  @p pPWMnCurrentSensor : Handle on the PWMC component to be used for regular conversions
 */
__weak void NTC_Init( NTC_Handle_t * pHandle )
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b082      	sub	sp, #8
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]

  if ( pHandle->bSensorType == REAL_SENSOR )
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d10d      	bne.n	800c3be <NTC_Init+0x2c>
  {
    /* Need to be register with RegularConvManager */
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7f7 f87a 	bl	80034a0 <RCM_RegisterRegConv>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    NTC_Clear( pHandle );
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f80c 	bl	800c3d4 <NTC_Clear>
  {
    pHandle->hFaultState = MC_NO_ERROR;
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
  }

}
 800c3bc:	e006      	b.n	800c3cc <NTC_Init+0x3a>
    pHandle->hFaultState = MC_NO_ERROR;
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	82da      	strh	r2, [r3, #22]
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	8a5a      	ldrh	r2, [r3, #18]
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	821a      	strh	r2, [r3, #16]
}
 800c3cc:	bf00      	nop
 800c3ce:	3708      	adds	r7, #8
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	bd80      	pop	{r7, pc}

0800c3d4 <NTC_Clear>:
 * @brief Initializes internal average temperature computed value
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
  pHandle->hAvTemp_d = 0u;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	821a      	strh	r2, [r3, #16]
}
 800c3e2:	bf00      	nop
 800c3e4:	370c      	adds	r7, #12
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ec:	4770      	bx	lr

0800c3ee <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 800c3ee:	b580      	push	{r7, lr}
 800c3f0:	b084      	sub	sp, #16
 800c3f2:	af00      	add	r7, sp, #0
 800c3f4:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	781b      	ldrb	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d12e      	bne.n	800c45c <NTC_CalcAvTemp+0x6e>
  {
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800c404:	4618      	mov	r0, r3
 800c406:	f7f7 f909 	bl	800361c <RCM_ExecRegularConv>
 800c40a:	4603      	mov	r3, r0
 800c40c:	81fb      	strh	r3, [r7, #14]

    if ( hAux != 0xFFFFu )
 800c40e:	89fb      	ldrh	r3, [r7, #14]
 800c410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c414:	4293      	cmp	r3, r2
 800c416:	d019      	beq.n	800c44c <NTC_CalcAvTemp+0x5e>
    {
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	8b1b      	ldrh	r3, [r3, #24]
 800c41c:	3b01      	subs	r3, #1
 800c41e:	60bb      	str	r3, [r7, #8]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	8a1b      	ldrh	r3, [r3, #16]
 800c424:	461a      	mov	r2, r3
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	fb02 f303 	mul.w	r3, r2, r3
 800c42c:	60bb      	str	r3, [r7, #8]
      wtemp += hAux;
 800c42e:	89fb      	ldrh	r3, [r7, #14]
 800c430:	68ba      	ldr	r2, [r7, #8]
 800c432:	4413      	add	r3, r2
 800c434:	60bb      	str	r3, [r7, #8]
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	8b1b      	ldrh	r3, [r3, #24]
 800c43a:	461a      	mov	r2, r3
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c442:	60bb      	str	r3, [r7, #8]

      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	b29a      	uxth	r2, r3
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	821a      	strh	r2, [r3, #16]
    }

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	f7ff ff80 	bl	800c352 <NTC_SetFaultState>
 800c452:	4603      	mov	r3, r0
 800c454:	461a      	mov	r2, r3
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	82da      	strh	r2, [r3, #22]
 800c45a:	e002      	b.n	800c462 <NTC_CalcAvTemp+0x74>
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	82da      	strh	r2, [r3, #22]
  }

  return ( pHandle->hFaultState );
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	8adb      	ldrh	r3, [r3, #22]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <NTC_GetAvTemp_C>:
  * @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @r AverageTemperature : Latest averaged temperature measured (in Celsius degrees)
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
 800c46e:	b480      	push	{r7}
 800c470:	b085      	sub	sp, #20
 800c472:	af00      	add	r7, sp, #0
 800c474:	6078      	str	r0, [r7, #4]
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	781b      	ldrb	r3, [r3, #0]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d11d      	bne.n	800c4ba <NTC_GetAvTemp_C+0x4c>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	8a1b      	ldrh	r3, [r3, #16]
 800c482:	60fb      	str	r3, [r7, #12]
    wTemp -= ( int32_t )( pHandle->wV0 );
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	6a1b      	ldr	r3, [r3, #32]
 800c488:	461a      	mov	r2, r3
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	1a9b      	subs	r3, r3, r2
 800c48e:	60fb      	str	r3, [r7, #12]
    wTemp *= pHandle->hSensitivity;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 800c496:	461a      	mov	r2, r3
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	fb02 f303 	mul.w	r3, r2, r3
 800c49e:	60fb      	str	r3, [r7, #12]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	da02      	bge.n	800c4ac <NTC_GetAvTemp_C+0x3e>
 800c4a6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c4aa:	33ff      	adds	r3, #255	; 0xff
 800c4ac:	141b      	asrs	r3, r3, #16
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c4b4:	4413      	add	r3, r2
 800c4b6:	60fb      	str	r3, [r7, #12]
 800c4b8:	e002      	b.n	800c4c0 <NTC_GetAvTemp_C+0x52>
  }
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	8a9b      	ldrh	r3, [r3, #20]
 800c4be:	60fb      	str	r3, [r7, #12]
  }
  return ( ( int16_t )wTemp );
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	b21b      	sxth	r3, r3
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3714      	adds	r7, #20
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ce:	4770      	bx	lr

0800c4d0 <PID_HandleInit>:
 * @brief  It initializes the handle
 * @param  pHandle: handler of the current instance of the PID component
 * @retval None
 */
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b083      	sub	sp, #12
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	809a      	strh	r2, [r3, #4]
  pHandle->hKiGain =  pHandle->hDefKiGain;
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	80da      	strh	r2, [r3, #6]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	845a      	strh	r2, [r3, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	609a      	str	r2, [r3, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2200      	movs	r2, #0
 800c500:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c502:	bf00      	nop
 800c504:	370c      	adds	r7, #12
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr

0800c50e <PID_SetKP>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
 800c50e:	b480      	push	{r7}
 800c510:	b083      	sub	sp, #12
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	460b      	mov	r3, r1
 800c518:	807b      	strh	r3, [r7, #2]
  pHandle->hKpGain = hKpGain;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	887a      	ldrh	r2, [r7, #2]
 800c51e:	809a      	strh	r2, [r3, #4]
}
 800c520:	bf00      	nop
 800c522:	370c      	adds	r7, #12
 800c524:	46bd      	mov	sp, r7
 800c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52a:	4770      	bx	lr

0800c52c <PID_SetKI>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
 800c52c:	b480      	push	{r7}
 800c52e:	b083      	sub	sp, #12
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
 800c534:	460b      	mov	r3, r1
 800c536:	807b      	strh	r3, [r7, #2]
  pHandle->hKiGain = hKiGain;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	887a      	ldrh	r2, [r7, #2]
 800c53c:	80da      	strh	r2, [r3, #6]
}
 800c53e:	bf00      	nop
 800c540:	370c      	adds	r7, #12
 800c542:	46bd      	mov	sp, r7
 800c544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c548:	4770      	bx	lr

0800c54a <PID_GetKP>:
 * @brief  It returns the Kp gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
 800c54a:	b480      	push	{r7}
 800c54c:	b083      	sub	sp, #12
 800c54e:	af00      	add	r7, sp, #0
 800c550:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpGain );
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800c558:	4618      	mov	r0, r3
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <PID_GetKI>:
 * @brief  It returns the Ki gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiGain );
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
}
 800c572:	4618      	mov	r0, r3
 800c574:	370c      	adds	r7, #12
 800c576:	46bd      	mov	sp, r7
 800c578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57c:	4770      	bx	lr

0800c57e <PID_SetIntegralTerm>:
 * pHandle: handler of the current instance of the PID component
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
 800c57e:	b480      	push	{r7}
 800c580:	b083      	sub	sp, #12
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
 800c586:	6039      	str	r1, [r7, #0]
  pHandle->wIntegralTerm = wIntegralTermValue;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	683a      	ldr	r2, [r7, #0]
 800c58c:	609a      	str	r2, [r3, #8]

  return;
 800c58e:	bf00      	nop
}
 800c590:	370c      	adds	r7, #12
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr

0800c59a <PID_GetKPDivisor>:
 * @brief  It returns the Kp gain divisor
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
 800c59a:	b480      	push	{r7}
 800c59c:	b083      	sub	sp, #12
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKpDivisor );
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	8b1b      	ldrh	r3, [r3, #24]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	370c      	adds	r7, #12
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b0:	4770      	bx	lr

0800c5b2 <PID_GetKIDivisor>:
 * @brief  It returns the Ki gain divisor of the passed PI object
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
 800c5b2:	b480      	push	{r7}
 800c5b4:	b083      	sub	sp, #12
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
  return ( pHandle->hKiDivisor );
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	8b5b      	ldrh	r3, [r3, #26]
}
 800c5be:	4618      	mov	r0, r3
 800c5c0:	370c      	adds	r7, #12
 800c5c2:	46bd      	mov	sp, r7
 800c5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c8:	4770      	bx	lr

0800c5ca <PID_SetKD>:
 * @param  pHandle: handler of the current instance of the PID component
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
 800c5ca:	b480      	push	{r7}
 800c5cc:	b083      	sub	sp, #12
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	460b      	mov	r3, r1
 800c5d4:	807b      	strh	r3, [r7, #2]
  pHandle->hKdGain = hKdGain;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	887a      	ldrh	r2, [r7, #2]
 800c5da:	845a      	strh	r2, [r3, #34]	; 0x22
}
 800c5dc:	bf00      	nop
 800c5de:	370c      	adds	r7, #12
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e6:	4770      	bx	lr

0800c5e8 <PID_GetKD>:
 * @brief  It returns the Kd gain
 * @param  pHandle: handler of the current instance of the PID component
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
 800c5e8:	b480      	push	{r7}
 800c5ea:	b083      	sub	sp, #12
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
  return pHandle->hKdGain;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
}
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	370c      	adds	r7, #12
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c600:	4770      	bx	lr
	...

0800c604 <PI_Controller>:
 * @param  wProcessVarError: current process variable error, intended as the reference
 *         value minus the present process variable value
 * @retval computed PI output
 */
__weak int16_t PI_Controller( PID_Handle_t * pHandle, int32_t wProcessVarError )
{
 800c604:	b480      	push	{r7}
 800c606:	b089      	sub	sp, #36	; 0x24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	6039      	str	r1, [r7, #0]
  int32_t wProportional_Term, wIntegral_Term, wOutput_32, wIntegral_sum_temp;
  int32_t wDischarge = 0;
 800c60e:	2300      	movs	r3, #0
 800c610:	617b      	str	r3, [r7, #20]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	8a9b      	ldrh	r3, [r3, #20]
 800c616:	827b      	strh	r3, [r7, #18]
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	8adb      	ldrh	r3, [r3, #22]
 800c61c:	823b      	strh	r3, [r7, #16]

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800c624:	461a      	mov	r2, r3
 800c626:	683b      	ldr	r3, [r7, #0]
 800c628:	fb02 f303 	mul.w	r3, r2, r3
 800c62c:	60fb      	str	r3, [r7, #12]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d103      	bne.n	800c640 <PI_Controller+0x3c>
  {
    pHandle->wIntegralTerm = 0;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2200      	movs	r2, #0
 800c63c:	609a      	str	r2, [r3, #8]
 800c63e:	e03a      	b.n	800c6b6 <PI_Controller+0xb2>
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800c646:	461a      	mov	r2, r3
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	fb02 f303 	mul.w	r3, r2, r3
 800c64e:	60bb      	str	r3, [r7, #8]
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	689b      	ldr	r3, [r3, #8]
 800c654:	68ba      	ldr	r2, [r7, #8]
 800c656:	4413      	add	r3, r2
 800c658:	61bb      	str	r3, [r7, #24]

    if ( wIntegral_sum_temp < 0 )
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	da0a      	bge.n	800c676 <PI_Controller+0x72>
    {
      if ( pHandle->wIntegralTerm > 0 )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	689b      	ldr	r3, [r3, #8]
 800c664:	2b00      	cmp	r3, #0
 800c666:	dd0f      	ble.n	800c688 <PI_Controller+0x84>
      {
        if ( wIntegral_Term > 0 )
 800c668:	68bb      	ldr	r3, [r7, #8]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	dd0c      	ble.n	800c688 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = INT32_MAX;
 800c66e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c672:	61bb      	str	r3, [r7, #24]
 800c674:	e008      	b.n	800c688 <PI_Controller+0x84>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	da04      	bge.n	800c688 <PI_Controller+0x84>
      {
        if ( wIntegral_Term < 0 )
 800c67e:	68bb      	ldr	r3, [r7, #8]
 800c680:	2b00      	cmp	r3, #0
 800c682:	da01      	bge.n	800c688 <PI_Controller+0x84>
        {
          wIntegral_sum_temp = -INT32_MAX;
 800c684:	4b27      	ldr	r3, [pc, #156]	; (800c724 <PI_Controller+0x120>)
 800c686:	61bb      	str	r3, [r7, #24]
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	69ba      	ldr	r2, [r7, #24]
 800c68e:	429a      	cmp	r2, r3
 800c690:	dd04      	ble.n	800c69c <PI_Controller+0x98>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	68da      	ldr	r2, [r3, #12]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	609a      	str	r2, [r3, #8]
 800c69a:	e00c      	b.n	800c6b6 <PI_Controller+0xb2>
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	69ba      	ldr	r2, [r7, #24]
 800c6a2:	429a      	cmp	r2, r3
 800c6a4:	da04      	bge.n	800c6b0 <PI_Controller+0xac>
    {
      pHandle->wIntegralTerm = pHandle->wLowerIntegralLimit;
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	691a      	ldr	r2, [r3, #16]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	609a      	str	r2, [r3, #8]
 800c6ae:	e002      	b.n	800c6b6 <PI_Controller+0xb2>
    }
    else
    {
      pHandle->wIntegralTerm = wIntegral_sum_temp;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	69ba      	ldr	r2, [r7, #24]
 800c6b4:	609a      	str	r2, [r3, #8]
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	8b9b      	ldrh	r3, [r3, #28]
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	fa43 f202 	asr.w	r2, r3, r2
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	689b      	ldr	r3, [r3, #8]
 800c6c6:	6879      	ldr	r1, [r7, #4]
 800c6c8:	8bc9      	ldrh	r1, [r1, #30]
 800c6ca:	410b      	asrs	r3, r1
 800c6cc:	4413      	add	r3, r2
 800c6ce:	61fb      	str	r3, [r7, #28]
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 800c6d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6d4:	69fa      	ldr	r2, [r7, #28]
 800c6d6:	429a      	cmp	r2, r3
 800c6d8:	dd08      	ble.n	800c6ec <PI_Controller+0xe8>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 800c6da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800c6de:	69fb      	ldr	r3, [r7, #28]
 800c6e0:	1ad3      	subs	r3, r2, r3
 800c6e2:	617b      	str	r3, [r7, #20]
    wOutput_32 = hUpperOutputLimit;
 800c6e4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c6e8:	61fb      	str	r3, [r7, #28]
 800c6ea:	e00c      	b.n	800c706 <PI_Controller+0x102>
  }
  else if ( wOutput_32 < hLowerOutputLimit )
 800c6ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c6f0:	69fa      	ldr	r2, [r7, #28]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	da07      	bge.n	800c706 <PI_Controller+0x102>
  {

    wDischarge = hLowerOutputLimit - wOutput_32;
 800c6f6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800c6fa:	69fb      	ldr	r3, [r7, #28]
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	617b      	str	r3, [r7, #20]
    wOutput_32 = hLowerOutputLimit;
 800c700:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c704:	61fb      	str	r3, [r7, #28]
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	689a      	ldr	r2, [r3, #8]
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	441a      	add	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	609a      	str	r2, [r3, #8]

  return ( ( int16_t )( wOutput_32 ) );
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	b21b      	sxth	r3, r3
}
 800c716:	4618      	mov	r0, r3
 800c718:	3724      	adds	r7, #36	; 0x24
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr
 800c722:	bf00      	nop
 800c724:	80000001 	.word	0x80000001

0800c728 <PQD_CalcElMotorPower>:
  *         motor power.
  * @param power handle.
  * @retval int16_t The measured motor power expressed in watt.
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{
 800c728:	b590      	push	{r4, r7, lr}
 800c72a:	b089      	sub	sp, #36	; 0x24
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c736:	f107 0310 	add.w	r3, r7, #16
 800c73a:	320c      	adds	r2, #12
 800c73c:	6810      	ldr	r0, [r2, #0]
 800c73e:	6018      	str	r0, [r3, #0]
  qd_t Vqd = pHandle->pFOCVars->Vqd;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c746:	f107 030c 	add.w	r3, r7, #12
 800c74a:	3216      	adds	r2, #22
 800c74c:	6810      	ldr	r0, [r2, #0]
 800c74e:	6018      	str	r0, [r3, #0]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800c750:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800c754:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800c758:	fb02 f203 	mul.w	r2, r2, r3
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 800c75c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c760:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800c764:	fb01 f303 	mul.w	r3, r1, r3
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 800c768:	4413      	add	r3, r2
 800c76a:	61fb      	str	r3, [r7, #28]
  wAux /= 65536;
 800c76c:	69fb      	ldr	r3, [r7, #28]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	da02      	bge.n	800c778 <PQD_CalcElMotorPower+0x50>
 800c772:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c776:	33ff      	adds	r3, #255	; 0xff
 800c778:	141b      	asrs	r3, r3, #16
 800c77a:	61fb      	str	r3, [r7, #28]

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 4108 	ldr.w	r4, [r3, #264]	; 0x108
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800c788:	4618      	mov	r0, r3
 800c78a:	f7ff f859 	bl	800b840 <VBS_GetAvBusVoltage_V>
 800c78e:	4603      	mov	r3, r0
 800c790:	fb03 f304 	mul.w	r3, r3, r4
 800c794:	61bb      	str	r3, [r7, #24]
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800c796:	69bb      	ldr	r3, [r7, #24]
 800c798:	4a16      	ldr	r2, [pc, #88]	; (800c7f4 <PQD_CalcElMotorPower+0xcc>)
 800c79a:	fb82 1203 	smull	r1, r2, r2, r3
 800c79e:	1192      	asrs	r2, r2, #6
 800c7a0:	17db      	asrs	r3, r3, #31
 800c7a2:	1ad3      	subs	r3, r2, r3
 800c7a4:	61bb      	str	r3, [r7, #24]

  wAux3 = wAux * wAux2;
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	69ba      	ldr	r2, [r7, #24]
 800c7aa:	fb02 f303 	mul.w	r3, r2, r3
 800c7ae:	617b      	str	r3, [r7, #20]
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800c7b0:	697a      	ldr	r2, [r7, #20]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	005b      	lsls	r3, r3, #1
 800c7b6:	4413      	add	r3, r2
 800c7b8:	005b      	lsls	r3, r3, #1
 800c7ba:	617b      	str	r3, [r7, #20]
  wAux3 /= 10;
 800c7bc:	697b      	ldr	r3, [r7, #20]
 800c7be:	4a0e      	ldr	r2, [pc, #56]	; (800c7f8 <PQD_CalcElMotorPower+0xd0>)
 800c7c0:	fb82 1203 	smull	r1, r2, r2, r3
 800c7c4:	1092      	asrs	r2, r2, #2
 800c7c6:	17db      	asrs	r3, r3, #31
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	617b      	str	r3, [r7, #20]
  wAux3 /= 65536;
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	da02      	bge.n	800c7d8 <PQD_CalcElMotorPower+0xb0>
 800c7d2:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800c7d6:	33ff      	adds	r3, #255	; 0xff
 800c7d8:	141b      	asrs	r3, r3, #16
 800c7da:	617b      	str	r3, [r7, #20]

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	b212      	sxth	r2, r2
 800c7e2:	4611      	mov	r1, r2
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f7ff fd5c 	bl	800c2a2 <MPM_CalcElMotorPower>

}
 800c7ea:	bf00      	nop
 800c7ec:	3724      	adds	r7, #36	; 0x24
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd90      	pop	{r4, r7, pc}
 800c7f2:	bf00      	nop
 800c7f4:	1b4e81b5 	.word	0x1b4e81b5
 800c7f8:	66666667 	.word	0x66666667

0800c7fc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b085      	sub	sp, #20
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800c804:	4b08      	ldr	r3, [pc, #32]	; (800c828 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c806:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c808:	4907      	ldr	r1, [pc, #28]	; (800c828 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	4313      	orrs	r3, r2
 800c80e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800c810:	4b05      	ldr	r3, [pc, #20]	; (800c828 <LL_APB1_GRP1_EnableClock+0x2c>)
 800c812:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	4013      	ands	r3, r2
 800c818:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800c81a:	68fb      	ldr	r3, [r7, #12]
}
 800c81c:	bf00      	nop
 800c81e:	3714      	adds	r7, #20
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr
 800c828:	40021000 	.word	0x40021000

0800c82c <LL_APB1_GRP1_IsEnabledClock>:
  *
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800c834:	4b07      	ldr	r3, [pc, #28]	; (800c854 <LL_APB1_GRP1_IsEnabledClock+0x28>)
 800c836:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	4013      	ands	r3, r2
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	429a      	cmp	r2, r3
 800c840:	d101      	bne.n	800c846 <LL_APB1_GRP1_IsEnabledClock+0x1a>
 800c842:	2301      	movs	r3, #1
 800c844:	e000      	b.n	800c848 <LL_APB1_GRP1_IsEnabledClock+0x1c>
 800c846:	2300      	movs	r3, #0
}
 800c848:	4618      	mov	r0, r3
 800c84a:	370c      	adds	r7, #12
 800c84c:	46bd      	mov	sp, r7
 800c84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c852:	4770      	bx	lr
 800c854:	40021000 	.word	0x40021000

0800c858 <LL_APB1_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 800c858:	b480      	push	{r7}
 800c85a:	b083      	sub	sp, #12
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 800c860:	4b06      	ldr	r3, [pc, #24]	; (800c87c <LL_APB1_GRP1_DisableClock+0x24>)
 800c862:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	43db      	mvns	r3, r3
 800c868:	4904      	ldr	r1, [pc, #16]	; (800c87c <LL_APB1_GRP1_DisableClock+0x24>)
 800c86a:	4013      	ands	r3, r2
 800c86c:	658b      	str	r3, [r1, #88]	; 0x58
}
 800c86e:	bf00      	nop
 800c870:	370c      	adds	r7, #12
 800c872:	46bd      	mov	sp, r7
 800c874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c878:	4770      	bx	lr
 800c87a:	bf00      	nop
 800c87c:	40021000 	.word	0x40021000

0800c880 <LL_TIM_GetCounterMode>:
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR | TIM_CR1_CMS));
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800c890:	4618      	mov	r0, r3
 800c892:	370c      	adds	r7, #12
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <LL_TIM_SetTriggerOutput>:
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	685b      	ldr	r3, [r3, #4]
 800c8aa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c8ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8b2:	683a      	ldr	r2, [r7, #0]
 800c8b4:	431a      	orrs	r2, r3
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	605a      	str	r2, [r3, #4]
}
 800c8ba:	bf00      	nop
 800c8bc:	370c      	adds	r7, #12
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c4:	4770      	bx	lr

0800c8c6 <LL_TIM_ClearFlag_CC1>:
{
 800c8c6:	b480      	push	{r7}
 800c8c8:	b083      	sub	sp, #12
 800c8ca:	af00      	add	r7, sp, #0
 800c8cc:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f06f 0202 	mvn.w	r2, #2
 800c8d4:	611a      	str	r2, [r3, #16]
}
 800c8d6:	bf00      	nop
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <LL_TIM_IsActiveFlag_CC1>:
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	691b      	ldr	r3, [r3, #16]
 800c8ee:	f003 0302 	and.w	r3, r3, #2
 800c8f2:	2b02      	cmp	r3, #2
 800c8f4:	d101      	bne.n	800c8fa <LL_TIM_IsActiveFlag_CC1+0x18>
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	e000      	b.n	800c8fc <LL_TIM_IsActiveFlag_CC1+0x1a>
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 800c908:	b480      	push	{r7}
 800c90a:	b083      	sub	sp, #12
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	695b      	ldr	r3, [r3, #20]
 800c914:	f043 0201 	orr.w	r2, r3, #1
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	615a      	str	r2, [r3, #20]
}
 800c91c:	bf00      	nop
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b082      	sub	sp, #8
 800c92c:	af00      	add	r7, sp, #0
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800c92e:	2001      	movs	r0, #1
 800c930:	f7ff ff7c 	bl	800c82c <LL_APB1_GRP1_IsEnabledClock>
 800c934:	6078      	str	r0, [r7, #4]
  if ( isTIM2ClockOn == 0 )
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <startTimers+0x2a>
  {
    /* Temporary Enable TIM2 clock if not already on */
    LL_APB1_GRP1_EnableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800c93c:	2001      	movs	r0, #1
 800c93e:	f7ff ff5d 	bl	800c7fc <LL_APB1_GRP1_EnableClock>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800c942:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c946:	f7ff ffdf 	bl	800c908 <LL_TIM_GenerateEvent_UPDATE>
    LL_APB1_GRP1_DisableClock ( LL_APB1_GRP1_PERIPH_TIM2 );
 800c94a:	2001      	movs	r0, #1
 800c94c:	f7ff ff84 	bl	800c858 <LL_APB1_GRP1_DisableClock>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 800c950:	e013      	b.n	800c97a <startTimers+0x52>
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 800c952:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c956:	685a      	ldr	r2, [r3, #4]
 800c958:	4b0a      	ldr	r3, [pc, #40]	; (800c984 <startTimers+0x5c>)
 800c95a:	4013      	ands	r3, r2
 800c95c:	603b      	str	r3, [r7, #0]
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
 800c95e:	2120      	movs	r1, #32
 800c960:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c964:	f7ff ff9a 	bl	800c89c <LL_TIM_SetTriggerOutput>
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
 800c968:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c96c:	f7ff ffcc 	bl	800c908 <LL_TIM_GenerateEvent_UPDATE>
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
 800c970:	6839      	ldr	r1, [r7, #0]
 800c972:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800c976:	f7ff ff91 	bl	800c89c <LL_TIM_SetTriggerOutput>
}
 800c97a:	bf00      	nop
 800c97c:	3708      	adds	r7, #8
 800c97e:	46bd      	mov	sp, r7
 800c980:	bd80      	pop	{r7, pc}
 800c982:	bf00      	nop
 800c984:	02000070 	.word	0x02000070

0800c988 <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, uint8_t *cnt )
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b086      	sub	sp, #24
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	60f8      	str	r0, [r7, #12]
 800c990:	60b9      	str	r1, [r7, #8]
 800c992:	603b      	str	r3, [r7, #0]
 800c994:	4613      	mov	r3, r2
 800c996:	71fb      	strb	r3, [r7, #7]
  uint16_t hCalibrationPeriodCounter;
  uint16_t hMaxPeriodsNumber;

  if ( LL_TIM_GetCounterMode(TIMx) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff ff71 	bl	800c880 <LL_TIM_GetCounterMode>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	2b60      	cmp	r3, #96	; 0x60
 800c9a2:	d105      	bne.n	800c9b0 <waitForPolarizationEnd+0x28>
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 800c9a4:	79fb      	ldrb	r3, [r7, #7]
 800c9a6:	3301      	adds	r3, #1
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	015b      	lsls	r3, r3, #5
 800c9ac:	82bb      	strh	r3, [r7, #20]
 800c9ae:	e005      	b.n	800c9bc <waitForPolarizationEnd+0x34>
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 800c9b0:	79fb      	ldrb	r3, [r7, #7]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	085b      	lsrs	r3, r3, #1
 800c9b6:	b29b      	uxth	r3, r3
 800c9b8:	015b      	lsls	r3, r3, #5
 800c9ba:	82bb      	strh	r3, [r7, #20]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f7ff ff82 	bl	800c8c6 <LL_TIM_ClearFlag_CC1>
  hCalibrationPeriodCounter = 0u;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	82fb      	strh	r3, [r7, #22]
  while (*cnt < NB_CONVERSIONS)
 800c9c6:	e017      	b.n	800c9f8 <waitForPolarizationEnd+0x70>
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f7ff ff8a 	bl	800c8e2 <LL_TIM_IsActiveFlag_CC1>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d011      	beq.n	800c9f8 <waitForPolarizationEnd+0x70>
    {
      LL_TIM_ClearFlag_CC1(TIMx);
 800c9d4:	68f8      	ldr	r0, [r7, #12]
 800c9d6:	f7ff ff76 	bl	800c8c6 <LL_TIM_ClearFlag_CC1>
      hCalibrationPeriodCounter++;
 800c9da:	8afb      	ldrh	r3, [r7, #22]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	82fb      	strh	r3, [r7, #22]
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800c9e0:	8afa      	ldrh	r2, [r7, #22]
 800c9e2:	8abb      	ldrh	r3, [r7, #20]
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d307      	bcc.n	800c9f8 <waitForPolarizationEnd+0x70>
      {
        if (*cnt < NB_CONVERSIONS)
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	2b0f      	cmp	r3, #15
 800c9ee:	d803      	bhi.n	800c9f8 <waitForPolarizationEnd+0x70>
        {
          *SWerror = 1u;
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	2201      	movs	r2, #1
 800c9f4:	801a      	strh	r2, [r3, #0]
          break;
 800c9f6:	e003      	b.n	800ca00 <waitForPolarizationEnd+0x78>
  while (*cnt < NB_CONVERSIONS)
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b0f      	cmp	r3, #15
 800c9fe:	d9e3      	bls.n	800c9c8 <waitForPolarizationEnd+0x40>
        }
      }
    }
  }
}
 800ca00:	bf00      	nop
 800ca02:	3718      	adds	r7, #24
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <PWMC_GetPhaseCurrents>:
  * @param  pHandle handle on the target PWMC component
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	685b      	ldr	r3, [r3, #4]
 800ca16:	6839      	ldr	r1, [r7, #0]
 800ca18:	6878      	ldr	r0, [r7, #4]
 800ca1a:	4798      	blx	r3
}
 800ca1c:	bf00      	nop
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08a      	sub	sp, #40	; 0x28
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
 800ca2c:	6039      	str	r1, [r7, #0]
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 800ca2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 800ca32:	461a      	mov	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800ca38:	fb03 f302 	mul.w	r3, r3, r2
 800ca3c:	61bb      	str	r3, [r7, #24]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 800ca3e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ca42:	461a      	mov	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca4a:	fb03 f202 	mul.w	r2, r3, r2
 800ca4e:	4613      	mov	r3, r2
 800ca50:	07db      	lsls	r3, r3, #31
 800ca52:	1a9b      	subs	r3, r3, r2
 800ca54:	005b      	lsls	r3, r3, #1
 800ca56:	617b      	str	r3, [r7, #20]

  wX = wUBeta;
 800ca58:	697b      	ldr	r3, [r7, #20]
 800ca5a:	613b      	str	r3, [r7, #16]
  wY = ( wUBeta + wUAlpha ) / 2;
 800ca5c:	697a      	ldr	r2, [r7, #20]
 800ca5e:	69bb      	ldr	r3, [r7, #24]
 800ca60:	4413      	add	r3, r2
 800ca62:	0fda      	lsrs	r2, r3, #31
 800ca64:	4413      	add	r3, r2
 800ca66:	105b      	asrs	r3, r3, #1
 800ca68:	60fb      	str	r3, [r7, #12]
  wZ = ( wUBeta - wUAlpha ) / 2;
 800ca6a:	697a      	ldr	r2, [r7, #20]
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	0fda      	lsrs	r2, r3, #31
 800ca72:	4413      	add	r3, r2
 800ca74:	105b      	asrs	r3, r3, #1
 800ca76:	60bb      	str	r3, [r7, #8]

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	f280 80bd 	bge.w	800cbfa <PWMC_SetPhaseVoltage+0x1d6>
  {
    if ( wZ < 0 )
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	da3c      	bge.n	800cb00 <PWMC_SetPhaseVoltage+0xdc>
    {
      pHandle->Sector = SECTOR_5;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2204      	movs	r2, #4
 800ca8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ca94:	089b      	lsrs	r3, r3, #2
 800ca96:	b29b      	uxth	r3, r3
 800ca98:	4619      	mov	r1, r3
 800ca9a:	68fa      	ldr	r2, [r7, #12]
 800ca9c:	68bb      	ldr	r3, [r7, #8]
 800ca9e:	1ad3      	subs	r3, r2, r3
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	da03      	bge.n	800caac <PWMC_SetPhaseVoltage+0x88>
 800caa4:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800caa8:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800caac:	149b      	asrs	r3, r3, #18
 800caae:	440b      	add	r3, r1
 800cab0:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800cab2:	68bb      	ldr	r3, [r7, #8]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	da03      	bge.n	800cac0 <PWMC_SetPhaseVoltage+0x9c>
 800cab8:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cabc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cac0:	145b      	asrs	r3, r3, #17
 800cac2:	461a      	mov	r2, r3
 800cac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cac6:	4413      	add	r3, r2
 800cac8:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	da03      	bge.n	800cad8 <PWMC_SetPhaseVoltage+0xb4>
 800cad0:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cad4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cad8:	145b      	asrs	r3, r3, #17
 800cada:	425b      	negs	r3, r3
 800cadc:	461a      	mov	r2, r3
 800cade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cae0:	4413      	add	r3, r2
 800cae2:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhC;
 800cae4:	69fb      	ldr	r3, [r7, #28]
 800cae6:	b29a      	uxth	r2, r3
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800caec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caee:	b29a      	uxth	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 800caf4:	6a3b      	ldr	r3, [r7, #32]
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800cafe:	e138      	b.n	800cd72 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ >= 0 */
      if ( wX <= 0 )
 800cb00:	693b      	ldr	r3, [r7, #16]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	dc3c      	bgt.n	800cb80 <PWMC_SetPhaseVoltage+0x15c>
      {
        pHandle->Sector = SECTOR_4;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2203      	movs	r2, #3
 800cb0a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb14:	089b      	lsrs	r3, r3, #2
 800cb16:	b29b      	uxth	r3, r3
 800cb18:	4619      	mov	r1, r3
 800cb1a:	693a      	ldr	r2, [r7, #16]
 800cb1c:	68bb      	ldr	r3, [r7, #8]
 800cb1e:	1ad3      	subs	r3, r2, r3
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	da03      	bge.n	800cb2c <PWMC_SetPhaseVoltage+0x108>
 800cb24:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800cb28:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cb2c:	149b      	asrs	r3, r3, #18
 800cb2e:	440b      	add	r3, r1
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	da03      	bge.n	800cb40 <PWMC_SetPhaseVoltage+0x11c>
 800cb38:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cb3c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb40:	145b      	asrs	r3, r3, #17
 800cb42:	461a      	mov	r2, r3
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	4413      	add	r3, r2
 800cb48:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	da03      	bge.n	800cb58 <PWMC_SetPhaseVoltage+0x134>
 800cb50:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cb54:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cb58:	145b      	asrs	r3, r3, #17
 800cb5a:	425b      	negs	r3, r3
 800cb5c:	461a      	mov	r2, r3
 800cb5e:	6a3b      	ldr	r3, [r7, #32]
 800cb60:	4413      	add	r3, r2
 800cb62:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhC;
 800cb64:	69fb      	ldr	r3, [r7, #28]
 800cb66:	b29a      	uxth	r2, r3
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800cb7e:	e0f8      	b.n	800cd72 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_3;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2202      	movs	r2, #2
 800cb84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cb8e:	089b      	lsrs	r3, r3, #2
 800cb90:	b29b      	uxth	r3, r3
 800cb92:	4619      	mov	r1, r3
 800cb94:	68fa      	ldr	r2, [r7, #12]
 800cb96:	693b      	ldr	r3, [r7, #16]
 800cb98:	1ad3      	subs	r3, r2, r3
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	da03      	bge.n	800cba6 <PWMC_SetPhaseVoltage+0x182>
 800cb9e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800cba2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cba6:	149b      	asrs	r3, r3, #18
 800cba8:	440b      	add	r3, r1
 800cbaa:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	da03      	bge.n	800cbba <PWMC_SetPhaseVoltage+0x196>
 800cbb2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cbb6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cbba:	145b      	asrs	r3, r3, #17
 800cbbc:	425b      	negs	r3, r3
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	4413      	add	r3, r2
 800cbc4:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800cbc6:	693b      	ldr	r3, [r7, #16]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	da03      	bge.n	800cbd4 <PWMC_SetPhaseVoltage+0x1b0>
 800cbcc:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cbd0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cbd4:	145b      	asrs	r3, r3, #17
 800cbd6:	461a      	mov	r2, r3
 800cbd8:	69fb      	ldr	r3, [r7, #28]
 800cbda:	4413      	add	r3, r2
 800cbdc:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhB;
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	b29a      	uxth	r2, r3
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 800cbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbf0:	b29a      	uxth	r2, r3
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800cbf8:	e0bb      	b.n	800cd72 <PWMC_SetPhaseVoltage+0x34e>
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	db3c      	blt.n	800cc7a <PWMC_SetPhaseVoltage+0x256>
    {
      pHandle->Sector = SECTOR_2;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2201      	movs	r2, #1
 800cc04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc0e:	089b      	lsrs	r3, r3, #2
 800cc10:	b29b      	uxth	r3, r3
 800cc12:	4619      	mov	r1, r3
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	68bb      	ldr	r3, [r7, #8]
 800cc18:	1ad3      	subs	r3, r2, r3
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	da03      	bge.n	800cc26 <PWMC_SetPhaseVoltage+0x202>
 800cc1e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800cc22:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cc26:	149b      	asrs	r3, r3, #18
 800cc28:	440b      	add	r3, r1
 800cc2a:	627b      	str	r3, [r7, #36]	; 0x24
      wTimePhB = wTimePhA + wZ / 131072;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	da03      	bge.n	800cc3a <PWMC_SetPhaseVoltage+0x216>
 800cc32:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cc36:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc3a:	145b      	asrs	r3, r3, #17
 800cc3c:	461a      	mov	r2, r3
 800cc3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc40:	4413      	add	r3, r2
 800cc42:	623b      	str	r3, [r7, #32]
      wTimePhC = wTimePhA - wY / 131072;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	da03      	bge.n	800cc52 <PWMC_SetPhaseVoltage+0x22e>
 800cc4a:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cc4e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cc52:	145b      	asrs	r3, r3, #17
 800cc54:	425b      	negs	r3, r3
 800cc56:	461a      	mov	r2, r3
 800cc58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc5a:	4413      	add	r3, r2
 800cc5c:	61fb      	str	r3, [r7, #28]
      pHandle->lowDuty = wTimePhB;
 800cc5e:	6a3b      	ldr	r3, [r7, #32]
 800cc60:	b29a      	uxth	r2, r3
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	879a      	strh	r2, [r3, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 800cc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc68:	b29a      	uxth	r2, r3
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 800cc6e:	69fb      	ldr	r3, [r7, #28]
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800cc78:	e07b      	b.n	800cd72 <PWMC_SetPhaseVoltage+0x34e>
    }
    else /* wZ < 0 */
      if ( wX <= 0 )
 800cc7a:	693b      	ldr	r3, [r7, #16]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	dc3c      	bgt.n	800ccfa <PWMC_SetPhaseVoltage+0x2d6>
      {
        pHandle->Sector = SECTOR_6;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2205      	movs	r2, #5
 800cc84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cc8e:	089b      	lsrs	r3, r3, #2
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	4619      	mov	r1, r3
 800cc94:	68fa      	ldr	r2, [r7, #12]
 800cc96:	693b      	ldr	r3, [r7, #16]
 800cc98:	1ad3      	subs	r3, r2, r3
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	da03      	bge.n	800cca6 <PWMC_SetPhaseVoltage+0x282>
 800cc9e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800cca2:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cca6:	149b      	asrs	r3, r3, #18
 800cca8:	440b      	add	r3, r1
 800ccaa:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhC = wTimePhA - wY / 131072;
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	da03      	bge.n	800ccba <PWMC_SetPhaseVoltage+0x296>
 800ccb2:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800ccb6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ccba:	145b      	asrs	r3, r3, #17
 800ccbc:	425b      	negs	r3, r3
 800ccbe:	461a      	mov	r2, r3
 800ccc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccc2:	4413      	add	r3, r2
 800ccc4:	61fb      	str	r3, [r7, #28]
        wTimePhB = wTimePhC + wX / 131072;
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	da03      	bge.n	800ccd4 <PWMC_SetPhaseVoltage+0x2b0>
 800cccc:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800ccd0:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ccd4:	145b      	asrs	r3, r3, #17
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	69fb      	ldr	r3, [r7, #28]
 800ccda:	4413      	add	r3, r2
 800ccdc:	623b      	str	r3, [r7, #32]
        pHandle->lowDuty = wTimePhA;
 800ccde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 800cce6:	69fb      	ldr	r3, [r7, #28]
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 800ccee:	6a3b      	ldr	r3, [r7, #32]
 800ccf0:	b29a      	uxth	r2, r3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800ccf8:	e03b      	b.n	800cd72 <PWMC_SetPhaseVoltage+0x34e>
      }
      else /* wX > 0 */
      {
        pHandle->Sector = SECTOR_1;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2200      	movs	r2, #0
 800ccfe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800cd08:	089b      	lsrs	r3, r3, #2
 800cd0a:	b29b      	uxth	r3, r3
 800cd0c:	4619      	mov	r1, r3
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	68bb      	ldr	r3, [r7, #8]
 800cd12:	1ad3      	subs	r3, r2, r3
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	da03      	bge.n	800cd20 <PWMC_SetPhaseVoltage+0x2fc>
 800cd18:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800cd1c:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800cd20:	149b      	asrs	r3, r3, #18
 800cd22:	440b      	add	r3, r1
 800cd24:	627b      	str	r3, [r7, #36]	; 0x24
        wTimePhB = wTimePhA + wZ / 131072;
 800cd26:	68bb      	ldr	r3, [r7, #8]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	da03      	bge.n	800cd34 <PWMC_SetPhaseVoltage+0x310>
 800cd2c:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cd30:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cd34:	145b      	asrs	r3, r3, #17
 800cd36:	461a      	mov	r2, r3
 800cd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3a:	4413      	add	r3, r2
 800cd3c:	623b      	str	r3, [r7, #32]
        wTimePhC = wTimePhB - wX / 131072;
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	da03      	bge.n	800cd4c <PWMC_SetPhaseVoltage+0x328>
 800cd44:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 800cd48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cd4c:	145b      	asrs	r3, r3, #17
 800cd4e:	425b      	negs	r3, r3
 800cd50:	461a      	mov	r2, r3
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	4413      	add	r3, r2
 800cd56:	61fb      	str	r3, [r7, #28]
        pHandle->lowDuty = wTimePhA;
 800cd58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	879a      	strh	r2, [r3, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 800cd60:	6a3b      	ldr	r3, [r7, #32]
 800cd62:	b29a      	uxth	r2, r3
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	87da      	strh	r2, [r3, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 800cd68:	69fb      	ldr	r3, [r7, #28]
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      }
  }

  pHandle->CntPhA = ( uint16_t )wTimePhA;
 800cd72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd74:	b29a      	uxth	r2, r3
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	865a      	strh	r2, [r3, #50]	; 0x32
  pHandle->CntPhB = ( uint16_t )wTimePhB;
 800cd7a:	6a3b      	ldr	r3, [r7, #32]
 800cd7c:	b29a      	uxth	r2, r3
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	869a      	strh	r2, [r3, #52]	; 0x34
  pHandle->CntPhC = ( uint16_t )wTimePhC;
 800cd82:	69fb      	ldr	r3, [r7, #28]
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	86da      	strh	r2, [r3, #54]	; 0x36

  if ( pHandle->DTTest == 1u )
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800cd90:	2b01      	cmp	r3, #1
 800cd92:	d147      	bne.n	800ce24 <PWMC_SetPhaseVoltage+0x400>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	f9b3 3048 	ldrsh.w	r3, [r3, #72]	; 0x48
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	dd09      	ble.n	800cdb2 <PWMC_SetPhaseVoltage+0x38e>
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cda8:	4413      	add	r3, r2
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	865a      	strh	r2, [r3, #50]	; 0x32
 800cdb0:	e008      	b.n	800cdc4 <PWMC_SetPhaseVoltage+0x3a0>
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cdbc:	1ad3      	subs	r3, r2, r3
 800cdbe:	b29a      	uxth	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	865a      	strh	r2, [r3, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f9b3 304a 	ldrsh.w	r3, [r3, #74]	; 0x4a
 800cdca:	2b00      	cmp	r3, #0
 800cdcc:	dd09      	ble.n	800cde2 <PWMC_SetPhaseVoltage+0x3be>
    {
      pHandle->CntPhB += pHandle->DTCompCnt;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cdd8:	4413      	add	r3, r2
 800cdda:	b29a      	uxth	r2, r3
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	869a      	strh	r2, [r3, #52]	; 0x34
 800cde0:	e008      	b.n	800cdf4 <PWMC_SetPhaseVoltage+0x3d0>
    }
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	b29a      	uxth	r2, r3
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	869a      	strh	r2, [r3, #52]	; 0x34
    }

    if ( pHandle->Ic > 0 )
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	f9b3 304c 	ldrsh.w	r3, [r3, #76]	; 0x4c
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	dd09      	ble.n	800ce12 <PWMC_SetPhaseVoltage+0x3ee>
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ce08:	4413      	add	r3, r2
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	86da      	strh	r2, [r3, #54]	; 0x36
 800ce10:	e008      	b.n	800ce24 <PWMC_SetPhaseVoltage+0x400>
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	b29a      	uxth	r2, r3
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	86da      	strh	r2, [r3, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	699b      	ldr	r3, [r3, #24]
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	4798      	blx	r3
 800ce2c:	4603      	mov	r3, r0
}
 800ce2e:	4618      	mov	r0, r3
 800ce30:	3728      	adds	r7, #40	; 0x28
 800ce32:	46bd      	mov	sp, r7
 800ce34:	bd80      	pop	{r7, pc}

0800ce36 <PWMC_SwitchOffPWM>:
/**
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
 800ce36:	b580      	push	{r7, lr}
 800ce38:	b082      	sub	sp, #8
 800ce3a:	af00      	add	r7, sp, #0
 800ce3c:	6078      	str	r0, [r7, #4]
  pHandle->pFctSwitchOffPwm( pHandle );
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	689b      	ldr	r3, [r3, #8]
 800ce42:	6878      	ldr	r0, [r7, #4]
 800ce44:	4798      	blx	r3
}
 800ce46:	bf00      	nop
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 800ce4e:	b580      	push	{r7, lr}
 800ce50:	b084      	sub	sp, #16
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
 800ce56:	460b      	mov	r3, r1
 800ce58:	70fb      	strb	r3, [r7, #3]
  bool retVal = false;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	73fb      	strb	r3, [r7, #15]
  if ( action == CRC_START )
 800ce5e:	78fb      	ldrb	r3, [r7, #3]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d114      	bne.n	800ce8e <PWMC_CurrentReadingCalibr+0x40>
  {
    PWMC_SwitchOffPWM( pHandle );
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f7ff ffe6 	bl	800ce36 <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d124      	bne.n	800ceca <PWMC_CurrentReadingCalibr+0x7c>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	691b      	ldr	r3, [r3, #16]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	4798      	blx	r3
      retVal = true;
 800ce88:	2301      	movs	r3, #1
 800ce8a:	73fb      	strb	r3, [r7, #15]
 800ce8c:	e01d      	b.n	800ceca <PWMC_CurrentReadingCalibr+0x7c>
    }
  }
  else if ( action == CRC_EXEC )
 800ce8e:	78fb      	ldrb	r3, [r7, #3]
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d11a      	bne.n	800ceca <PWMC_CurrentReadingCalibr+0x7c>
  {
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d013      	beq.n	800cec6 <PWMC_CurrentReadingCalibr+0x78>
    {
      pHandle->OffCalibrWaitTimeCounter--;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800cea4:	3b01      	subs	r3, #1
 800cea6:	b29a      	uxth	r2, r3
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d108      	bne.n	800ceca <PWMC_CurrentReadingCalibr+0x7c>
      {
        pHandle->pFctCurrReadingCalib( pHandle );
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	4798      	blx	r3
        retVal = true;
 800cec0:	2301      	movs	r3, #1
 800cec2:	73fb      	strb	r3, [r7, #15]
 800cec4:	e001      	b.n	800ceca <PWMC_CurrentReadingCalibr+0x7c>
      }
    }
    else
    {
      retVal = true;
 800cec6:	2301      	movs	r3, #1
 800cec8:	73fb      	strb	r3, [r7, #15]
    }
  }
  else
  {
  }
  return retVal;
 800ceca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <PWMC_CheckOverCurrent>:

/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b082      	sub	sp, #8
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	69db      	ldr	r3, [r3, #28]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	4798      	blx	r3
 800cee4:	4603      	mov	r3, r0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3708      	adds	r7, #8
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <LL_ADC_INJ_SetQueueMode>:
{
 800ceee:	b480      	push	{r7}
 800cef0:	b083      	sub	sp, #12
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	68db      	ldr	r3, [r3, #12]
 800cefc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cf04:	683a      	ldr	r2, [r7, #0]
 800cf06:	431a      	orrs	r2, r3
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	60da      	str	r2, [r3, #12]
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <LL_ADC_DisableDeepPowerDown>:
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	689b      	ldr	r3, [r3, #8]
 800cf24:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800cf28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	6093      	str	r3, [r2, #8]
}
 800cf30:	bf00      	nop
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <LL_ADC_EnableInternalRegulator>:
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	689b      	ldr	r3, [r3, #8]
 800cf48:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800cf4c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cf50:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	609a      	str	r2, [r3, #8]
}
 800cf58:	bf00      	nop
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <LL_ADC_IsInternalRegulatorEnabled>:
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	689b      	ldr	r3, [r3, #8]
 800cf70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf78:	d101      	bne.n	800cf7e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800cf7a:	2301      	movs	r3, #1
 800cf7c:	e000      	b.n	800cf80 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800cf7e:	2300      	movs	r3, #0
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <LL_ADC_Enable>:
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	689b      	ldr	r3, [r3, #8]
 800cf98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cf9c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cfa0:	f043 0201 	orr.w	r2, r3, #1
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	609a      	str	r2, [r3, #8]
}
 800cfa8:	bf00      	nop
 800cfaa:	370c      	adds	r7, #12
 800cfac:	46bd      	mov	sp, r7
 800cfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb2:	4770      	bx	lr

0800cfb4 <LL_ADC_IsEnabled>:
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	689b      	ldr	r3, [r3, #8]
 800cfc0:	f003 0301 	and.w	r3, r3, #1
 800cfc4:	2b01      	cmp	r3, #1
 800cfc6:	d101      	bne.n	800cfcc <LL_ADC_IsEnabled+0x18>
 800cfc8:	2301      	movs	r3, #1
 800cfca:	e000      	b.n	800cfce <LL_ADC_IsEnabled+0x1a>
 800cfcc:	2300      	movs	r3, #0
}
 800cfce:	4618      	mov	r0, r3
 800cfd0:	370c      	adds	r7, #12
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd8:	4770      	bx	lr

0800cfda <LL_ADC_StartCalibration>:
{
 800cfda:	b480      	push	{r7}
 800cfdc:	b083      	sub	sp, #12
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	6078      	str	r0, [r7, #4]
 800cfe2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800cfec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800cff6:	4313      	orrs	r3, r2
 800cff8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	609a      	str	r2, [r3, #8]
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <LL_ADC_IsCalibrationOnGoing>:
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d01c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d020:	d101      	bne.n	800d026 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800d022:	2301      	movs	r3, #1
 800d024:	e000      	b.n	800d028 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800d026:	2300      	movs	r3, #0
}
 800d028:	4618      	mov	r0, r3
 800d02a:	370c      	adds	r7, #12
 800d02c:	46bd      	mov	sp, r7
 800d02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d032:	4770      	bx	lr

0800d034 <LL_ADC_INJ_StartConversion>:
{
 800d034:	b480      	push	{r7}
 800d036:	b083      	sub	sp, #12
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	689b      	ldr	r3, [r3, #8]
 800d040:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d048:	f043 0208 	orr.w	r2, r3, #8
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	609a      	str	r2, [r3, #8]
}
 800d050:	bf00      	nop
 800d052:	370c      	adds	r7, #12
 800d054:	46bd      	mov	sp, r7
 800d056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05a:	4770      	bx	lr

0800d05c <LL_ADC_INJ_StopConversion>:
{
 800d05c:	b480      	push	{r7}
 800d05e:	b083      	sub	sp, #12
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	689b      	ldr	r3, [r3, #8]
 800d068:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d06c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800d070:	f043 0220 	orr.w	r2, r3, #32
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	609a      	str	r2, [r3, #8]
}
 800d078:	bf00      	nop
 800d07a:	370c      	adds	r7, #12
 800d07c:	46bd      	mov	sp, r7
 800d07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d082:	4770      	bx	lr

0800d084 <LL_ADC_IsActiveFlag_ADRDY>:
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	f003 0301 	and.w	r3, r3, #1
 800d094:	2b01      	cmp	r3, #1
 800d096:	d101      	bne.n	800d09c <LL_ADC_IsActiveFlag_ADRDY+0x18>
 800d098:	2301      	movs	r3, #1
 800d09a:	e000      	b.n	800d09e <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800d09c:	2300      	movs	r3, #0
}
 800d09e:	4618      	mov	r0, r3
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr

0800d0aa <LL_ADC_ClearFlag_EOC>:
{
 800d0aa:	b480      	push	{r7}
 800d0ac:	b083      	sub	sp, #12
 800d0ae:	af00      	add	r7, sp, #0
 800d0b0:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2204      	movs	r2, #4
 800d0b6:	601a      	str	r2, [r3, #0]
}
 800d0b8:	bf00      	nop
 800d0ba:	370c      	adds	r7, #12
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c2:	4770      	bx	lr

0800d0c4 <LL_ADC_ClearFlag_JEOC>:
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	b083      	sub	sp, #12
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2220      	movs	r2, #32
 800d0d0:	601a      	str	r2, [r3, #0]
}
 800d0d2:	bf00      	nop
 800d0d4:	370c      	adds	r7, #12
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr

0800d0de <LL_ADC_ClearFlag_JEOS>:
{
 800d0de:	b480      	push	{r7}
 800d0e0:	b083      	sub	sp, #12
 800d0e2:	af00      	add	r7, sp, #0
 800d0e4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	2240      	movs	r2, #64	; 0x40
 800d0ea:	601a      	str	r2, [r3, #0]
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <LL_ADC_EnableIT_JEOS>:
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	685b      	ldr	r3, [r3, #4]
 800d104:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	605a      	str	r2, [r3, #4]
}
 800d10c:	bf00      	nop
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <LL_ADC_DisableIT_EOC>:
{
 800d118:	b480      	push	{r7}
 800d11a:	b083      	sub	sp, #12
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	f023 0204 	bic.w	r2, r3, #4
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	605a      	str	r2, [r3, #4]
}
 800d12c:	bf00      	nop
 800d12e:	370c      	adds	r7, #12
 800d130:	46bd      	mov	sp, r7
 800d132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d136:	4770      	bx	lr

0800d138 <LL_ADC_DisableIT_JEOC>:
{
 800d138:	b480      	push	{r7}
 800d13a:	b083      	sub	sp, #12
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	f023 0220 	bic.w	r2, r3, #32
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	605a      	str	r2, [r3, #4]
}
 800d14c:	bf00      	nop
 800d14e:	370c      	adds	r7, #12
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr

0800d158 <LL_DBGMCU_APB2_GRP1_FreezePeriph>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
 800d158:	b480      	push	{r7}
 800d15a:	b083      	sub	sp, #12
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800d160:	4b05      	ldr	r3, [pc, #20]	; (800d178 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800d162:	691a      	ldr	r2, [r3, #16]
 800d164:	4904      	ldr	r1, [pc, #16]	; (800d178 <LL_DBGMCU_APB2_GRP1_FreezePeriph+0x20>)
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	4313      	orrs	r3, r2
 800d16a:	610b      	str	r3, [r1, #16]
}
 800d16c:	bf00      	nop
 800d16e:	370c      	adds	r7, #12
 800d170:	46bd      	mov	sp, r7
 800d172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d176:	4770      	bx	lr
 800d178:	e0042000 	.word	0xe0042000

0800d17c <LL_TIM_DisableCounter>:
{
 800d17c:	b480      	push	{r7}
 800d17e:	b083      	sub	sp, #12
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f023 0201 	bic.w	r2, r3, #1
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	601a      	str	r2, [r3, #0]
}
 800d190:	bf00      	nop
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <LL_TIM_SetCounter>:
{
 800d19c:	b480      	push	{r7}
 800d19e:	b083      	sub	sp, #12
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
 800d1a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	683a      	ldr	r2, [r7, #0]
 800d1aa:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d1ac:	bf00      	nop
 800d1ae:	370c      	adds	r7, #12
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b6:	4770      	bx	lr

0800d1b8 <LL_TIM_SetRepetitionCounter>:
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b083      	sub	sp, #12
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	683a      	ldr	r2, [r7, #0]
 800d1c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d1c8:	bf00      	nop
 800d1ca:	370c      	adds	r7, #12
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d2:	4770      	bx	lr

0800d1d4 <LL_TIM_CC_EnableChannel>:
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	b083      	sub	sp, #12
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6a1a      	ldr	r2, [r3, #32]
 800d1e2:	683b      	ldr	r3, [r7, #0]
 800d1e4:	431a      	orrs	r2, r3
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	621a      	str	r2, [r3, #32]
}
 800d1ea:	bf00      	nop
 800d1ec:	370c      	adds	r7, #12
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <LL_TIM_CC_DisableChannel>:
{
 800d1f6:	b480      	push	{r7}
 800d1f8:	b083      	sub	sp, #12
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
 800d1fe:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	6a1a      	ldr	r2, [r3, #32]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	43db      	mvns	r3, r3
 800d208:	401a      	ands	r2, r3
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	621a      	str	r2, [r3, #32]
}
 800d20e:	bf00      	nop
 800d210:	370c      	adds	r7, #12
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr
	...

0800d21c <LL_TIM_OC_SetMode>:
{
 800d21c:	b4b0      	push	{r4, r5, r7}
 800d21e:	b085      	sub	sp, #20
 800d220:	af00      	add	r7, sp, #0
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800d228:	68bb      	ldr	r3, [r7, #8]
 800d22a:	2b01      	cmp	r3, #1
 800d22c:	d02e      	beq.n	800d28c <LL_TIM_OC_SetMode+0x70>
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2b04      	cmp	r3, #4
 800d232:	d029      	beq.n	800d288 <LL_TIM_OC_SetMode+0x6c>
 800d234:	68bb      	ldr	r3, [r7, #8]
 800d236:	2b10      	cmp	r3, #16
 800d238:	d024      	beq.n	800d284 <LL_TIM_OC_SetMode+0x68>
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2b40      	cmp	r3, #64	; 0x40
 800d23e:	d01f      	beq.n	800d280 <LL_TIM_OC_SetMode+0x64>
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d246:	d019      	beq.n	800d27c <LL_TIM_OC_SetMode+0x60>
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d24e:	d013      	beq.n	800d278 <LL_TIM_OC_SetMode+0x5c>
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d256:	d00d      	beq.n	800d274 <LL_TIM_OC_SetMode+0x58>
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d25e:	d007      	beq.n	800d270 <LL_TIM_OC_SetMode+0x54>
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d266:	d101      	bne.n	800d26c <LL_TIM_OC_SetMode+0x50>
 800d268:	2308      	movs	r3, #8
 800d26a:	e010      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d26c:	2309      	movs	r3, #9
 800d26e:	e00e      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d270:	2307      	movs	r3, #7
 800d272:	e00c      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d274:	2306      	movs	r3, #6
 800d276:	e00a      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d278:	2305      	movs	r3, #5
 800d27a:	e008      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d27c:	2304      	movs	r3, #4
 800d27e:	e006      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d280:	2303      	movs	r3, #3
 800d282:	e004      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d284:	2302      	movs	r3, #2
 800d286:	e002      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d288:	2301      	movs	r3, #1
 800d28a:	e000      	b.n	800d28e <LL_TIM_OC_SetMode+0x72>
 800d28c:	2300      	movs	r3, #0
 800d28e:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	3318      	adds	r3, #24
 800d294:	461a      	mov	r2, r3
 800d296:	4629      	mov	r1, r5
 800d298:	4b0c      	ldr	r3, [pc, #48]	; (800d2cc <LL_TIM_OC_SetMode+0xb0>)
 800d29a:	5c5b      	ldrb	r3, [r3, r1]
 800d29c:	4413      	add	r3, r2
 800d29e:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]),  Mode << SHIFT_TAB_OCxx[iChannel]);
 800d2a0:	6822      	ldr	r2, [r4, #0]
 800d2a2:	4629      	mov	r1, r5
 800d2a4:	4b0a      	ldr	r3, [pc, #40]	; (800d2d0 <LL_TIM_OC_SetMode+0xb4>)
 800d2a6:	5c5b      	ldrb	r3, [r3, r1]
 800d2a8:	4619      	mov	r1, r3
 800d2aa:	4b0a      	ldr	r3, [pc, #40]	; (800d2d4 <LL_TIM_OC_SetMode+0xb8>)
 800d2ac:	408b      	lsls	r3, r1
 800d2ae:	43db      	mvns	r3, r3
 800d2b0:	401a      	ands	r2, r3
 800d2b2:	4629      	mov	r1, r5
 800d2b4:	4b06      	ldr	r3, [pc, #24]	; (800d2d0 <LL_TIM_OC_SetMode+0xb4>)
 800d2b6:	5c5b      	ldrb	r3, [r3, r1]
 800d2b8:	4619      	mov	r1, r3
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	408b      	lsls	r3, r1
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	6023      	str	r3, [r4, #0]
}
 800d2c2:	bf00      	nop
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bcb0      	pop	{r4, r5, r7}
 800d2ca:	4770      	bx	lr
 800d2cc:	0800fed8 	.word	0x0800fed8
 800d2d0:	0800fee4 	.word	0x0800fee4
 800d2d4:	00010073 	.word	0x00010073

0800d2d8 <LL_TIM_OC_EnablePreload>:
{
 800d2d8:	b4b0      	push	{r4, r5, r7}
 800d2da:	b083      	sub	sp, #12
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	2b01      	cmp	r3, #1
 800d2e6:	d02e      	beq.n	800d346 <LL_TIM_OC_EnablePreload+0x6e>
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	2b04      	cmp	r3, #4
 800d2ec:	d029      	beq.n	800d342 <LL_TIM_OC_EnablePreload+0x6a>
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	2b10      	cmp	r3, #16
 800d2f2:	d024      	beq.n	800d33e <LL_TIM_OC_EnablePreload+0x66>
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	2b40      	cmp	r3, #64	; 0x40
 800d2f8:	d01f      	beq.n	800d33a <LL_TIM_OC_EnablePreload+0x62>
 800d2fa:	683b      	ldr	r3, [r7, #0]
 800d2fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d300:	d019      	beq.n	800d336 <LL_TIM_OC_EnablePreload+0x5e>
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d308:	d013      	beq.n	800d332 <LL_TIM_OC_EnablePreload+0x5a>
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d310:	d00d      	beq.n	800d32e <LL_TIM_OC_EnablePreload+0x56>
 800d312:	683b      	ldr	r3, [r7, #0]
 800d314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d318:	d007      	beq.n	800d32a <LL_TIM_OC_EnablePreload+0x52>
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d320:	d101      	bne.n	800d326 <LL_TIM_OC_EnablePreload+0x4e>
 800d322:	2308      	movs	r3, #8
 800d324:	e010      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d326:	2309      	movs	r3, #9
 800d328:	e00e      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d32a:	2307      	movs	r3, #7
 800d32c:	e00c      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d32e:	2306      	movs	r3, #6
 800d330:	e00a      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d332:	2305      	movs	r3, #5
 800d334:	e008      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d336:	2304      	movs	r3, #4
 800d338:	e006      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d33a:	2303      	movs	r3, #3
 800d33c:	e004      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d33e:	2302      	movs	r3, #2
 800d340:	e002      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d342:	2301      	movs	r3, #1
 800d344:	e000      	b.n	800d348 <LL_TIM_OC_EnablePreload+0x70>
 800d346:	2300      	movs	r3, #0
 800d348:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	3318      	adds	r3, #24
 800d34e:	461a      	mov	r2, r3
 800d350:	4629      	mov	r1, r5
 800d352:	4b09      	ldr	r3, [pc, #36]	; (800d378 <LL_TIM_OC_EnablePreload+0xa0>)
 800d354:	5c5b      	ldrb	r3, [r3, r1]
 800d356:	4413      	add	r3, r2
 800d358:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800d35a:	6822      	ldr	r2, [r4, #0]
 800d35c:	4629      	mov	r1, r5
 800d35e:	4b07      	ldr	r3, [pc, #28]	; (800d37c <LL_TIM_OC_EnablePreload+0xa4>)
 800d360:	5c5b      	ldrb	r3, [r3, r1]
 800d362:	4619      	mov	r1, r3
 800d364:	2308      	movs	r3, #8
 800d366:	408b      	lsls	r3, r1
 800d368:	4313      	orrs	r3, r2
 800d36a:	6023      	str	r3, [r4, #0]
}
 800d36c:	bf00      	nop
 800d36e:	370c      	adds	r7, #12
 800d370:	46bd      	mov	sp, r7
 800d372:	bcb0      	pop	{r4, r5, r7}
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	0800fed8 	.word	0x0800fed8
 800d37c:	0800fee4 	.word	0x0800fee4

0800d380 <LL_TIM_OC_DisablePreload>:
{
 800d380:	b4b0      	push	{r4, r5, r7}
 800d382:	b083      	sub	sp, #12
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
 800d388:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	2b01      	cmp	r3, #1
 800d38e:	d02e      	beq.n	800d3ee <LL_TIM_OC_DisablePreload+0x6e>
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	2b04      	cmp	r3, #4
 800d394:	d029      	beq.n	800d3ea <LL_TIM_OC_DisablePreload+0x6a>
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	2b10      	cmp	r3, #16
 800d39a:	d024      	beq.n	800d3e6 <LL_TIM_OC_DisablePreload+0x66>
 800d39c:	683b      	ldr	r3, [r7, #0]
 800d39e:	2b40      	cmp	r3, #64	; 0x40
 800d3a0:	d01f      	beq.n	800d3e2 <LL_TIM_OC_DisablePreload+0x62>
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3a8:	d019      	beq.n	800d3de <LL_TIM_OC_DisablePreload+0x5e>
 800d3aa:	683b      	ldr	r3, [r7, #0]
 800d3ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d3b0:	d013      	beq.n	800d3da <LL_TIM_OC_DisablePreload+0x5a>
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3b8:	d00d      	beq.n	800d3d6 <LL_TIM_OC_DisablePreload+0x56>
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d3c0:	d007      	beq.n	800d3d2 <LL_TIM_OC_DisablePreload+0x52>
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3c8:	d101      	bne.n	800d3ce <LL_TIM_OC_DisablePreload+0x4e>
 800d3ca:	2308      	movs	r3, #8
 800d3cc:	e010      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3ce:	2309      	movs	r3, #9
 800d3d0:	e00e      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3d2:	2307      	movs	r3, #7
 800d3d4:	e00c      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3d6:	2306      	movs	r3, #6
 800d3d8:	e00a      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3da:	2305      	movs	r3, #5
 800d3dc:	e008      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3de:	2304      	movs	r3, #4
 800d3e0:	e006      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3e2:	2303      	movs	r3, #3
 800d3e4:	e004      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	e002      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3ea:	2301      	movs	r3, #1
 800d3ec:	e000      	b.n	800d3f0 <LL_TIM_OC_DisablePreload+0x70>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	3318      	adds	r3, #24
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	4629      	mov	r1, r5
 800d3fa:	4b09      	ldr	r3, [pc, #36]	; (800d420 <LL_TIM_OC_DisablePreload+0xa0>)
 800d3fc:	5c5b      	ldrb	r3, [r3, r1]
 800d3fe:	4413      	add	r3, r2
 800d400:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800d402:	6822      	ldr	r2, [r4, #0]
 800d404:	4629      	mov	r1, r5
 800d406:	4b07      	ldr	r3, [pc, #28]	; (800d424 <LL_TIM_OC_DisablePreload+0xa4>)
 800d408:	5c5b      	ldrb	r3, [r3, r1]
 800d40a:	4619      	mov	r1, r3
 800d40c:	2308      	movs	r3, #8
 800d40e:	408b      	lsls	r3, r1
 800d410:	43db      	mvns	r3, r3
 800d412:	4013      	ands	r3, r2
 800d414:	6023      	str	r3, [r4, #0]
}
 800d416:	bf00      	nop
 800d418:	370c      	adds	r7, #12
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bcb0      	pop	{r4, r5, r7}
 800d41e:	4770      	bx	lr
 800d420:	0800fed8 	.word	0x0800fed8
 800d424:	0800fee4 	.word	0x0800fee4

0800d428 <LL_TIM_OC_SetCompareCH1>:
{
 800d428:	b480      	push	{r7}
 800d42a:	b083      	sub	sp, #12
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	683a      	ldr	r2, [r7, #0]
 800d436:	635a      	str	r2, [r3, #52]	; 0x34
}
 800d438:	bf00      	nop
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <LL_TIM_OC_SetCompareCH2>:
{
 800d444:	b480      	push	{r7}
 800d446:	b083      	sub	sp, #12
 800d448:	af00      	add	r7, sp, #0
 800d44a:	6078      	str	r0, [r7, #4]
 800d44c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	683a      	ldr	r2, [r7, #0]
 800d452:	639a      	str	r2, [r3, #56]	; 0x38
}
 800d454:	bf00      	nop
 800d456:	370c      	adds	r7, #12
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr

0800d460 <LL_TIM_OC_SetCompareCH3>:
{
 800d460:	b480      	push	{r7}
 800d462:	b083      	sub	sp, #12
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	683a      	ldr	r2, [r7, #0]
 800d46e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d470:	bf00      	nop
 800d472:	370c      	adds	r7, #12
 800d474:	46bd      	mov	sp, r7
 800d476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47a:	4770      	bx	lr

0800d47c <LL_TIM_OC_SetCompareCH4>:
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	683a      	ldr	r2, [r7, #0]
 800d48a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800d48c:	bf00      	nop
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <LL_TIM_SetTriggerOutput>:
{
 800d498:	b480      	push	{r7}
 800d49a:	b083      	sub	sp, #12
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	685b      	ldr	r3, [r3, #4]
 800d4a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800d4aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	431a      	orrs	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	605a      	str	r2, [r3, #4]
}
 800d4b6:	bf00      	nop
 800d4b8:	370c      	adds	r7, #12
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c0:	4770      	bx	lr

0800d4c2 <LL_TIM_EnableAllOutputs>:
{
 800d4c2:	b480      	push	{r7}
 800d4c4:	b083      	sub	sp, #12
 800d4c6:	af00      	add	r7, sp, #0
 800d4c8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ce:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	645a      	str	r2, [r3, #68]	; 0x44
}
 800d4d6:	bf00      	nop
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr

0800d4e2 <LL_TIM_DisableAllOutputs>:
{
 800d4e2:	b480      	push	{r7}
 800d4e4:	b083      	sub	sp, #12
 800d4e6:	af00      	add	r7, sp, #0
 800d4e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	645a      	str	r2, [r3, #68]	; 0x44
}
 800d4f6:	bf00      	nop
 800d4f8:	370c      	adds	r7, #12
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <LL_TIM_ClearFlag_UPDATE>:
{
 800d502:	b480      	push	{r7}
 800d504:	b083      	sub	sp, #12
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f06f 0201 	mvn.w	r2, #1
 800d510:	611a      	str	r2, [r3, #16]
}
 800d512:	bf00      	nop
 800d514:	370c      	adds	r7, #12
 800d516:	46bd      	mov	sp, r7
 800d518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d51c:	4770      	bx	lr

0800d51e <LL_TIM_IsActiveFlag_UPDATE>:
{
 800d51e:	b480      	push	{r7}
 800d520:	b083      	sub	sp, #12
 800d522:	af00      	add	r7, sp, #0
 800d524:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	691b      	ldr	r3, [r3, #16]
 800d52a:	f003 0301 	and.w	r3, r3, #1
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d101      	bne.n	800d536 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 800d532:	2301      	movs	r3, #1
 800d534:	e000      	b.n	800d538 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800d536:	2300      	movs	r3, #0
}
 800d538:	4618      	mov	r0, r3
 800d53a:	370c      	adds	r7, #12
 800d53c:	46bd      	mov	sp, r7
 800d53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d542:	4770      	bx	lr

0800d544 <LL_TIM_ClearFlag_BRK>:
{
 800d544:	b480      	push	{r7}
 800d546:	b083      	sub	sp, #12
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d552:	611a      	str	r2, [r3, #16]
}
 800d554:	bf00      	nop
 800d556:	370c      	adds	r7, #12
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <LL_TIM_ClearFlag_BRK2>:
{
 800d560:	b480      	push	{r7}
 800d562:	b083      	sub	sp, #12
 800d564:	af00      	add	r7, sp, #0
 800d566:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d56e:	611a      	str	r2, [r3, #16]
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <LL_TIM_IsActiveFlag_BRK2>:
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	691b      	ldr	r3, [r3, #16]
 800d588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d58c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d590:	d101      	bne.n	800d596 <LL_TIM_IsActiveFlag_BRK2+0x1a>
 800d592:	2301      	movs	r3, #1
 800d594:	e000      	b.n	800d598 <LL_TIM_IsActiveFlag_BRK2+0x1c>
 800d596:	2300      	movs	r3, #0
}
 800d598:	4618      	mov	r0, r3
 800d59a:	370c      	adds	r7, #12
 800d59c:	46bd      	mov	sp, r7
 800d59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a2:	4770      	bx	lr

0800d5a4 <LL_TIM_EnableIT_UPDATE>:
{
 800d5a4:	b480      	push	{r7}
 800d5a6:	b083      	sub	sp, #12
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	68db      	ldr	r3, [r3, #12]
 800d5b0:	f043 0201 	orr.w	r2, r3, #1
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	60da      	str	r2, [r3, #12]
}
 800d5b8:	bf00      	nop
 800d5ba:	370c      	adds	r7, #12
 800d5bc:	46bd      	mov	sp, r7
 800d5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c2:	4770      	bx	lr

0800d5c4 <LL_TIM_DisableIT_UPDATE>:
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b083      	sub	sp, #12
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	68db      	ldr	r3, [r3, #12]
 800d5d0:	f023 0201 	bic.w	r2, r3, #1
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	60da      	str	r2, [r3, #12]
}
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <LL_TIM_EnableIT_BRK>:
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	60da      	str	r2, [r3, #12]
}
 800d5f8:	bf00      	nop
 800d5fa:	370c      	adds	r7, #12
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <LL_TIM_GenerateEvent_UPDATE>:
{
 800d604:	b480      	push	{r7}
 800d606:	b083      	sub	sp, #12
 800d608:	af00      	add	r7, sp, #0
 800d60a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	f043 0201 	orr.w	r2, r3, #1
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	615a      	str	r2, [r3, #20]
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	683a      	ldr	r2, [r7, #0]
 800d632:	619a      	str	r2, [r3, #24]
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	683a      	ldr	r2, [r7, #0]
 800d64e:	629a      	str	r2, [r3, #40]	; 0x28
}
 800d650:	bf00      	nop
 800d652:	370c      	adds	r7, #12
 800d654:	46bd      	mov	sp, r7
 800d656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65a:	4770      	bx	lr

0800d65c <LL_DAC_Enable>:
{
 800d65c:	b480      	push	{r7}
 800d65e:	b083      	sub	sp, #12
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->CR,
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681a      	ldr	r2, [r3, #0]
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	f003 0310 	and.w	r3, r3, #16
 800d670:	2101      	movs	r1, #1
 800d672:	fa01 f303 	lsl.w	r3, r1, r3
 800d676:	431a      	orrs	r2, r3
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	601a      	str	r2, [r3, #0]
}
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <LL_DAC_IsEnabled>:
{
 800d688:	b480      	push	{r7}
 800d68a:	b083      	sub	sp, #12
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
 800d690:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(DACx->CR,
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681a      	ldr	r2, [r3, #0]
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	f003 0310 	and.w	r3, r3, #16
 800d69c:	2101      	movs	r1, #1
 800d69e:	fa01 f303 	lsl.w	r3, r1, r3
 800d6a2:	401a      	ands	r2, r3
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	f003 0310 	and.w	r3, r3, #16
 800d6aa:	2101      	movs	r1, #1
 800d6ac:	fa01 f303 	lsl.w	r3, r1, r3
 800d6b0:	429a      	cmp	r2, r3
 800d6b2:	d101      	bne.n	800d6b8 <LL_DAC_IsEnabled+0x30>
 800d6b4:	2301      	movs	r3, #1
 800d6b6:	e000      	b.n	800d6ba <LL_DAC_IsEnabled+0x32>
 800d6b8:	2300      	movs	r3, #0
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	370c      	adds	r7, #12
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr

0800d6c6 <LL_DAC_TrigSWConversion>:
{
 800d6c6:	b480      	push	{r7}
 800d6c8:	b083      	sub	sp, #12
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	6078      	str	r0, [r7, #4]
 800d6ce:	6039      	str	r1, [r7, #0]
  SET_BIT(DACx->SWTRIGR,
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	685a      	ldr	r2, [r3, #4]
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	f003 0303 	and.w	r3, r3, #3
 800d6da:	431a      	orrs	r2, r3
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	605a      	str	r2, [r3, #4]
}
 800d6e0:	bf00      	nop
 800d6e2:	370c      	adds	r7, #12
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ea:	4770      	bx	lr

0800d6ec <LL_DAC_ConvertData12LeftAligned>:
{
 800d6ec:	b480      	push	{r7}
 800d6ee:	b087      	sub	sp, #28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS) & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	3308      	adds	r3, #8
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	0d1b      	lsrs	r3, r3, #20
 800d702:	009b      	lsls	r3, r3, #2
 800d704:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800d708:	4413      	add	r3, r2
 800d70a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800d70c:	697b      	ldr	r3, [r7, #20]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d714:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d718:	687a      	ldr	r2, [r7, #4]
 800d71a:	431a      	orrs	r2, r3
 800d71c:	697b      	ldr	r3, [r7, #20]
 800d71e:	601a      	str	r2, [r3, #0]
}
 800d720:	bf00      	nop
 800d722:	371c      	adds	r7, #28
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <LL_COMP_Enable>:
  * @rmtoll CSR      EN             LL_COMP_Enable
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	f043 0201 	orr.w	r2, r3, #1
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	601a      	str	r2, [r3, #0]
}
 800d740:	bf00      	nop
 800d742:	370c      	adds	r7, #12
 800d744:	46bd      	mov	sp, r7
 800d746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74a:	4770      	bx	lr

0800d74c <LL_COMP_Lock>:
  * @rmtoll CSR      LOCK           LL_COMP_Lock
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b083      	sub	sp, #12
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	601a      	str	r2, [r3, #0]
}
 800d760:	bf00      	nop
 800d762:	370c      	adds	r7, #12
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr

0800d76c <LL_OPAMP_Enable>:
  * @rmtoll CSR      OPAMPXEN       LL_OPAMP_Enable
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b083      	sub	sp, #12
 800d770:	af00      	add	r7, sp, #0
 800d772:	6078      	str	r0, [r7, #4]
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	f043 0201 	orr.w	r2, r3, #1
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	601a      	str	r2, [r3, #0]
}
 800d780:	bf00      	nop
 800d782:	370c      	adds	r7, #12
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <R3_2_Init>:
  *         in three shunt topology using STM32F30X and shared ADC
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_2_Init( PWMC_R3_2_Handle_t * pHandle )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08e      	sub	sp, #56	; 0x38
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d798:	68db      	ldr	r3, [r3, #12]
 800d79a:	637b      	str	r3, [r7, #52]	; 0x34
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7a0:	691b      	ldr	r3, [r3, #16]
 800d7a2:	633b      	str	r3, [r7, #48]	; 0x30
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7a8:	695b      	ldr	r3, [r3, #20]
 800d7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7b0:	699b      	ldr	r3, [r3, #24]
 800d7b2:	62bb      	str	r3, [r7, #40]	; 0x28
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7b8:	69db      	ldr	r3, [r3, #28]
 800d7ba:	627b      	str	r3, [r7, #36]	; 0x24
  DAC_TypeDef * DAC_OCPAx = pHandle->pParams_str->DAC_OCP_ASelection;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c2:	623b      	str	r3, [r7, #32]
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7ca:	61fb      	str	r3, [r7, #28]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7d2:	61bb      	str	r3, [r7, #24]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7da:	617b      	str	r3, [r7, #20]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7f0:	685b      	ldr	r3, [r3, #4]
 800d7f2:	60bb      	str	r3, [r7, #8]

  /*Check that _Super is the first member of the structure PWMC_R3_2_Handle_t */
  if ( ( uint32_t )pHandle == ( uint32_t )&pHandle->_Super )
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	461a      	mov	r2, r3
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	429a      	cmp	r2, r3
 800d7fc:	f040 80c8 	bne.w	800d990 <R3_2_Init+0x204>
  {
    /* disable IT and flags in case of LL driver usage
     * workaround for unwanted interrupt enabling done by LL driver */
    LL_ADC_DisableIT_EOC( ADCx_1 );
 800d800:	68f8      	ldr	r0, [r7, #12]
 800d802:	f7ff fc89 	bl	800d118 <LL_ADC_DisableIT_EOC>
    LL_ADC_ClearFlag_EOC( ADCx_1 );
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	f7ff fc4f 	bl	800d0aa <LL_ADC_ClearFlag_EOC>
    LL_ADC_DisableIT_JEOC( ADCx_1 );
 800d80c:	68f8      	ldr	r0, [r7, #12]
 800d80e:	f7ff fc93 	bl	800d138 <LL_ADC_DisableIT_JEOC>
    LL_ADC_ClearFlag_JEOC( ADCx_1 );
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f7ff fc56 	bl	800d0c4 <LL_ADC_ClearFlag_JEOC>
    LL_ADC_DisableIT_EOC( ADCx_2 );
 800d818:	68b8      	ldr	r0, [r7, #8]
 800d81a:	f7ff fc7d 	bl	800d118 <LL_ADC_DisableIT_EOC>
    LL_ADC_ClearFlag_EOC( ADCx_2 );
 800d81e:	68b8      	ldr	r0, [r7, #8]
 800d820:	f7ff fc43 	bl	800d0aa <LL_ADC_ClearFlag_EOC>
    LL_ADC_DisableIT_JEOC( ADCx_2 );
 800d824:	68b8      	ldr	r0, [r7, #8]
 800d826:	f7ff fc87 	bl	800d138 <LL_ADC_DisableIT_JEOC>
    LL_ADC_ClearFlag_JEOC( ADCx_2 );
 800d82a:	68b8      	ldr	r0, [r7, #8]
 800d82c:	f7ff fc4a 	bl	800d0c4 <LL_ADC_ClearFlag_JEOC>

    if ( TIMx == TIM1 )
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	4a59      	ldr	r2, [pc, #356]	; (800d998 <R3_2_Init+0x20c>)
 800d834:	4293      	cmp	r3, r2
 800d836:	d104      	bne.n	800d842 <R3_2_Init+0xb6>
    {
      /* TIM1 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM1_STOP );
 800d838:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800d83c:	f7ff fc8c 	bl	800d158 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
 800d840:	e003      	b.n	800d84a <R3_2_Init+0xbe>
    }
    else
    {
      /* TIM8 Counter Clock stopped when the core is halted */
      LL_DBGMCU_APB2_GRP1_FreezePeriph( LL_DBGMCU_APB2_GRP1_TIM8_STOP );
 800d842:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800d846:	f7ff fc87 	bl	800d158 <LL_DBGMCU_APB2_GRP1_FreezePeriph>
    }
    if ( OPAMPParams != NULL )
 800d84a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d01a      	beq.n	800d886 <R3_2_Init+0xfa>
    {
    /* Testing of all OPAMP one by one is required as 2 or 3 OPAMPS cfg may exist*/
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 800d850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2b00      	cmp	r3, #0
 800d856:	d004      	beq.n	800d862 <R3_2_Init+0xd6>
     {
      LL_OPAMP_Enable( OPAMPParams->OPAMPx_1 );
 800d858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4618      	mov	r0, r3
 800d85e:	f7ff ff85 	bl	800d76c <LL_OPAMP_Enable>
     }
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 800d862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d004      	beq.n	800d874 <R3_2_Init+0xe8>
     {
      LL_OPAMP_Enable( OPAMPParams->OPAMPx_2 );
 800d86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d86c:	685b      	ldr	r3, [r3, #4]
 800d86e:	4618      	mov	r0, r3
 800d870:	f7ff ff7c 	bl	800d76c <LL_OPAMP_Enable>
     }
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 800d874:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d876:	689b      	ldr	r3, [r3, #8]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d004      	beq.n	800d886 <R3_2_Init+0xfa>
     {
      LL_OPAMP_Enable( OPAMPParams->OPAMPx_3 );
 800d87c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d87e:	689b      	ldr	r3, [r3, #8]
 800d880:	4618      	mov	r0, r3
 800d882:	f7ff ff73 	bl	800d76c <LL_OPAMP_Enable>
     }     
    }

    /* Over current protection phase A */
    if ( COMP_OCPAx != NULL )
 800d886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d016      	beq.n	800d8ba <R3_2_Init+0x12e>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d890:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800d894:	2b01      	cmp	r3, #1
 800d896:	d00a      	beq.n	800d8ae <R3_2_Init+0x122>
      {
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d89c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8a2:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800d8a6:	461a      	mov	r2, r3
 800d8a8:	6a39      	ldr	r1, [r7, #32]
 800d8aa:	f000 feb9 	bl	800e620 <R3_2_SetAOReferenceVoltage>
      }
      /* Output */
      LL_COMP_Enable ( COMP_OCPAx );
 800d8ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8b0:	f7ff ff3c 	bl	800d72c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPAx );
 800d8b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d8b6:	f7ff ff49 	bl	800d74c <LL_COMP_Lock>
    }

    /* Over current protection phase B */
    if ( COMP_OCPBx != NULL )
 800d8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d016      	beq.n	800d8ee <R3_2_Init+0x162>
    {
      if ( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE )
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8c4:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 800d8c8:	2b01      	cmp	r3, #1
 800d8ca:	d00a      	beq.n	800d8e2 <R3_2_Init+0x156>
      {
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8d0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8d6:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800d8da:	461a      	mov	r2, r3
 800d8dc:	69f9      	ldr	r1, [r7, #28]
 800d8de:	f000 fe9f 	bl	800e620 <R3_2_SetAOReferenceVoltage>
      }
      LL_COMP_Enable ( COMP_OCPBx );
 800d8e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8e4:	f7ff ff22 	bl	800d72c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPBx );
 800d8e8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8ea:	f7ff ff2f 	bl	800d74c <LL_COMP_Lock>
    }

    /* Over current protection phase C */
    if ( COMP_OCPCx != NULL )
 800d8ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d016      	beq.n	800d922 <R3_2_Init+0x196>
    {
      if ( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8f8:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	d00a      	beq.n	800d916 <R3_2_Init+0x18a>
      {
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d904:	6c58      	ldr	r0, [r3, #68]	; 0x44
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d90a:	f8b3 30b6 	ldrh.w	r3, [r3, #182]	; 0xb6
 800d90e:	461a      	mov	r2, r3
 800d910:	69b9      	ldr	r1, [r7, #24]
 800d912:	f000 fe85 	bl	800e620 <R3_2_SetAOReferenceVoltage>
      }
      LL_COMP_Enable ( COMP_OCPCx );
 800d916:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d918:	f7ff ff08 	bl	800d72c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OCPCx );
 800d91c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d91e:	f7ff ff15 	bl	800d74c <LL_COMP_Lock>
    }

    /* Over voltage protection */
    if ( COMP_OVPx != NULL )
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	2b00      	cmp	r3, #0
 800d926:	d016      	beq.n	800d956 <R3_2_Init+0x1ca>
    {
      /* Inverting input*/
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d92c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800d930:	2b01      	cmp	r3, #1
 800d932:	d00a      	beq.n	800d94a <R3_2_Init+0x1be>
      {
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d938:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d93e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 800d942:	461a      	mov	r2, r3
 800d944:	6979      	ldr	r1, [r7, #20]
 800d946:	f000 fe6b 	bl	800e620 <R3_2_SetAOReferenceVoltage>
      }
      /* Output */
      LL_COMP_Enable ( COMP_OVPx );
 800d94a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d94c:	f7ff feee 	bl	800d72c <LL_COMP_Enable>
      LL_COMP_Lock( COMP_OVPx );
 800d950:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d952:	f7ff fefb 	bl	800d74c <LL_COMP_Lock>
    }
    
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f7ff fb2c 	bl	800cfb4 <LL_ADC_IsEnabled>
 800d95c:	4603      	mov	r3, r0
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d108      	bne.n	800d974 <R3_2_Init+0x1e8>
    {
      R3_2_ADCxInit (ADCx_1);
 800d962:	68f8      	ldr	r0, [r7, #12]
 800d964:	f000 f81a 	bl	800d99c <R3_2_ADCxInit>
      /* Only the Interrupt of the first ADC is enabled. 
       * As Both ADCs are fired by HW at the same moment 
       * It is safe to consider that both conversion are ready at the same time*/
      LL_ADC_ClearFlag_JEOS( ADCx_1 );
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f7ff fbb8 	bl	800d0de <LL_ADC_ClearFlag_JEOS>
      LL_ADC_EnableIT_JEOS( ADCx_1 );
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f7ff fbc2 	bl	800d0f8 <LL_ADC_EnableIT_JEOS>
    }
    else 
    {
      /* Nothing to do ADCx_1 already configured */
    }
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 800d974:	68b8      	ldr	r0, [r7, #8]
 800d976:	f7ff fb1d 	bl	800cfb4 <LL_ADC_IsEnabled>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d102      	bne.n	800d986 <R3_2_Init+0x1fa>
    {
      R3_2_ADCxInit (ADCx_2);
 800d980:	68b8      	ldr	r0, [r7, #8]
 800d982:	f000 f80b 	bl	800d99c <R3_2_ADCxInit>
    }    
    else 
    {
      /* Nothing to do ADCx_2 already configured */
    }
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	4619      	mov	r1, r3
 800d98a:	6938      	ldr	r0, [r7, #16]
 800d98c:	f000 f84e 	bl	800da2c <R3_2_TIMxInit>
  }
}
 800d990:	bf00      	nop
 800d992:	3738      	adds	r7, #56	; 0x38
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	40012c00 	.word	0x40012c00

0800d99c <R3_2_ADCxInit>:

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	b084      	sub	sp, #16
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	6078      	str	r0, [r7, #4]
  /* - Exit from deep-power-down mode */     
  LL_ADC_DisableDeepPowerDown(ADCx);
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f7ff fab7 	bl	800cf18 <LL_ADC_DisableDeepPowerDown>
   
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f7ff fada 	bl	800cf64 <LL_ADC_IsInternalRegulatorEnabled>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d111      	bne.n	800d9da <R3_2_ADCxInit+0x3e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(ADCx);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f7ff fac0 	bl	800cf3c <LL_ADC_EnableInternalRegulator>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 800d9bc:	4b19      	ldr	r3, [pc, #100]	; (800da24 <R3_2_ADCxInit+0x88>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	099b      	lsrs	r3, r3, #6
 800d9c2:	4a19      	ldr	r2, [pc, #100]	; (800da28 <R3_2_ADCxInit+0x8c>)
 800d9c4:	fba2 2303 	umull	r2, r3, r2, r3
 800d9c8:	099b      	lsrs	r3, r3, #6
 800d9ca:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800d9cc:	e002      	b.n	800d9d4 <R3_2_ADCxInit+0x38>
    {
      wait_loop_index--;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0UL)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d1f9      	bne.n	800d9ce <R3_2_ADCxInit+0x32>
    }
  }
  
  LL_ADC_StartCalibration( ADCx, LL_ADC_SINGLE_ENDED );
 800d9da:	217f      	movs	r1, #127	; 0x7f
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff fafc 	bl	800cfda <LL_ADC_StartCalibration>
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 800d9e2:	bf00      	nop
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f7ff fb11 	bl	800d00c <LL_ADC_IsCalibrationOnGoing>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	2b01      	cmp	r3, #1
 800d9ee:	d0f9      	beq.n	800d9e4 <R3_2_ADCxInit+0x48>
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800d9f0:	e002      	b.n	800d9f8 <R3_2_ADCxInit+0x5c>
  { 
    LL_ADC_Enable(  ADCx );
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f7ff faca 	bl	800cf8c <LL_ADC_Enable>
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800d9f8:	6878      	ldr	r0, [r7, #4]
 800d9fa:	f7ff fb43 	bl	800d084 <LL_ADC_IsActiveFlag_ADRDY>
 800d9fe:	4603      	mov	r3, r0
 800da00:	2b00      	cmp	r3, #0
 800da02:	d0f6      	beq.n	800d9f2 <R3_2_ADCxInit+0x56>
  }
  /* Clear JSQR from CubeMX setting to avoid not wanting conversion*/
  LL_ADC_INJ_StartConversion( ADCx ); 
 800da04:	6878      	ldr	r0, [r7, #4]
 800da06:	f7ff fb15 	bl	800d034 <LL_ADC_INJ_StartConversion>
  LL_ADC_INJ_StopConversion(ADCx);
 800da0a:	6878      	ldr	r0, [r7, #4]
 800da0c:	f7ff fb26 	bl	800d05c <LL_ADC_INJ_StopConversion>
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );
 800da10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f7ff fa6a 	bl	800ceee <LL_ADC_INJ_SetQueueMode>
 }
 800da1a:	bf00      	nop
 800da1c:	3710      	adds	r7, #16
 800da1e:	46bd      	mov	sp, r7
 800da20:	bd80      	pop	{r7, pc}
 800da22:	bf00      	nop
 800da24:	200005e0 	.word	0x200005e0
 800da28:	053e2d63 	.word	0x053e2d63

0800da2c <R3_2_TIMxInit>:
  * @param TIMx: Timer to be initialized
  * @param pHandle: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_2_TIMxInit( TIM_TypeDef * TIMx, PWMC_Handle_t * pHdl )
{
 800da2c:	b580      	push	{r7, lr}
 800da2e:	b084      	sub	sp, #16
 800da30:	af00      	add	r7, sp, #0
 800da32:	6078      	str	r0, [r7, #4]
 800da34:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint32_t Brk2Timeout = 1000;
 800da3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800da3e:	60fb      	str	r3, [r7, #12]

  /* disable main TIM counter to ensure
   * a synchronous start by TIM2 trigger */
  LL_TIM_DisableCounter( TIMx );
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f7ff fb9b 	bl	800d17c <LL_TIM_DisableCounter>
  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800da46:	2100      	movs	r1, #0
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	f7ff fd25 	bl	800d498 <LL_TIM_SetTriggerOutput>

  /* Enables the TIMx Preload on CC1 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH1 );
 800da4e:	2101      	movs	r1, #1
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff fc41 	bl	800d2d8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC2 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH2 );
 800da56:	2110      	movs	r1, #16
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff fc3d 	bl	800d2d8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC3 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH3 );
 800da5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7ff fc38 	bl	800d2d8 <LL_TIM_OC_EnablePreload>
  /* Enables the TIMx Preload on CC4 Register */
  LL_TIM_OC_EnablePreload( TIMx, LL_TIM_CHANNEL_CH4 );
 800da68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f7ff fc33 	bl	800d2d8 <LL_TIM_OC_EnablePreload>
  /* Prepare timer for synchronization */
  LL_TIM_GenerateEvent_UPDATE( TIMx );
 800da72:	6878      	ldr	r0, [r7, #4]
 800da74:	f7ff fdc6 	bl	800d604 <LL_TIM_GenerateEvent_UPDATE>
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da7c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800da80:	2b02      	cmp	r3, #2
 800da82:	d11f      	bne.n	800dac4 <R3_2_TIMxInit+0x98>
  {
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da88:	f893 30c2 	ldrb.w	r3, [r3, #194]	; 0xc2
 800da8c:	2b01      	cmp	r3, #1
 800da8e:	d110      	bne.n	800dab2 <R3_2_TIMxInit+0x86>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da94:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 800da98:	2b03      	cmp	r3, #3
 800da9a:	d10a      	bne.n	800dab2 <R3_2_TIMxInit+0x86>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800da9c:	2101      	movs	r1, #1
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f7ff fb8a 	bl	800d1b8 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff fdad 	bl	800d604 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800daaa:	2103      	movs	r1, #3
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff fb83 	bl	800d1b8 <LL_TIM_SetRepetitionCounter>
      }
    }
    LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dab8:	3b01      	subs	r3, #1
 800daba:	4619      	mov	r1, r3
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f7ff fb6d 	bl	800d19c <LL_TIM_SetCounter>
 800dac2:	e024      	b.n	800db0e <R3_2_TIMxInit+0xe2>
  }
  else /* bFreqRatio equal to 1 or 3 */
  {
    if ( pHandle->_Super.Motor == M1 )
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d11f      	bne.n	800db0e <R3_2_TIMxInit+0xe2>
    {
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dad2:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d108      	bne.n	800daec <R3_2_TIMxInit+0xc0>
      {
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dae0:	3b01      	subs	r3, #1
 800dae2:	4619      	mov	r1, r3
 800dae4:	6878      	ldr	r0, [r7, #4]
 800dae6:	f7ff fb59 	bl	800d19c <LL_TIM_SetCounter>
 800daea:	e010      	b.n	800db0e <R3_2_TIMxInit+0xe2>
      }
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daf0:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 800daf4:	2b03      	cmp	r3, #3
 800daf6:	d10a      	bne.n	800db0e <R3_2_TIMxInit+0xe2>
      {
        /* Set TIMx repetition counter to 1 */
        LL_TIM_SetRepetitionCounter( TIMx, 1 );
 800daf8:	2101      	movs	r1, #1
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f7ff fb5c 	bl	800d1b8 <LL_TIM_SetRepetitionCounter>
        LL_TIM_GenerateEvent_UPDATE( TIMx );
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f7ff fd7f 	bl	800d604 <LL_TIM_GenerateEvent_UPDATE>
        /* Repetition counter will be set to 3 at next Update */
        LL_TIM_SetRepetitionCounter( TIMx, 3 );
 800db06:	2103      	movs	r1, #3
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f7ff fb55 	bl	800d1b8 <LL_TIM_SetRepetitionCounter>
    }
    else
    {
    }
  }
  LL_TIM_ClearFlag_BRK( TIMx );
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f7ff fd18 	bl	800d544 <LL_TIM_ClearFlag_BRK>
  
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db18:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d00f      	beq.n	800db40 <R3_2_TIMxInit+0x114>
  {
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800db20:	e005      	b.n	800db2e <R3_2_TIMxInit+0x102>
    {
      LL_TIM_ClearFlag_BRK2( TIMx );
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7ff fd1c 	bl	800d560 <LL_TIM_ClearFlag_BRK2>
      Brk2Timeout--;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	3b01      	subs	r3, #1
 800db2c:	60fb      	str	r3, [r7, #12]
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	f7ff fd24 	bl	800d57c <LL_TIM_IsActiveFlag_BRK2>
 800db34:	4603      	mov	r3, r0
 800db36:	2b01      	cmp	r3, #1
 800db38:	d102      	bne.n	800db40 <R3_2_TIMxInit+0x114>
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d1f0      	bne.n	800db22 <R3_2_TIMxInit+0xf6>
    }   
  }
  LL_TIM_EnableIT_BRK( TIMx );
 800db40:	6878      	ldr	r0, [r7, #4]
 800db42:	f7ff fd4f 	bl	800d5e4 <LL_TIM_EnableIT_BRK>
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}
	...

0800db50 <R3_2_CurrentReadingPolarization>:
  *         motor
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_2_CurrentReadingPolarization( PWMC_Handle_t * pHdl )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b086      	sub	sp, #24
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	60bb      	str	r3, [r7, #8]

  pHandle->PhaseAOffset = 0u;
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	2200      	movs	r2, #0
 800db78:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset = 0u;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	2200      	movs	r2, #0
 800db7e:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset = 0u;
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	2200      	movs	r2, #0
 800db84:	665a      	str	r2, [r3, #100]	; 0x64

  pHandle->PolarizationCounter = 0u;
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	2200      	movs	r2, #0
 800db8a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

  /* It forces inactive level on TIMx CHy and CHyN */
  LL_TIM_CC_DisableChannel(TIMx, TIMxCCER_MASK_CH123);
 800db8e:	f240 5155 	movw	r1, #1365	; 0x555
 800db92:	6938      	ldr	r0, [r7, #16]
 800db94:	f7ff fb2f 	bl	800d1f6 <LL_TIM_CC_DisableChannel>

  /* Offset calibration for all phases */
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800db98:	697b      	ldr	r3, [r7, #20]
 800db9a:	4a55      	ldr	r2, [pc, #340]	; (800dcf0 <R3_2_CurrentReadingPolarization+0x1a0>)
 800db9c:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800db9e:	697b      	ldr	r3, [r7, #20]
 800dba0:	4a54      	ldr	r2, [pc, #336]	; (800dcf4 <R3_2_CurrentReadingPolarization+0x1a4>)
 800dba2:	619a      	str	r2, [r3, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800dba4:	697b      	ldr	r3, [r7, #20]
 800dba6:	2280      	movs	r2, #128	; 0x80
 800dba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
     
  /* We want to polarize calibration Phase A and Phase B, so we select SECTOR_5 */
  pHandle->PolarizationSector=SECTOR_5;
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	2204      	movs	r2, #4
 800dbb0:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  /* Required to force first polarization conversion on SECTOR_5*/
  pHandle->_Super.Sector = SECTOR_5;   
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	2204      	movs	r2, #4
 800dbb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 fb37 	bl	800e232 <R3_2_SwitchOnPWM>
  
  /* IF CH4 is enabled, it means that JSQR is now configured to sample polarization current*/
  //while ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 0u )
  //{
  //}
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 800dbc4:	bf00      	nop
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	685a      	ldr	r2, [r3, #4]
 800dbca:	4b4b      	ldr	r3, [pc, #300]	; (800dcf8 <R3_2_CurrentReadingPolarization+0x1a8>)
 800dbcc:	4013      	ands	r3, r2
 800dbce:	2b70      	cmp	r3, #112	; 0x70
 800dbd0:	d1f9      	bne.n	800dbc6 <R3_2_CurrentReadingPolarization+0x76>
  {
  }
  /* It is the right time to start the ADC without unwanted conversion */
  /* Start ADC to wait for external trigger. This is series dependant*/
  LL_ADC_INJ_StartConversion( ADCx_1 );
 800dbd2:	68f8      	ldr	r0, [r7, #12]
 800dbd4:	f7ff fa2e 	bl	800d034 <LL_ADC_INJ_StartConversion>
  LL_ADC_INJ_StartConversion( ADCx_2 );
 800dbd8:	68b8      	ldr	r0, [r7, #8]
 800dbda:	f7ff fa2b 	bl	800d034 <LL_ADC_INJ_StartConversion>
  
  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800dbe8:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	336c      	adds	r3, #108	; 0x6c
 800dbf0:	6938      	ldr	r0, [r7, #16]
 800dbf2:	f7fe fec9 	bl	800c988 <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );

  R3_2_SwitchOffPWM( &pHandle->_Super );
 800dbf6:	697b      	ldr	r3, [r7, #20]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f000 fbbb 	bl	800e374 <R3_2_SwitchOffPWM>
  
  /* Offset calibration for C phase */
  pHandle->PolarizationCounter = 0u;
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  
  /* Change function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	4a3c      	ldr	r2, [pc, #240]	; (800dcfc <R3_2_CurrentReadingPolarization+0x1ac>)
 800dc0a:	605a      	str	r2, [r3, #4]
  /* We want to polarize Phase C, so we select SECTOR_1 */
  pHandle->PolarizationSector=SECTOR_1;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2200      	movs	r2, #0
 800dc10:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  /* Required to force first polarization conversion on SECTOR_1*/
  pHandle->_Super.Sector = SECTOR_1;   
 800dc14:	697b      	ldr	r3, [r7, #20]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	4618      	mov	r0, r3
 800dc20:	f000 fb07 	bl	800e232 <R3_2_SwitchOnPWM>

  /* Wait for NB_CONVERSIONS to be executed */
  waitForPolarizationEnd( TIMx,
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	f103 0138 	add.w	r1, r3, #56	; 0x38
  		                  &pHandle->_Super.SWerror,
  						  pHandle->pParams_str->RepetitionCounter,
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
  waitForPolarizationEnd( TIMx,
 800dc2e:	f893 20bb 	ldrb.w	r2, [r3, #187]	; 0xbb
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	336c      	adds	r3, #108	; 0x6c
 800dc36:	6938      	ldr	r0, [r7, #16]
 800dc38:	f7fe fea6 	bl	800c988 <waitForPolarizationEnd>
  						  &pHandle->PolarizationCounter );
  
  R3_2_SwitchOffPWM( &pHandle->_Super );
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 fb98 	bl	800e374 <R3_2_SwitchOffPWM>
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800dc44:	697b      	ldr	r3, [r7, #20]
 800dc46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc48:	091a      	lsrs	r2, r3, #4
 800dc4a:	697b      	ldr	r3, [r7, #20]
 800dc4c:	65da      	str	r2, [r3, #92]	; 0x5c
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dc52:	091a      	lsrs	r2, r3, #4
 800dc54:	697b      	ldr	r3, [r7, #20]
 800dc56:	661a      	str	r2, [r3, #96]	; 0x60
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800dc58:	697b      	ldr	r3, [r7, #20]
 800dc5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dc5c:	091a      	lsrs	r2, r3, #4
 800dc5e:	697b      	ldr	r3, [r7, #20]
 800dc60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Change back function to be executed in ADCx_ISR */
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800dc62:	697b      	ldr	r3, [r7, #20]
 800dc64:	4a26      	ldr	r2, [pc, #152]	; (800dd00 <R3_2_CurrentReadingPolarization+0x1b0>)
 800dc66:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	4a26      	ldr	r2, [pc, #152]	; (800dd04 <R3_2_CurrentReadingPolarization+0x1b4>)
 800dc6c:	619a      	str	r2, [r3, #24]

  /* It over write TIMx CCRy wrongly written by FOC during calibration so as to
     force 50% duty cycle on the three inverer legs */
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800dc6e:	2101      	movs	r1, #1
 800dc70:	6938      	ldr	r0, [r7, #16]
 800dc72:	f7ff fb85 	bl	800d380 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800dc76:	2110      	movs	r1, #16
 800dc78:	6938      	ldr	r0, [r7, #16]
 800dc7a:	f7ff fb81 	bl	800d380 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_DisablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800dc7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dc82:	6938      	ldr	r0, [r7, #16]
 800dc84:	f7ff fb7c 	bl	800d380 <LL_TIM_OC_DisablePreload>
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 800dc88:	697b      	ldr	r3, [r7, #20]
 800dc8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc8e:	4619      	mov	r1, r3
 800dc90:	6938      	ldr	r0, [r7, #16]
 800dc92:	f7ff fbc9 	bl	800d428 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 (TIMx, pHandle->Half_PWMPeriod);
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6938      	ldr	r0, [r7, #16]
 800dca0:	f7ff fbd0 	bl	800d444 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 (TIMx, pHandle->Half_PWMPeriod);
 800dca4:	697b      	ldr	r3, [r7, #20]
 800dca6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dcaa:	4619      	mov	r1, r3
 800dcac:	6938      	ldr	r0, [r7, #16]
 800dcae:	f7ff fbd7 	bl	800d460 <LL_TIM_OC_SetCompareCH3>
  /* Enable TIMx preload */
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH1);
 800dcb2:	2101      	movs	r1, #1
 800dcb4:	6938      	ldr	r0, [r7, #16]
 800dcb6:	f7ff fb0f 	bl	800d2d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH2);  
 800dcba:	2110      	movs	r1, #16
 800dcbc:	6938      	ldr	r0, [r7, #16]
 800dcbe:	f7ff fb0b 	bl	800d2d8 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_EnablePreload(TIMx,  LL_TIM_CHANNEL_CH3);
 800dcc2:	f44f 7180 	mov.w	r1, #256	; 0x100
 800dcc6:	6938      	ldr	r0, [r7, #16]
 800dcc8:	f7ff fb06 	bl	800d2d8 <LL_TIM_OC_EnablePreload>

  /* It re-enable drive of TIMx CHy and CHyN by TIMx CHyRef*/
  LL_TIM_CC_EnableChannel(TIMx, TIMxCCER_MASK_CH123);
 800dccc:	f240 5155 	movw	r1, #1365	; 0x555
 800dcd0:	6938      	ldr	r0, [r7, #16]
 800dcd2:	f7ff fa7f 	bl	800d1d4 <LL_TIM_CC_EnableChannel>
  
  /* At the end of calibration, all phases are at 50% we will sample A&B */
  pHandle->_Super.Sector=SECTOR_5;
 800dcd6:	697b      	ldr	r3, [r7, #20]
 800dcd8:	2204      	movs	r2, #4
 800dcda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  pHandle->BrakeActionLock = false;
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2200      	movs	r2, #0
 800dce2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

}
 800dce6:	bf00      	nop
 800dce8:	3718      	adds	r7, #24
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}
 800dcee:	bf00      	nop
 800dcf0:	0800e089 	.word	0x0800e089
 800dcf4:	0800df29 	.word	0x0800df29
 800dcf8:	02000070 	.word	0x02000070
 800dcfc:	0800e119 	.word	0x0800e119
 800dd00:	0800dd09 	.word	0x0800dd09
 800dd04:	0800df5f 	.word	0x0800df5f

0800dd08 <R3_2_GetPhaseCurrents>:
  * @brief  It computes and return latest converted motor phase currents motor
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in Curr_Components format
  */ 
__weak void R3_2_GetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800dd08:	b580      	push	{r7, lr}
 800dd0a:	b088      	sub	sp, #32
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	61fb      	str	r3, [r7, #28]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd1a:	689b      	ldr	r3, [r3, #8]
 800dd1c:	61bb      	str	r3, [r7, #24]
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800dd1e:	69fb      	ldr	r3, [r7, #28]
 800dd20:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dd24:	75fb      	strb	r3, [r7, #23]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800dd2a:	7dfb      	ldrb	r3, [r7, #23]
 800dd2c:	3312      	adds	r3, #18
 800dd2e:	009b      	lsls	r3, r3, #2
 800dd30:	4413      	add	r3, r2
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	613b      	str	r3, [r7, #16]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800dd3c:	7dfb      	ldrb	r3, [r7, #23]
 800dd3e:	3318      	adds	r3, #24
 800dd40:	009b      	lsls	r3, r3, #2
 800dd42:	4413      	add	r3, r2
 800dd44:	685b      	ldr	r3, [r3, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	60fb      	str	r3, [r7, #12]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	69b8      	ldr	r0, [r7, #24]
 800dd4e:	f7ff fba3 	bl	800d498 <LL_TIM_SetTriggerOutput>
  
  switch ( Sector )
 800dd52:	7dfb      	ldrb	r3, [r7, #23]
 800dd54:	2b05      	cmp	r3, #5
 800dd56:	f200 80c6 	bhi.w	800dee6 <R3_2_GetPhaseCurrents+0x1de>
 800dd5a:	a201      	add	r2, pc, #4	; (adr r2, 800dd60 <R3_2_GetPhaseCurrents+0x58>)
 800dd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd60:	0800ddeb 	.word	0x0800ddeb
 800dd64:	0800de69 	.word	0x0800de69
 800dd68:	0800de69 	.word	0x0800de69
 800dd6c:	0800dd79 	.word	0x0800dd79
 800dd70:	0800dd79 	.word	0x0800dd79
 800dd74:	0800ddeb 	.word	0x0800ddeb
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	1ad3      	subs	r3, r2, r3
 800dd82:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800dd84:	68bb      	ldr	r3, [r7, #8]
 800dd86:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800dd8a:	dc04      	bgt.n	800dd96 <R3_2_GetPhaseCurrents+0x8e>
      {
        Iab->a = -INT16_MAX;
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	f248 0201 	movw	r2, #32769	; 0x8001
 800dd92:	801a      	strh	r2, [r3, #0]
 800dd94:	e00c      	b.n	800ddb0 <R3_2_GetPhaseCurrents+0xa8>
      }
      else  if ( Aux > INT16_MAX )
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd9c:	db04      	blt.n	800dda8 <R3_2_GetPhaseCurrents+0xa0>
      {
        Iab->a = INT16_MAX;
 800dd9e:	683b      	ldr	r3, [r7, #0]
 800dda0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dda4:	801a      	strh	r2, [r3, #0]
 800dda6:	e003      	b.n	800ddb0 <R3_2_GetPhaseCurrents+0xa8>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800dda8:	68bb      	ldr	r3, [r7, #8]
 800ddaa:	b21a      	sxth	r2, r3
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 800ddb0:	69fb      	ldr	r3, [r7, #28]
 800ddb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	1ad3      	subs	r3, r2, r3
 800ddba:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ddc2:	dc04      	bgt.n	800ddce <R3_2_GetPhaseCurrents+0xc6>
      {
        Iab->b = -INT16_MAX;
 800ddc4:	683b      	ldr	r3, [r7, #0]
 800ddc6:	f248 0201 	movw	r2, #32769	; 0x8001
 800ddca:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800ddcc:	e08c      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>
      else  if ( Aux > INT16_MAX )
 800ddce:	68bb      	ldr	r3, [r7, #8]
 800ddd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddd4:	db04      	blt.n	800dde0 <R3_2_GetPhaseCurrents+0xd8>
        Iab->b = INT16_MAX;
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dddc:	805a      	strh	r2, [r3, #2]
      break;
 800ddde:	e083      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800dde0:	68bb      	ldr	r3, [r7, #8]
 800dde2:	b21a      	sxth	r2, r3
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	805a      	strh	r2, [r3, #2]
      break;
 800dde8:	e07e      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>

    case SECTOR_6:
    case SECTOR_1:
      /* Current on Phase A is not accessible     */
      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800ddea:	69fb      	ldr	r3, [r7, #28]
 800ddec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ddee:	461a      	mov	r2, r3
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	1ad3      	subs	r3, r2, r3
 800ddf4:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ddfc:	dc04      	bgt.n	800de08 <R3_2_GetPhaseCurrents+0x100>
      {
        Iab->b = -INT16_MAX;
 800ddfe:	683b      	ldr	r3, [r7, #0]
 800de00:	f248 0201 	movw	r2, #32769	; 0x8001
 800de04:	805a      	strh	r2, [r3, #2]
 800de06:	e00c      	b.n	800de22 <R3_2_GetPhaseCurrents+0x11a>
      }
      else  if ( Aux > INT16_MAX )
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de0e:	db04      	blt.n	800de1a <R3_2_GetPhaseCurrents+0x112>
      {
        Iab->b = INT16_MAX;
 800de10:	683b      	ldr	r3, [r7, #0]
 800de12:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800de16:	805a      	strh	r2, [r3, #2]
 800de18:	e003      	b.n	800de22 <R3_2_GetPhaseCurrents+0x11a>
      }
      else
      {
        Iab->b = ( int16_t )Aux;
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	b21a      	sxth	r2, r3
 800de1e:	683b      	ldr	r3, [r7, #0]
 800de20:	805a      	strh	r2, [r3, #2]
      }

      /* Ia = -Ic -Ib */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	69fa      	ldr	r2, [r7, #28]
 800de26:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800de28:	1a9b      	subs	r3, r3, r2
 800de2a:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800de32:	461a      	mov	r2, r3
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	1a9b      	subs	r3, r3, r2
 800de38:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux > INT16_MAX )
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de40:	db04      	blt.n	800de4c <R3_2_GetPhaseCurrents+0x144>
      {
        Iab->a = INT16_MAX;
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800de48:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        Iab->a = ( int16_t )Aux;
      }
      break;
 800de4a:	e04d      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800de52:	dc04      	bgt.n	800de5e <R3_2_GetPhaseCurrents+0x156>
        Iab->a = -INT16_MAX;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	f248 0201 	movw	r2, #32769	; 0x8001
 800de5a:	801a      	strh	r2, [r3, #0]
      break;
 800de5c:	e044      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>
        Iab->a = ( int16_t )Aux;
 800de5e:	68bb      	ldr	r3, [r7, #8]
 800de60:	b21a      	sxth	r2, r3
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	801a      	strh	r2, [r3, #0]
      break;
 800de66:	e03f      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>

    case SECTOR_2:
    case SECTOR_3:
      /* Current on Phase B is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 800de68:	69fb      	ldr	r3, [r7, #28]
 800de6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de6c:	461a      	mov	r2, r3
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	1ad3      	subs	r3, r2, r3
 800de72:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800de7a:	dc04      	bgt.n	800de86 <R3_2_GetPhaseCurrents+0x17e>
      {
        Iab->a = -INT16_MAX;
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	f248 0201 	movw	r2, #32769	; 0x8001
 800de82:	801a      	strh	r2, [r3, #0]
 800de84:	e00c      	b.n	800dea0 <R3_2_GetPhaseCurrents+0x198>
      }
      else  if ( Aux > INT16_MAX )
 800de86:	68bb      	ldr	r3, [r7, #8]
 800de88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de8c:	db04      	blt.n	800de98 <R3_2_GetPhaseCurrents+0x190>
      {
        Iab->a = INT16_MAX;
 800de8e:	683b      	ldr	r3, [r7, #0]
 800de90:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800de94:	801a      	strh	r2, [r3, #0]
 800de96:	e003      	b.n	800dea0 <R3_2_GetPhaseCurrents+0x198>
      }
      else
      {
        Iab->a = ( int16_t )Aux;
 800de98:	68bb      	ldr	r3, [r7, #8]
 800de9a:	b21a      	sxth	r2, r3
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	801a      	strh	r2, [r3, #0]
      }

      /* Ib = -Ic -Ia */
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	69fa      	ldr	r2, [r7, #28]
 800dea4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800dea6:	1a9b      	subs	r3, r3, r2
 800dea8:	60bb      	str	r3, [r7, #8]
      Aux -= ( int32_t )Iab->a;             /* Ib */
 800deaa:	683b      	ldr	r3, [r7, #0]
 800deac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800deb0:	461a      	mov	r2, r3
 800deb2:	68bb      	ldr	r3, [r7, #8]
 800deb4:	1a9b      	subs	r3, r3, r2
 800deb6:	60bb      	str	r3, [r7, #8]

      /* Saturation of Ib */
      if ( Aux > INT16_MAX )
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800debe:	db04      	blt.n	800deca <R3_2_GetPhaseCurrents+0x1c2>
      {
        Iab->b = INT16_MAX;
 800dec0:	683b      	ldr	r3, [r7, #0]
 800dec2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800dec6:	805a      	strh	r2, [r3, #2]
      }
      else
      {
        Iab->b = ( int16_t )Aux;
      }
      break;
 800dec8:	e00e      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>
      else  if ( Aux < -INT16_MAX )
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800ded0:	dc04      	bgt.n	800dedc <R3_2_GetPhaseCurrents+0x1d4>
        Iab->b = -INT16_MAX;
 800ded2:	683b      	ldr	r3, [r7, #0]
 800ded4:	f248 0201 	movw	r2, #32769	; 0x8001
 800ded8:	805a      	strh	r2, [r3, #2]
      break;
 800deda:	e005      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>
        Iab->b = ( int16_t )Aux;
 800dedc:	68bb      	ldr	r3, [r7, #8]
 800dede:	b21a      	sxth	r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	805a      	strh	r2, [r3, #2]
      break;
 800dee4:	e000      	b.n	800dee8 <R3_2_GetPhaseCurrents+0x1e0>

    default:
      break;
 800dee6:	bf00      	nop
  }

  pHandle->_Super.Ia = Iab->a;
 800dee8:	683b      	ldr	r3, [r7, #0]
 800deea:	f9b3 2000 	ldrsh.w	r2, [r3]
 800deee:	69fb      	ldr	r3, [r7, #28]
 800def0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  pHandle->_Super.Ib = Iab->b;
 800def4:	683b      	ldr	r3, [r7, #0]
 800def6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800defa:	69fb      	ldr	r3, [r7, #28]
 800defc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 800df00:	683b      	ldr	r3, [r7, #0]
 800df02:	f9b3 3000 	ldrsh.w	r3, [r3]
 800df06:	b29b      	uxth	r3, r3
 800df08:	425b      	negs	r3, r3
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800df12:	b29b      	uxth	r3, r3
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	b29b      	uxth	r3, r3
 800df18:	b21a      	sxth	r2, r3
 800df1a:	69fb      	ldr	r3, [r7, #28]
 800df1c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 800df20:	bf00      	nop
 800df22:	3720      	adds	r7, #32
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800df40:	68fa      	ldr	r2, [r7, #12]
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df48:	3b01      	subs	r3, #1
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	4619      	mov	r1, r3
 800df4e:	4610      	mov	r0, r2
 800df50:	f000 f864 	bl	800e01c <R3_2_WriteTIMRegisters>
 800df54:	4603      	mov	r3, r0
}
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}

0800df5e <R3_2_SetADCSampPointSectX>:
  *         And call the WriteTIMRegisters method.
  * @param  pHandle Pointer on the target component instance
  * @retval none
  */
uint16_t R3_2_SetADCSampPointSectX( PWMC_Handle_t * pHdl )
{
 800df5e:	b580      	push	{r7, lr}
 800df60:	b086      	sub	sp, #24
 800df62:	af00      	add	r7, sp, #0
 800df64:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	613b      	str	r3, [r7, #16]
#endif /* __ICCARM__ */
  uint16_t SamplingPoint;
  uint16_t DeltaDuty;

  /* Verify that sampling is possible in the middle of PWM by checking the smallest duty cycle */
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800df6a:	693b      	ldr	r3, [r7, #16]
 800df6c:	f8b3 2068 	ldrh.w	r2, [r3, #104]	; 0x68
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	b29a      	uxth	r2, r3
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df7c:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800df80:	429a      	cmp	r2, r3
 800df82:	d909      	bls.n	800df98 <R3_2_SetADCSampPointSectX+0x3a>
     * (AB are chosen) for all sectors in order to not induce current discontinuities when there are differences
     * between offsets */

    /* sector number needed by GetPhaseCurrent, phase A and B are sampled which corresponds
     * to sector 4 or 5  */
    pHandle->_Super.Sector = SECTOR_5;
 800df84:	693b      	ldr	r3, [r7, #16]
 800df86:	2204      	movs	r2, #4
 800df88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* set sampling  point trigger in the middle of PWM period */
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800df8c:	693b      	ldr	r3, [r7, #16]
 800df8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800df92:	3b01      	subs	r3, #1
 800df94:	82fb      	strh	r3, [r7, #22]
 800df96:	e036      	b.n	800e006 <R3_2_SetADCSampPointSectX+0xa8>
    /* ADC Injected sequence configuration. The stator phase with minimum value of complementary
        duty cycle is set as first. In every sector there is always one phase with maximum complementary duty,
        one with minimum complementary duty and one with variable complementary duty. In this case, phases
        with variable complementary duty and with maximum duty are converted and the first will be always
        the phase with variable complementary duty cycle */
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	81fb      	strh	r3, [r7, #14]

    /* Definition of crossing point */
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800dfa4:	89fa      	ldrh	r2, [r7, #14]
 800dfa6:	693b      	ldr	r3, [r7, #16]
 800dfa8:	f8b3 1068 	ldrh.w	r1, [r3, #104]	; 0x68
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800dfb0:	1acb      	subs	r3, r1, r3
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	005b      	lsls	r3, r3, #1
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d908      	bls.n	800dfcc <R3_2_SetADCSampPointSectX+0x6e>
    {
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfc2:	f8b3 30b4 	ldrh.w	r3, [r3, #180]	; 0xb4
 800dfc6:	1ad3      	subs	r3, r2, r3
 800dfc8:	82fb      	strh	r3, [r7, #22]
 800dfca:	e01c      	b.n	800e006 <R3_2_SetADCSampPointSectX+0xa8>
    }
    else
    {
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 800dfd0:	693b      	ldr	r3, [r7, #16]
 800dfd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfd4:	f8b3 30b2 	ldrh.w	r3, [r3, #178]	; 0xb2
 800dfd8:	4413      	add	r3, r2
 800dfda:	82fb      	strh	r3, [r7, #22]

      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dfe2:	8afa      	ldrh	r2, [r7, #22]
 800dfe4:	429a      	cmp	r2, r3
 800dfe6:	d30e      	bcc.n	800e006 <R3_2_SetADCSampPointSectX+0xa8>
      {
         /* ADC trigger edge must be changed from positive to negative */
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dfee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800dff2:	693b      	ldr	r3, [r7, #16]
 800dff4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dff8:	005b      	lsls	r3, r3, #1
 800dffa:	b29a      	uxth	r2, r3
 800dffc:	8afb      	ldrh	r3, [r7, #22]
 800dffe:	1ad3      	subs	r3, r2, r3
 800e000:	b29b      	uxth	r3, r3
 800e002:	3b01      	subs	r3, #1
 800e004:	82fb      	strh	r3, [r7, #22]
      }
    }
  }
  return R3_2_WriteTIMRegisters( &pHandle->_Super, SamplingPoint );
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	8afa      	ldrh	r2, [r7, #22]
 800e00a:	4611      	mov	r1, r2
 800e00c:	4618      	mov	r0, r3
 800e00e:	f000 f805 	bl	800e01c <R3_2_WriteTIMRegisters>
 800e012:	4603      	mov	r3, r0
}
 800e014:	4618      	mov	r0, r3
 800e016:	3718      	adds	r7, #24
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}

0800e01c <R3_2_WriteTIMRegisters>:
  *         motor
  * @param  pHandle handler of the current instance of the PWM component
  * @retval none
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters( PWMC_Handle_t * pHdl, uint16_t SamplingPoint )
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b086      	sub	sp, #24
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	460b      	mov	r3, r1
 800e026:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	60fb      	str	r3, [r7, #12]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e038:	4619      	mov	r1, r3
 800e03a:	68f8      	ldr	r0, [r7, #12]
 800e03c:	f7ff f9f4 	bl	800d428 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800e044:	4619      	mov	r1, r3
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f7ff f9fc 	bl	800d444 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e050:	4619      	mov	r1, r3
 800e052:	68f8      	ldr	r0, [r7, #12]
 800e054:	f7ff fa04 	bl	800d460 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );
 800e058:	887b      	ldrh	r3, [r7, #2]
 800e05a:	4619      	mov	r1, r3
 800e05c:	68f8      	ldr	r0, [r7, #12]
 800e05e:	f7ff fa0d 	bl	800d47c <LL_TIM_OC_SetCompareCH4>

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	4b07      	ldr	r3, [pc, #28]	; (800e084 <R3_2_WriteTIMRegisters+0x68>)
 800e068:	4013      	ands	r3, r2
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d002      	beq.n	800e074 <R3_2_WriteTIMRegisters+0x58>
  {
    Aux = MC_FOC_DURATION;
 800e06e:	2301      	movs	r3, #1
 800e070:	82fb      	strh	r3, [r7, #22]
 800e072:	e001      	b.n	800e078 <R3_2_WriteTIMRegisters+0x5c>
  }
  else
  {
    Aux = MC_NO_ERROR;
 800e074:	2300      	movs	r3, #0
 800e076:	82fb      	strh	r3, [r7, #22]
  }
  return Aux;
 800e078:	8afb      	ldrh	r3, [r7, #22]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3718      	adds	r7, #24
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}
 800e082:	bf00      	nop
 800e084:	02000070 	.word	0x02000070

0800e088 <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800e088:	b580      	push	{r7, lr}
 800e08a:	b086      	sub	sp, #24
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
 800e090:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e0a2:	697b      	ldr	r3, [r7, #20]
 800e0a4:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800e0a8:	3312      	adds	r3, #18
 800e0aa:	009b      	lsls	r3, r3, #2
 800e0ac:	4413      	add	r3, r2
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	60fb      	str	r3, [r7, #12]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800e0b4:	697b      	ldr	r3, [r7, #20]
 800e0b6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e0b8:	697b      	ldr	r3, [r7, #20]
 800e0ba:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800e0be:	3318      	adds	r3, #24
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4413      	add	r3, r2
 800e0c4:	685b      	ldr	r3, [r3, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	60bb      	str	r3, [r7, #8]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800e0ca:	2100      	movs	r1, #0
 800e0cc:	6938      	ldr	r0, [r7, #16]
 800e0ce:	f7ff f9e3 	bl	800d498 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800e0d2:	697b      	ldr	r3, [r7, #20]
 800e0d4:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e0d8:	2b0f      	cmp	r3, #15
 800e0da:	d813      	bhi.n	800e104 <R3_2_HFCurrentsPolarizationAB+0x7c>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	441a      	add	r2, r3
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	65da      	str	r2, [r3, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 800e0e8:	697b      	ldr	r3, [r7, #20]
 800e0ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	441a      	add	r2, r3
 800e0f0:	697b      	ldr	r3, [r7, #20]
 800e0f2:	661a      	str	r2, [r3, #96]	; 0x60
    pHandle->PolarizationCounter++;
 800e0f4:	697b      	ldr	r3, [r7, #20]
 800e0f6:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	b2da      	uxtb	r2, r3
 800e0fe:	697b      	ldr	r3, [r7, #20]
 800e100:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800e104:	683b      	ldr	r3, [r7, #0]
 800e106:	2200      	movs	r2, #0
 800e108:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800e10a:	683b      	ldr	r3, [r7, #0]
 800e10c:	2200      	movs	r2, #0
 800e10e:	805a      	strh	r2, [r3, #2]
}
 800e110:	bf00      	nop
 800e112:	3718      	adds	r7, #24
 800e114:	46bd      	mov	sp, r7
 800e116:	bd80      	pop	{r7, pc}

0800e118 <R3_2_HFCurrentsPolarizationC>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationC( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b086      	sub	sp, #24
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
 800e120:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e126:	697b      	ldr	r3, [r7, #20]
 800e128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	613b      	str	r3, [r7, #16]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 800e138:	3318      	adds	r3, #24
 800e13a:	009b      	lsls	r3, r3, #2
 800e13c:	4413      	add	r3, r2
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	60fb      	str	r3, [r7, #12]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800e144:	2100      	movs	r1, #0
 800e146:	6938      	ldr	r0, [r7, #16]
 800e148:	f7ff f9a6 	bl	800d498 <LL_TIM_SetTriggerOutput>

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e152:	2b0f      	cmp	r3, #15
 800e154:	d80d      	bhi.n	800e172 <R3_2_HFCurrentsPolarizationC+0x5a>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	441a      	add	r2, r3
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	665a      	str	r2, [r3, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800e162:	697b      	ldr	r3, [r7, #20]
 800e164:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800e168:	3301      	adds	r3, #1
 800e16a:	b2da      	uxtb	r2, r3
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	2200      	movs	r2, #0
 800e176:	801a      	strh	r2, [r3, #0]
  Iab->b = 0;
 800e178:	683b      	ldr	r3, [r7, #0]
 800e17a:	2200      	movs	r2, #0
 800e17c:	805a      	strh	r2, [r3, #2]
}
 800e17e:	bf00      	nop
 800e180:	3718      	adds	r7, #24
 800e182:	46bd      	mov	sp, r7
 800e184:	bd80      	pop	{r7, pc}

0800e186 <R3_2_TurnOnLowSides>:
  *         called each motor start-up when using high voltage drivers
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_2_TurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800e186:	b580      	push	{r7, lr}
 800e188:	b084      	sub	sp, #16
 800e18a:	af00      	add	r7, sp, #0
 800e18c:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e196:	689b      	ldr	r3, [r3, #8]
 800e198:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = true;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	2201      	movs	r2, #1
 800e19e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( pHandle->pParams_str->TIMx );
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1a6:	689b      	ldr	r3, [r3, #8]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7ff f9aa 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>

  /*Turn on the three low side switches */
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800e1ae:	2100      	movs	r1, #0
 800e1b0:	68b8      	ldr	r0, [r7, #8]
 800e1b2:	f7ff f939 	bl	800d428 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
 800e1b6:	2100      	movs	r1, #0
 800e1b8:	68b8      	ldr	r0, [r7, #8]
 800e1ba:	f7ff f943 	bl	800d444 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );
 800e1be:	2100      	movs	r1, #0
 800e1c0:	68b8      	ldr	r0, [r7, #8]
 800e1c2:	f7ff f94d 	bl	800d460 <LL_TIM_OC_SetCompareCH3>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800e1c6:	bf00      	nop
 800e1c8:	68b8      	ldr	r0, [r7, #8]
 800e1ca:	f7ff f9a8 	bl	800d51e <LL_TIM_IsActiveFlag_UPDATE>
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d0f9      	beq.n	800e1c8 <R3_2_TurnOnLowSides+0x42>
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800e1d4:	68b8      	ldr	r0, [r7, #8]
 800e1d6:	f7ff f974 	bl	800d4c2 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1de:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d121      	bne.n	800e22a <R3_2_TurnOnLowSides+0xa4>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1ea:	6a1a      	ldr	r2, [r3, #32]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e1f0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	4610      	mov	r0, r2
 800e1f8:	f7ff fa14 	bl	800d624 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e200:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e206:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800e20a:	4619      	mov	r1, r3
 800e20c:	4610      	mov	r0, r2
 800e20e:	f7ff fa09 	bl	800d624 <LL_GPIO_SetOutputPin>
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e216:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e21c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e220:	4619      	mov	r1, r3
 800e222:	4610      	mov	r0, r2
 800e224:	f7ff f9fe 	bl	800d624 <LL_GPIO_SetOutputPin>
  }
  return;
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
}
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <R3_2_SwitchOnPWM>:
  *         bit
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_2_SwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800e232:	b580      	push	{r7, lr}
 800e234:	b084      	sub	sp, #16
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e242:	689b      	ldr	r3, [r3, #8]
 800e244:	60bb      	str	r3, [r7, #8]

  pHandle->_Super.TurnOnLowSidesAction = false;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	2200      	movs	r2, #0
 800e24a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e254:	085b      	lsrs	r3, r3, #1
 800e256:	b29b      	uxth	r3, r3
 800e258:	4619      	mov	r1, r3
 800e25a:	68b8      	ldr	r0, [r7, #8]
 800e25c:	f7ff f8e4 	bl	800d428 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e266:	085b      	lsrs	r3, r3, #1
 800e268:	b29b      	uxth	r3, r3
 800e26a:	4619      	mov	r1, r3
 800e26c:	68b8      	ldr	r0, [r7, #8]
 800e26e:	f7ff f8e9 	bl	800d444 <LL_TIM_OC_SetCompareCH2>
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e278:	085b      	lsrs	r3, r3, #1
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	4619      	mov	r1, r3
 800e27e:	68b8      	ldr	r0, [r7, #8]
 800e280:	f7ff f8ee 	bl	800d460 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e28a:	3b05      	subs	r3, #5
 800e28c:	4619      	mov	r1, r3
 800e28e:	68b8      	ldr	r0, [r7, #8]
 800e290:	f7ff f8f4 	bl	800d47c <LL_TIM_OC_SetCompareCH4>

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800e294:	68b8      	ldr	r0, [r7, #8]
 800e296:	f7ff f934 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800e29a:	bf00      	nop
 800e29c:	68b8      	ldr	r0, [r7, #8]
 800e29e:	f7ff f93e 	bl	800d51e <LL_TIM_IsActiveFlag_UPDATE>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d0f9      	beq.n	800e29c <R3_2_SwitchOnPWM+0x6a>
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800e2a8:	68b8      	ldr	r0, [r7, #8]
 800e2aa:	f7ff f92a 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e2b2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );
 800e2ba:	68b8      	ldr	r0, [r7, #8]
 800e2bc:	f7ff f901 	bl	800d4c2 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2c4:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d149      	bne.n	800e360 <R3_2_SwitchOnPWM+0x12e>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800e2cc:	68bb      	ldr	r3, [r7, #8]
 800e2ce:	6a1a      	ldr	r2, [r3, #32]
 800e2d0:	f240 5355 	movw	r3, #1365	; 0x555
 800e2d4:	4013      	ands	r3, r2
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d021      	beq.n	800e31e <R3_2_SwitchOnPWM+0xec>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2de:	6a1a      	ldr	r2, [r3, #32]
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2e4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e2e8:	4619      	mov	r1, r3
 800e2ea:	4610      	mov	r0, r2
 800e2ec:	f7ff f99a 	bl	800d624 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e2fa:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800e2fe:	4619      	mov	r1, r3
 800e300:	4610      	mov	r0, r2
 800e302:	f7ff f98f 	bl	800d624 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e30a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e310:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e314:	4619      	mov	r1, r3
 800e316:	4610      	mov	r0, r2
 800e318:	f7ff f984 	bl	800d624 <LL_GPIO_SetOutputPin>
 800e31c:	e020      	b.n	800e360 <R3_2_SwitchOnPWM+0x12e>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e322:	6a1a      	ldr	r2, [r3, #32]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e328:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e32c:	4619      	mov	r1, r3
 800e32e:	4610      	mov	r0, r2
 800e330:	f7ff f986 	bl	800d640 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e33e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800e342:	4619      	mov	r1, r3
 800e344:	4610      	mov	r0, r2
 800e346:	f7ff f97b 	bl	800d640 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e34e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e354:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e358:	4619      	mov	r1, r3
 800e35a:	4610      	mov	r0, r2
 800e35c:	f7ff f970 	bl	800d640 <LL_GPIO_ResetOutputPin>
    }
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800e360:	68b8      	ldr	r0, [r7, #8]
 800e362:	f7ff f8ce 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
 800e366:	68b8      	ldr	r0, [r7, #8]
 800e368:	f7ff f91c 	bl	800d5a4 <LL_TIM_EnableIT_UPDATE>
}
 800e36c:	bf00      	nop
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <R3_2_SwitchOffPWM>:
  *         MOE bit
  * @param  pHdl: handler of the current instance of the PWM component
  * @retval none
  */
__weak void R3_2_SwitchOffPWM( PWMC_Handle_t * pHdl )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	60bb      	str	r3, [r7, #8]

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );
 800e388:	68b8      	ldr	r0, [r7, #8]
 800e38a:	f7ff f91b 	bl	800d5c4 <LL_TIM_DisableIT_UPDATE>

  pHandle->_Super.TurnOnLowSidesAction = false;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2200      	movs	r2, #0
 800e392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
 800e396:	68b8      	ldr	r0, [r7, #8]
 800e398:	f7ff f8a3 	bl	800d4e2 <LL_TIM_DisableAllOutputs>
  if ( pHandle->BrakeActionLock == true )
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d126      	bne.n	800e3f4 <R3_2_SwitchOffPWM+0x80>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3aa:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e3ae:	2b02      	cmp	r3, #2
 800e3b0:	d120      	bne.n	800e3f4 <R3_2_SwitchOffPWM+0x80>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3b6:	6a1a      	ldr	r2, [r3, #32]
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3bc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e3c0:	4619      	mov	r1, r3
 800e3c2:	4610      	mov	r0, r2
 800e3c4:	f7ff f93c 	bl	800d640 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d2:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	4610      	mov	r0, r2
 800e3da:	f7ff f931 	bl	800d640 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3e8:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e3ec:	4619      	mov	r1, r3
 800e3ee:	4610      	mov	r0, r2
 800e3f0:	f7ff f926 	bl	800d640 <LL_GPIO_ResetOutputPin>
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800e3f4:	68b8      	ldr	r0, [r7, #8]
 800e3f6:	f7ff f884 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800e3fa:	bf00      	nop
 800e3fc:	68b8      	ldr	r0, [r7, #8]
 800e3fe:	f7ff f88e 	bl	800d51e <LL_TIM_IsActiveFlag_UPDATE>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d0f9      	beq.n	800e3fc <R3_2_SwitchOffPWM+0x88>
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800e408:	68b8      	ldr	r0, [r7, #8]
 800e40a:	f7ff f87a 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>

}
 800e40e:	bf00      	nop
 800e410:	3710      	adds	r7, #16
 800e412:	46bd      	mov	sp, r7
 800e414:	bd80      	pop	{r7, pc}

0800e416 <R3_2_TIMx_UP_IRQHandler>:
  * @brief  It contains the TIMx Update event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_2_TIMx_UP_IRQHandler( PWMC_R3_2_Handle_t * pHandle )
{
 800e416:	b580      	push	{r7, lr}
 800e418:	b088      	sub	sp, #32
 800e41a:	af00      	add	r7, sp, #0
 800e41c:	6078      	str	r0, [r7, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e422:	689b      	ldr	r3, [r3, #8]
 800e424:	61fb      	str	r3, [r7, #28]
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	61bb      	str	r3, [r7, #24]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e432:	685b      	ldr	r3, [r3, #4]
 800e434:	617b      	str	r3, [r7, #20]
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e43a:	68db      	ldr	r3, [r3, #12]
 800e43c:	613b      	str	r3, [r7, #16]
  OPAMP_TypeDef * Opamp;
  uint32_t OpampConfig;
  
  if ( OPAMPParams != NULL )
 800e43e:	693b      	ldr	r3, [r7, #16]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d03e      	beq.n	800e4c2 <R3_2_TIMx_UP_IRQHandler+0xac>
  {
  /* We can not change OPAMP source if ADC acquisition is ongoing (Dual motor with internal opamp use case)*/  
    while (ADCx_1->JSQR != 0x0u)
 800e444:	bf00      	nop
 800e446:	69bb      	ldr	r3, [r7, #24]
 800e448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d1fb      	bne.n	800e446 <R3_2_TIMx_UP_IRQHandler+0x30>
    {}
  /* We need to manage the Operational amplifier internal output enable - Dedicated to G4 and the VPSEL selection */
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e454:	693a      	ldr	r2, [r7, #16]
 800e456:	3302      	adds	r3, #2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4413      	add	r3, r2
 800e45c:	685b      	ldr	r3, [r3, #4]
 800e45e:	60fb      	str	r3, [r7, #12]
    if (Opamp != NULL )
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	2b00      	cmp	r3, #0
 800e464:	d010      	beq.n	800e488 <R3_2_TIMx_UP_IRQHandler+0x72>
    {
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e46c:	693a      	ldr	r2, [r7, #16]
 800e46e:	330e      	adds	r3, #14
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	4413      	add	r3, r2
 800e474:	685b      	ldr	r3, [r3, #4]
 800e476:	60bb      	str	r3, [r7, #8]
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f423 7286 	bic.w	r2, r3, #268	; 0x10c
 800e480:	68bb      	ldr	r3, [r7, #8]
 800e482:	431a      	orrs	r2, r3
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	601a      	str	r2, [r3, #0]
    }
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e48e:	693a      	ldr	r2, [r7, #16]
 800e490:	3308      	adds	r3, #8
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	4413      	add	r3, r2
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	60fb      	str	r3, [r7, #12]
    if (Opamp != NULL )
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d010      	beq.n	800e4c2 <R3_2_TIMx_UP_IRQHandler+0xac>
    {
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e4a6:	693a      	ldr	r2, [r7, #16]
 800e4a8:	3314      	adds	r3, #20
 800e4aa:	009b      	lsls	r3, r3, #2
 800e4ac:	4413      	add	r3, r2
 800e4ae:	685b      	ldr	r3, [r3, #4]
 800e4b0:	60bb      	str	r3, [r7, #8]
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	f423 7286 	bic.w	r2, r3, #268	; 0x10c
 800e4ba:	68bb      	ldr	r3, [r7, #8]
 800e4bc:	431a      	orrs	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	601a      	str	r2, [r3, #0]
    }
  }
 
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e4cc:	331e      	adds	r3, #30
 800e4ce:	009b      	lsls	r3, r3, #2
 800e4d0:	4413      	add	r3, r2
 800e4d2:	685b      	ldr	r3, [r3, #4]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 800e4da:	431a      	orrs	r2, r3
 800e4dc:	69bb      	ldr	r3, [r7, #24]
 800e4de:	64da      	str	r2, [r3, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e4ea:	3324      	adds	r3, #36	; 0x24
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	4413      	add	r3, r2
 800e4f0:	685b      	ldr	r3, [r3, #4]
 800e4f2:	687a      	ldr	r2, [r7, #4]
 800e4f4:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
 800e4f8:	431a      	orrs	r2, r3
 800e4fa:	697b      	ldr	r3, [r7, #20]
 800e4fc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* enable ADC trigger source */
  
  //LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
 800e4fe:	2170      	movs	r1, #112	; 0x70
 800e500:	69f8      	ldr	r0, [r7, #28]
 800e502:	f7fe ffc9 	bl	800d498 <LL_TIM_SetTriggerOutput>
    
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2280      	movs	r2, #128	; 0x80
 800e50a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  return &( pHandle->_Super.Motor );
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	3346      	adds	r3, #70	; 0x46
}
 800e512:	4618      	mov	r0, r3
 800e514:	3720      	adds	r7, #32
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <R3_2_BRK2_IRQHandler>:
  * @brief  It contains the TIMx Break2 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_2_BRK2_IRQHandler( PWMC_R3_2_Handle_t * pHandle )
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b082      	sub	sp, #8
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
  if ( pHandle->BrakeActionLock == false )
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800e528:	f083 0301 	eor.w	r3, r3, #1
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d026      	beq.n	800e580 <R3_2_BRK2_IRQHandler+0x66>
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e536:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e53a:	2b02      	cmp	r3, #2
 800e53c:	d120      	bne.n	800e580 <R3_2_BRK2_IRQHandler+0x66>
    {
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e542:	6a1a      	ldr	r2, [r3, #32]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e548:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800e54c:	4619      	mov	r1, r3
 800e54e:	4610      	mov	r0, r2
 800e550:	f7ff f876 	bl	800d640 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e558:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e55e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800e562:	4619      	mov	r1, r3
 800e564:	4610      	mov	r0, r2
 800e566:	f7ff f86b 	bl	800d640 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e56e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e574:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800e578:	4619      	mov	r1, r3
 800e57a:	4610      	mov	r0, r2
 800e57c:	f7ff f860 	bl	800d640 <LL_GPIO_ResetOutputPin>
    }
  }
  pHandle->OverCurrentFlag = true;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	2201      	movs	r2, #1
 800e584:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e

  return &( pHandle->_Super.Motor );
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	3346      	adds	r3, #70	; 0x46
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <R3_2_BRK_IRQHandler>:
  * @brief  It contains the TIMx Break1 event interrupt
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
__weak void * R3_2_BRK_IRQHandler( PWMC_R3_2_Handle_t * pHandle )
{
 800e594:	b480      	push	{r7}
 800e596:	b083      	sub	sp, #12
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]

  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5a0:	689b      	ldr	r3, [r3, #8]
 800e5a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e5ae:	645a      	str	r2, [r3, #68]	; 0x44
  pHandle->OverVoltageFlag = true;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2201      	movs	r2, #1
 800e5b4:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  pHandle->BrakeActionLock = true;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return &( pHandle->_Super.Motor );
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	3346      	adds	r3, #70	; 0x46
}
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <R3_2_IsOverCurrentOccurred>:
  * @param  pHdl Pointer on the target component instance
  * @retval uint16_t It returns MC_BREAK_IN whether an overcurrent has been
  *                  detected since last method call, MC_NO_FAULTS otherwise.
  */
__weak uint16_t R3_2_IsOverCurrentOccurred( PWMC_Handle_t * pHdl )
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b085      	sub	sp, #20
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	60bb      	str	r3, [r7, #8]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  uint16_t retVal = MC_NO_FAULTS;
 800e5dc:	2300      	movs	r3, #0
 800e5de:	81fb      	strh	r3, [r7, #14]

  if ( pHandle->OverVoltageFlag == true )
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	f893 306f 	ldrb.w	r3, [r3, #111]	; 0x6f
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d005      	beq.n	800e5f6 <R3_2_IsOverCurrentOccurred+0x26>
  {
    retVal = MC_OVER_VOLT;
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	81fb      	strh	r3, [r7, #14]
    pHandle->OverVoltageFlag = false;
 800e5ee:	68bb      	ldr	r3, [r7, #8]
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
  }

  if ( pHandle->OverCurrentFlag == true )
 800e5f6:	68bb      	ldr	r3, [r7, #8]
 800e5f8:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d007      	beq.n	800e610 <R3_2_IsOverCurrentOccurred+0x40>
  {
    retVal |= MC_BREAK_IN;
 800e600:	89fb      	ldrh	r3, [r7, #14]
 800e602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e606:	81fb      	strh	r3, [r7, #14]
    pHandle->OverCurrentFlag = false;
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	2200      	movs	r2, #0
 800e60c:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
  }

  return retVal;
 800e610:	89fb      	ldrh	r3, [r7, #14]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3714      	adds	r7, #20
 800e616:	46bd      	mov	sp, r7
 800e618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61c:	4770      	bx	lr
	...

0800e620 <R3_2_SetAOReferenceVoltage>:
  * @param  hDACVref Value of DAC reference expressed as 16bit unsigned integer.
  *         Ex. 0 = 0V 65536 = VDD_DAC.
  * @retval none
  */
static void R3_2_SetAOReferenceVoltage( uint32_t DAC_Channel, DAC_TypeDef * DACx, uint16_t hDACVref )
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b086      	sub	sp, #24
 800e624:	af00      	add	r7, sp, #0
 800e626:	60f8      	str	r0, [r7, #12]
 800e628:	60b9      	str	r1, [r7, #8]
 800e62a:	4613      	mov	r3, r2
 800e62c:	80fb      	strh	r3, [r7, #6]
  LL_DAC_ConvertData12LeftAligned ( DACx, DAC_Channel, hDACVref );
 800e62e:	88fb      	ldrh	r3, [r7, #6]
 800e630:	461a      	mov	r2, r3
 800e632:	68f9      	ldr	r1, [r7, #12]
 800e634:	68b8      	ldr	r0, [r7, #8]
 800e636:	f7ff f859 	bl	800d6ec <LL_DAC_ConvertData12LeftAligned>

  /* Enable DAC Channel */
  LL_DAC_TrigSWConversion ( DACx, DAC_Channel );
 800e63a:	68f9      	ldr	r1, [r7, #12]
 800e63c:	68b8      	ldr	r0, [r7, #8]
 800e63e:	f7ff f842 	bl	800d6c6 <LL_DAC_TrigSWConversion>
  
  if (LL_DAC_IsEnabled ( DACx, DAC_Channel ) == 1u )
 800e642:	68f9      	ldr	r1, [r7, #12]
 800e644:	68b8      	ldr	r0, [r7, #8]
 800e646:	f7ff f81f 	bl	800d688 <LL_DAC_IsEnabled>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b01      	cmp	r3, #1
 800e64e:	d111      	bne.n	800e674 <R3_2_SetAOReferenceVoltage+0x54>
  { /* If DAC is already enable, we wait LL_DAC_DELAY_VOLTAGE_SETTLING_US*/
    uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800e650:	4b14      	ldr	r3, [pc, #80]	; (800e6a4 <R3_2_SetAOReferenceVoltage+0x84>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	4a14      	ldr	r2, [pc, #80]	; (800e6a8 <R3_2_SetAOReferenceVoltage+0x88>)
 800e656:	fba2 2303 	umull	r2, r3, r2, r3
 800e65a:	0cda      	lsrs	r2, r3, #19
 800e65c:	4613      	mov	r3, r2
 800e65e:	005b      	lsls	r3, r3, #1
 800e660:	4413      	add	r3, r2
 800e662:	617b      	str	r3, [r7, #20]
    while(wait_loop_index != 0UL)
 800e664:	e002      	b.n	800e66c <R3_2_SetAOReferenceVoltage+0x4c>
    {
      wait_loop_index--;
 800e666:	697b      	ldr	r3, [r7, #20]
 800e668:	3b01      	subs	r3, #1
 800e66a:	617b      	str	r3, [r7, #20]
    while(wait_loop_index != 0UL)
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d1f9      	bne.n	800e666 <R3_2_SetAOReferenceVoltage+0x46>
    while(wait_loop_index != 0UL)
    {
      wait_loop_index--;
    }    
  }
}
 800e672:	e012      	b.n	800e69a <R3_2_SetAOReferenceVoltage+0x7a>
    LL_DAC_Enable ( DACx, DAC_Channel );
 800e674:	68f9      	ldr	r1, [r7, #12]
 800e676:	68b8      	ldr	r0, [r7, #8]
 800e678:	f7fe fff0 	bl	800d65c <LL_DAC_Enable>
    uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));      
 800e67c:	4b09      	ldr	r3, [pc, #36]	; (800e6a4 <R3_2_SetAOReferenceVoltage+0x84>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a09      	ldr	r2, [pc, #36]	; (800e6a8 <R3_2_SetAOReferenceVoltage+0x88>)
 800e682:	fba2 2303 	umull	r2, r3, r2, r3
 800e686:	0cdb      	lsrs	r3, r3, #19
 800e688:	00db      	lsls	r3, r3, #3
 800e68a:	613b      	str	r3, [r7, #16]
    while(wait_loop_index != 0UL)
 800e68c:	e002      	b.n	800e694 <R3_2_SetAOReferenceVoltage+0x74>
      wait_loop_index--;
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	3b01      	subs	r3, #1
 800e692:	613b      	str	r3, [r7, #16]
    while(wait_loop_index != 0UL)
 800e694:	693b      	ldr	r3, [r7, #16]
 800e696:	2b00      	cmp	r3, #0
 800e698:	d1f9      	bne.n	800e68e <R3_2_SetAOReferenceVoltage+0x6e>
}
 800e69a:	bf00      	nop
 800e69c:	3718      	adds	r7, #24
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	bd80      	pop	{r7, pc}
 800e6a2:	bf00      	nop
 800e6a4:	200005e0 	.word	0x200005e0
 800e6a8:	431bde83 	.word	0x431bde83

0800e6ac <R3_2_RLDetectionModeEnable>:
 * @param  pHandle: handler of the current instance of the PWM component
 * @param  hDuty to be applied in uint16_t
 * @retval none
 */
void R3_2_RLDetectionModeEnable( PWMC_Handle_t * pHdl )
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6bc:	689b      	ldr	r3, [r3, #8]
 800e6be:	60bb      	str	r3, [r7, #8]
  
  if ( pHandle->_Super.RLDetectionMode == false )
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e6c6:	f083 0301 	eor.w	r3, r3, #1
 800e6ca:	b2db      	uxtb	r3, r3
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d04b      	beq.n	800e768 <R3_2_RLDetectionModeEnable+0xbc>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800e6d0:	2260      	movs	r2, #96	; 0x60
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	68b8      	ldr	r0, [r7, #8]
 800e6d6:	f7fe fda1 	bl	800d21c <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800e6da:	2101      	movs	r1, #1
 800e6dc:	68b8      	ldr	r0, [r7, #8]
 800e6de:	f7fe fd79 	bl	800d1d4 <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800e6e2:	2104      	movs	r1, #4
 800e6e4:	68b8      	ldr	r0, [r7, #8]
 800e6e6:	f7fe fd86 	bl	800d1f6 <LL_TIM_CC_DisableChannel>
    LL_TIM_OC_SetCompareCH1( TIMx, 0u );
 800e6ea:	2100      	movs	r1, #0
 800e6ec:	68b8      	ldr	r0, [r7, #8]
 800e6ee:	f7fe fe9b 	bl	800d428 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6f6:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d10d      	bne.n	800e71a <R3_2_RLDetectionModeEnable+0x6e>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_ACTIVE );
 800e6fe:	2210      	movs	r2, #16
 800e700:	2110      	movs	r1, #16
 800e702:	68b8      	ldr	r0, [r7, #8]
 800e704:	f7fe fd8a 	bl	800d21c <LL_TIM_OC_SetMode>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800e708:	2110      	movs	r1, #16
 800e70a:	68b8      	ldr	r0, [r7, #8]
 800e70c:	f7fe fd73 	bl	800d1f6 <LL_TIM_CC_DisableChannel>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800e710:	2140      	movs	r1, #64	; 0x40
 800e712:	68b8      	ldr	r0, [r7, #8]
 800e714:	f7fe fd5e 	bl	800d1d4 <LL_TIM_CC_EnableChannel>
 800e718:	e012      	b.n	800e740 <R3_2_RLDetectionModeEnable+0x94>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e71e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e722:	2b02      	cmp	r3, #2
 800e724:	d10c      	bne.n	800e740 <R3_2_RLDetectionModeEnable+0x94>
    {
      LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_INACTIVE );
 800e726:	2220      	movs	r2, #32
 800e728:	2110      	movs	r1, #16
 800e72a:	68b8      	ldr	r0, [r7, #8]
 800e72c:	f7fe fd76 	bl	800d21c <LL_TIM_OC_SetMode>
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800e730:	2110      	movs	r1, #16
 800e732:	68b8      	ldr	r0, [r7, #8]
 800e734:	f7fe fd4e 	bl	800d1d4 <LL_TIM_CC_EnableChannel>
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800e738:	2140      	movs	r1, #64	; 0x40
 800e73a:	68b8      	ldr	r0, [r7, #8]
 800e73c:	f7fe fd5b 	bl	800d1f6 <LL_TIM_CC_DisableChannel>
    else
    {
    }

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM2 );
 800e740:	2270      	movs	r2, #112	; 0x70
 800e742:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e746:	68b8      	ldr	r0, [r7, #8]
 800e748:	f7fe fd68 	bl	800d21c <LL_TIM_OC_SetMode>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800e74c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e750:	68b8      	ldr	r0, [r7, #8]
 800e752:	f7fe fd50 	bl	800d1f6 <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800e756:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e75a:	68b8      	ldr	r0, [r7, #8]
 800e75c:	f7fe fd4b 	bl	800d1f6 <LL_TIM_CC_DisableChannel>

    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	4a09      	ldr	r2, [pc, #36]	; (800e790 <R3_2_RLDetectionModeEnable+0xe4>)
 800e76c:	605a      	str	r2, [r3, #4]
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	4a08      	ldr	r2, [pc, #32]	; (800e794 <R3_2_RLDetectionModeEnable+0xe8>)
 800e772:	615a      	str	r2, [r3, #20]
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	4a08      	ldr	r2, [pc, #32]	; (800e798 <R3_2_RLDetectionModeEnable+0xec>)
 800e778:	60da      	str	r2, [r3, #12]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	4a07      	ldr	r2, [pc, #28]	; (800e79c <R3_2_RLDetectionModeEnable+0xf0>)
 800e77e:	609a      	str	r2, [r3, #8]

  pHandle->_Super.RLDetectionMode = true;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2201      	movs	r2, #1
 800e784:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
}
 800e788:	bf00      	nop
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	0800e9a5 	.word	0x0800e9a5
 800e794:	0800ea21 	.word	0x0800ea21
 800e798:	0800eaaf 	.word	0x0800eaaf
 800e79c:	0800e375 	.word	0x0800e375

0800e7a0 <R3_2_RLDetectionModeDisable>:
 * @brief  It is used to disable the PWM mode for R/L detection.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
void R3_2_RLDetectionModeDisable( PWMC_Handle_t * pHdl )
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b084      	sub	sp, #16
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7b0:	689b      	ldr	r3, [r3, #8]
 800e7b2:	60bb      	str	r3, [r7, #8]

  if ( pHandle->_Super.RLDetectionMode == true )
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	f000 8089 	beq.w	800e8d2 <R3_2_RLDetectionModeDisable+0x132>
  {
    /*  Channel1 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH1, LL_TIM_OCMODE_PWM1 );
 800e7c0:	2260      	movs	r2, #96	; 0x60
 800e7c2:	2101      	movs	r1, #1
 800e7c4:	68b8      	ldr	r0, [r7, #8]
 800e7c6:	f7fe fd29 	bl	800d21c <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1 );
 800e7ca:	2101      	movs	r1, #1
 800e7cc:	68b8      	ldr	r0, [r7, #8]
 800e7ce:	f7fe fd01 	bl	800d1d4 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7d6:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e7da:	2b01      	cmp	r3, #1
 800e7dc:	d104      	bne.n	800e7e8 <R3_2_RLDetectionModeDisable+0x48>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800e7de:	2104      	movs	r1, #4
 800e7e0:	68b8      	ldr	r0, [r7, #8]
 800e7e2:	f7fe fcf7 	bl	800d1d4 <LL_TIM_CC_EnableChannel>
 800e7e6:	e009      	b.n	800e7fc <R3_2_RLDetectionModeDisable+0x5c>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7ec:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e7f0:	2b02      	cmp	r3, #2
 800e7f2:	d103      	bne.n	800e7fc <R3_2_RLDetectionModeDisable+0x5c>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH1N );
 800e7f4:	2104      	movs	r1, #4
 800e7f6:	68b8      	ldr	r0, [r7, #8]
 800e7f8:	f7fe fcfd 	bl	800d1f6 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e802:	085b      	lsrs	r3, r3, #1
 800e804:	b29b      	uxth	r3, r3
 800e806:	4619      	mov	r1, r3
 800e808:	68b8      	ldr	r0, [r7, #8]
 800e80a:	f7fe fe0d 	bl	800d428 <LL_TIM_OC_SetCompareCH1>

    /*  Channel2 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH2, LL_TIM_OCMODE_PWM1 );
 800e80e:	2260      	movs	r2, #96	; 0x60
 800e810:	2110      	movs	r1, #16
 800e812:	68b8      	ldr	r0, [r7, #8]
 800e814:	f7fe fd02 	bl	800d21c <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2 );
 800e818:	2110      	movs	r1, #16
 800e81a:	68b8      	ldr	r0, [r7, #8]
 800e81c:	f7fe fcda 	bl	800d1d4 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e824:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e828:	2b01      	cmp	r3, #1
 800e82a:	d104      	bne.n	800e836 <R3_2_RLDetectionModeDisable+0x96>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800e82c:	2140      	movs	r1, #64	; 0x40
 800e82e:	68b8      	ldr	r0, [r7, #8]
 800e830:	f7fe fcd0 	bl	800d1d4 <LL_TIM_CC_EnableChannel>
 800e834:	e009      	b.n	800e84a <R3_2_RLDetectionModeDisable+0xaa>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e83a:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e83e:	2b02      	cmp	r3, #2
 800e840:	d103      	bne.n	800e84a <R3_2_RLDetectionModeDisable+0xaa>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH2N );
 800e842:	2140      	movs	r1, #64	; 0x40
 800e844:	68b8      	ldr	r0, [r7, #8]
 800e846:	f7fe fcd6 	bl	800d1f6 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH2( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e850:	085b      	lsrs	r3, r3, #1
 800e852:	b29b      	uxth	r3, r3
 800e854:	4619      	mov	r1, r3
 800e856:	68b8      	ldr	r0, [r7, #8]
 800e858:	f7fe fdf4 	bl	800d444 <LL_TIM_OC_SetCompareCH2>

    /*  Channel3 configuration */
    LL_TIM_OC_SetMode ( TIMx, LL_TIM_CHANNEL_CH3, LL_TIM_OCMODE_PWM1 );
 800e85c:	2260      	movs	r2, #96	; 0x60
 800e85e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e862:	68b8      	ldr	r0, [r7, #8]
 800e864:	f7fe fcda 	bl	800d21c <LL_TIM_OC_SetMode>
    LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3 );
 800e868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e86c:	68b8      	ldr	r0, [r7, #8]
 800e86e:	f7fe fcb1 	bl	800d1d4 <LL_TIM_CC_EnableChannel>

    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e876:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e87a:	2b01      	cmp	r3, #1
 800e87c:	d105      	bne.n	800e88a <R3_2_RLDetectionModeDisable+0xea>
    {
      LL_TIM_CC_EnableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800e87e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e882:	68b8      	ldr	r0, [r7, #8]
 800e884:	f7fe fca6 	bl	800d1d4 <LL_TIM_CC_EnableChannel>
 800e888:	e00a      	b.n	800e8a0 <R3_2_RLDetectionModeDisable+0x100>
    }
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e88e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800e892:	2b02      	cmp	r3, #2
 800e894:	d104      	bne.n	800e8a0 <R3_2_RLDetectionModeDisable+0x100>
    {
      LL_TIM_CC_DisableChannel( TIMx, LL_TIM_CHANNEL_CH3N );
 800e896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e89a:	68b8      	ldr	r0, [r7, #8]
 800e89c:	f7fe fcab 	bl	800d1f6 <LL_TIM_CC_DisableChannel>
    }
    else
    {
    }

    LL_TIM_OC_SetCompareCH3( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 800e8a0:	68fb      	ldr	r3, [r7, #12]
 800e8a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e8a6:	085b      	lsrs	r3, r3, #1
 800e8a8:	b29b      	uxth	r3, r3
 800e8aa:	4619      	mov	r1, r3
 800e8ac:	68b8      	ldr	r0, [r7, #8]
 800e8ae:	f7fe fdd7 	bl	800d460 <LL_TIM_OC_SetCompareCH3>

    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	4a09      	ldr	r2, [pc, #36]	; (800e8dc <R3_2_RLDetectionModeDisable+0x13c>)
 800e8b6:	605a      	str	r2, [r3, #4]
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	4a09      	ldr	r2, [pc, #36]	; (800e8e0 <R3_2_RLDetectionModeDisable+0x140>)
 800e8bc:	615a      	str	r2, [r3, #20]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	4a08      	ldr	r2, [pc, #32]	; (800e8e4 <R3_2_RLDetectionModeDisable+0x144>)
 800e8c2:	60da      	str	r2, [r3, #12]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	4a08      	ldr	r2, [pc, #32]	; (800e8e8 <R3_2_RLDetectionModeDisable+0x148>)
 800e8c8:	609a      	str	r2, [r3, #8]

    pHandle->_Super.RLDetectionMode = false;
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }
}
 800e8d2:	bf00      	nop
 800e8d4:	3710      	adds	r7, #16
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}
 800e8da:	bf00      	nop
 800e8dc:	0800dd09 	.word	0x0800dd09
 800e8e0:	0800e187 	.word	0x0800e187
 800e8e4:	0800e233 	.word	0x0800e233
 800e8e8:	0800e375 	.word	0x0800e375

0800e8ec <R3_2_RLDetectionModeSetDuty>:
 * @param  hDuty to be applied in uint16_t
 * @retval It returns the code error 'MC_FOC_DURATION' if any, 'MC_NO_ERROR'
 *         otherwise. These error codes are defined in mc_type.h
 */
uint16_t R3_2_RLDetectionModeSetDuty( PWMC_Handle_t * pHdl, uint16_t hDuty )
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	807b      	strh	r3, [r7, #2]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e8fc:	693b      	ldr	r3, [r7, #16]
 800e8fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e900:	689b      	ldr	r3, [r3, #8]
 800e902:	60fb      	str	r3, [r7, #12]
  uint32_t val;
  uint16_t hAux;


  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800e904:	693b      	ldr	r3, [r7, #16]
 800e906:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e90a:	461a      	mov	r2, r3
 800e90c:	887b      	ldrh	r3, [r7, #2]
 800e90e:	fb03 f302 	mul.w	r3, r3, r2
 800e912:	0c1b      	lsrs	r3, r3, #16
 800e914:	60bb      	str	r3, [r7, #8]
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 800e916:	68bb      	ldr	r3, [r7, #8]
 800e918:	b29a      	uxth	r2, r3
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	865a      	strh	r2, [r3, #50]	; 0x32

  /* Set CC4 as PWM mode 2 (default) */
  LL_TIM_OC_SetMode(TIMx, LL_TIM_CHANNEL_CH4, LL_TIM_OCMODE_PWM2);
 800e91e:	2270      	movs	r2, #112	; 0x70
 800e920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e924:	68f8      	ldr	r0, [r7, #12]
 800e926:	f7fe fc79 	bl	800d21c <LL_TIM_OC_SetMode>

  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e930:	461a      	mov	r2, r3
 800e932:	693b      	ldr	r3, [r7, #16]
 800e934:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e938:	1ad3      	subs	r3, r2, r3
 800e93a:	4619      	mov	r1, r3
 800e93c:	68f8      	ldr	r0, [r7, #12]
 800e93e:	f7fe fd9d 	bl	800d47c <LL_TIM_OC_SetCompareCH4>
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e948:	4619      	mov	r1, r3
 800e94a:	68f8      	ldr	r0, [r7, #12]
 800e94c:	f7fe fd88 	bl	800d460 <LL_TIM_OC_SetCompareCH3>
  LL_TIM_OC_SetCompareCH1(TIMx, ( uint32_t )pHandle->_Super.CntPhA);
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e954:	4619      	mov	r1, r3
 800e956:	68f8      	ldr	r0, [r7, #12]
 800e958:	f7fe fd66 	bl	800d428 <LL_TIM_OC_SetCompareCH1>

  /* Enabling next Trigger */
  //LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_OC4REF);
 800e95c:	2170      	movs	r1, #112	; 0x70
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f7fe fd9a 	bl	800d498 <LL_TIM_SetTriggerOutput>
  /* set the sector that correspond to Phase A and B sampling */
  pHdl->Sector = SECTOR_4;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2203      	movs	r2, #3
 800e968:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Limit for update event */
  /* Check the status flag. If an update event has occurred before to set new
  values of regs the FOC rate is too high */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	685a      	ldr	r2, [r3, #4]
 800e970:	4b0b      	ldr	r3, [pc, #44]	; (800e9a0 <R3_2_RLDetectionModeSetDuty+0xb4>)
 800e972:	4013      	ands	r3, r2
 800e974:	2b00      	cmp	r3, #0
 800e976:	d002      	beq.n	800e97e <R3_2_RLDetectionModeSetDuty+0x92>
  {
    hAux = MC_FOC_DURATION;
 800e978:	2301      	movs	r3, #1
 800e97a:	82fb      	strh	r3, [r7, #22]
 800e97c:	e001      	b.n	800e982 <R3_2_RLDetectionModeSetDuty+0x96>
  }
  else
  {
    hAux = MC_NO_ERROR;
 800e97e:	2300      	movs	r3, #0
 800e980:	82fb      	strh	r3, [r7, #22]
  }
  if ( pHandle->_Super.SWerror == 1u )
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800e986:	2b01      	cmp	r3, #1
 800e988:	d104      	bne.n	800e994 <R3_2_RLDetectionModeSetDuty+0xa8>
  {
    hAux = MC_FOC_DURATION;
 800e98a:	2301      	movs	r3, #1
 800e98c:	82fb      	strh	r3, [r7, #22]
    pHandle->_Super.SWerror = 0u;
 800e98e:	693b      	ldr	r3, [r7, #16]
 800e990:	2200      	movs	r2, #0
 800e992:	871a      	strh	r2, [r3, #56]	; 0x38
  }
  return hAux;
 800e994:	8afb      	ldrh	r3, [r7, #22]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}
 800e99e:	bf00      	nop
 800e9a0:	02000070 	.word	0x02000070

0800e9a4 <R3_2_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
static void R3_2_RLGetPhaseCurrents( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b086      	sub	sp, #24
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
 800e9ac:	6039      	str	r1, [r7, #0]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	613b      	str	r3, [r7, #16]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800e9b2:	693b      	ldr	r3, [r7, #16]
 800e9b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9b6:	689b      	ldr	r3, [r3, #8]
 800e9b8:	60fb      	str	r3, [r7, #12]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	68f8      	ldr	r0, [r7, #12]
 800e9be:	f7fe fd6b 	bl	800d498 <LL_TIM_SetTriggerOutput>

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 800e9c2:	693b      	ldr	r3, [r7, #16]
 800e9c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e9c6:	4619      	mov	r1, r3
 800e9c8:	693b      	ldr	r3, [r7, #16]
 800e9ca:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e9d2:	3318      	adds	r3, #24
 800e9d4:	009b      	lsls	r3, r3, #2
 800e9d6:	4413      	add	r3, r2
 800e9d8:	685b      	ldr	r3, [r3, #4]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	1acb      	subs	r3, r1, r3
 800e9de:	617b      	str	r3, [r7, #20]
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	4a0d      	ldr	r2, [pc, #52]	; (800ea18 <R3_2_RLGetPhaseCurrents+0x74>)
 800e9e4:	4293      	cmp	r3, r2
 800e9e6:	db08      	blt.n	800e9fa <R3_2_RLGetPhaseCurrents+0x56>
  {
    if ( wAux < INT16_MAX )
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e9ee:	4293      	cmp	r3, r2
 800e9f0:	dd05      	ble.n	800e9fe <R3_2_RLGetPhaseCurrents+0x5a>
    {
    }
    else
    {
      wAux = INT16_MAX;
 800e9f2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800e9f6:	617b      	str	r3, [r7, #20]
 800e9f8:	e001      	b.n	800e9fe <R3_2_RLGetPhaseCurrents+0x5a>
    }
  }
  else
  {
    wAux = -INT16_MAX;
 800e9fa:	4b08      	ldr	r3, [pc, #32]	; (800ea1c <R3_2_RLGetPhaseCurrents+0x78>)
 800e9fc:	617b      	str	r3, [r7, #20]
  }

  pStator_Currents->a = (int16_t)wAux;
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	b21a      	sxth	r2, r3
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	801a      	strh	r2, [r3, #0]
  pStator_Currents->b = (int16_t)wAux;
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	b21a      	sxth	r2, r3
 800ea0a:	683b      	ldr	r3, [r7, #0]
 800ea0c:	805a      	strh	r2, [r3, #2]
}
 800ea0e:	bf00      	nop
 800ea10:	3718      	adds	r7, #24
 800ea12:	46bd      	mov	sp, r7
 800ea14:	bd80      	pop	{r7, pc}
 800ea16:	bf00      	nop
 800ea18:	ffff8002 	.word	0xffff8002
 800ea1c:	ffff8001 	.word	0xffff8001

0800ea20 <R3_2_RLTurnOnLowSides>:
  *         This function is specific for RL detection phase.
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_2_RLTurnOnLowSides( PWMC_Handle_t * pHdl )
{
 800ea20:	b580      	push	{r7, lr}
 800ea22:	b084      	sub	sp, #16
 800ea24:	af00      	add	r7, sp, #0
 800ea26:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	60fb      	str	r3, [r7, #12]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea30:	689b      	ldr	r3, [r3, #8]
 800ea32:	60bb      	str	r3, [r7, #8]

  /*Turn on the phase A low side switch */
  LL_TIM_OC_SetCompareCH1 ( TIMx, 0u );
 800ea34:	2100      	movs	r1, #0
 800ea36:	68b8      	ldr	r0, [r7, #8]
 800ea38:	f7fe fcf6 	bl	800d428 <LL_TIM_OC_SetCompareCH1>

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800ea3c:	68b8      	ldr	r0, [r7, #8]
 800ea3e:	f7fe fd60 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800ea42:	bf00      	nop
 800ea44:	68b8      	ldr	r0, [r7, #8]
 800ea46:	f7fe fd6a 	bl	800d51e <LL_TIM_IsActiveFlag_UPDATE>
 800ea4a:	4603      	mov	r3, r0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d0f9      	beq.n	800ea44 <R3_2_RLTurnOnLowSides+0x24>
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );
 800ea50:	68b8      	ldr	r0, [r7, #8]
 800ea52:	f7fe fd36 	bl	800d4c2 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea5a:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800ea5e:	2b02      	cmp	r3, #2
 800ea60:	d121      	bne.n	800eaa6 <R3_2_RLTurnOnLowSides+0x86>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea66:	6a1a      	ldr	r2, [r3, #32]
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea6c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800ea70:	4619      	mov	r1, r3
 800ea72:	4610      	mov	r0, r2
 800ea74:	f7fe fdd6 	bl	800d624 <LL_GPIO_SetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea82:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800ea86:	4619      	mov	r1, r3
 800ea88:	4610      	mov	r0, r2
 800ea8a:	f7fe fdd9 	bl	800d640 <LL_GPIO_ResetOutputPin>
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ea98:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	f7fe fdce 	bl	800d640 <LL_GPIO_ResetOutputPin>
  }
  return;
 800eaa4:	bf00      	nop
 800eaa6:	bf00      	nop
}
 800eaa8:	3710      	adds	r7, #16
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	bd80      	pop	{r7, pc}

0800eaae <R3_2_RLSwitchOnPWM>:
  *         This function is specific for RL detection phase.
  * @param  pHandle: handler of the current instance of the PWM component
  * @retval none
  */
static void R3_2_RLSwitchOnPWM( PWMC_Handle_t * pHdl )
{
 800eaae:	b580      	push	{r7, lr}
 800eab0:	b086      	sub	sp, #24
 800eab2:	af00      	add	r7, sp, #0
 800eab4:	6078      	str	r0, [r7, #4]
#if defined (__ICCARM__)
  #pragma cstat_disable = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	617b      	str	r3, [r7, #20]
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800eaba:	697b      	ldr	r3, [r7, #20]
 800eabc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eabe:	689b      	ldr	r3, [r3, #8]
 800eac0:	613b      	str	r3, [r7, #16]
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 800eac2:	697b      	ldr	r3, [r7, #20]
 800eac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	60fb      	str	r3, [r7, #12]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 800eaca:	697b      	ldr	r3, [r7, #20]
 800eacc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	60bb      	str	r3, [r7, #8]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800ead2:	6938      	ldr	r0, [r7, #16]
 800ead4:	f7fe fd15 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800ead8:	bf00      	nop
 800eada:	6938      	ldr	r0, [r7, #16]
 800eadc:	f7fe fd1f 	bl	800d51e <LL_TIM_IsActiveFlag_UPDATE>
 800eae0:	4603      	mov	r3, r0
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d0f9      	beq.n	800eada <R3_2_RLSwitchOnPWM+0x2c>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
 800eae6:	6938      	ldr	r0, [r7, #16]
 800eae8:	f7fe fd0b 	bl	800d502 <LL_TIM_ClearFlag_UPDATE>

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
 800eaec:	2101      	movs	r1, #1
 800eaee:	6938      	ldr	r0, [r7, #16]
 800eaf0:	f7fe fc9a 	bl	800d428 <LL_TIM_OC_SetCompareCH1>
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 800eaf4:	697b      	ldr	r3, [r7, #20]
 800eaf6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800eafa:	3b05      	subs	r3, #5
 800eafc:	4619      	mov	r1, r3
 800eafe:	6938      	ldr	r0, [r7, #16]
 800eb00:	f7fe fcbc 	bl	800d47c <LL_TIM_OC_SetCompareCH4>

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 800eb04:	bf00      	nop
 800eb06:	6938      	ldr	r0, [r7, #16]
 800eb08:	f7fe fd09 	bl	800d51e <LL_TIM_IsActiveFlag_UPDATE>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d0f9      	beq.n	800eb06 <R3_2_RLSwitchOnPWM+0x58>
  {}

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
 800eb12:	6938      	ldr	r0, [r7, #16]
 800eb14:	f7fe fd46 	bl	800d5a4 <LL_TIM_EnableIT_UPDATE>
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb1c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );
 800eb24:	6938      	ldr	r0, [r7, #16]
 800eb26:	f7fe fccc 	bl	800d4c2 <LL_TIM_EnableAllOutputs>

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800eb2a:	697b      	ldr	r3, [r7, #20]
 800eb2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb2e:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
 800eb32:	2b02      	cmp	r3, #2
 800eb34:	d149      	bne.n	800ebca <R3_2_RLSwitchOnPWM+0x11c>
  {
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800eb36:	693b      	ldr	r3, [r7, #16]
 800eb38:	6a1a      	ldr	r2, [r3, #32]
 800eb3a:	f240 5355 	movw	r3, #1365	; 0x555
 800eb3e:	4013      	ands	r3, r2
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d021      	beq.n	800eb88 <R3_2_RLSwitchOnPWM+0xda>
    {
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb48:	6a1a      	ldr	r2, [r3, #32]
 800eb4a:	697b      	ldr	r3, [r7, #20]
 800eb4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800eb52:	4619      	mov	r1, r3
 800eb54:	4610      	mov	r0, r2
 800eb56:	f7fe fd65 	bl	800d624 <LL_GPIO_SetOutputPin>
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800eb5a:	697b      	ldr	r3, [r7, #20]
 800eb5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb60:	697b      	ldr	r3, [r7, #20]
 800eb62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb64:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800eb68:	4619      	mov	r1, r3
 800eb6a:	4610      	mov	r0, r2
 800eb6c:	f7fe fd5a 	bl	800d624 <LL_GPIO_SetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eb76:	697b      	ldr	r3, [r7, #20]
 800eb78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb7a:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4610      	mov	r0, r2
 800eb82:	f7fe fd5d 	bl	800d640 <LL_GPIO_ResetOutputPin>
 800eb86:	e020      	b.n	800ebca <R3_2_RLSwitchOnPWM+0x11c>
    }
    else
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800eb88:	697b      	ldr	r3, [r7, #20]
 800eb8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb8c:	6a1a      	ldr	r2, [r3, #32]
 800eb8e:	697b      	ldr	r3, [r7, #20]
 800eb90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb92:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 800eb96:	4619      	mov	r1, r3
 800eb98:	4610      	mov	r0, r2
 800eb9a:	f7fe fd51 	bl	800d640 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800eb9e:	697b      	ldr	r3, [r7, #20]
 800eba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eba4:	697b      	ldr	r3, [r7, #20]
 800eba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eba8:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 800ebac:	4619      	mov	r1, r3
 800ebae:	4610      	mov	r0, r2
 800ebb0:	f7fe fd46 	bl	800d640 <LL_GPIO_ResetOutputPin>
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800ebb4:	697b      	ldr	r3, [r7, #20]
 800ebb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ebbe:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	4610      	mov	r0, r2
 800ebc6:	f7fe fd3b 	bl	800d640 <LL_GPIO_ResetOutputPin>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2203      	movs	r2, #3
 800ebce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  LL_ADC_INJ_StartConversion( ADCx_1 );
 800ebd2:	68f8      	ldr	r0, [r7, #12]
 800ebd4:	f7fe fa2e 	bl	800d034 <LL_ADC_INJ_StartConversion>
  LL_ADC_INJ_StartConversion( ADCx_2 );
 800ebd8:	68b8      	ldr	r0, [r7, #8]
 800ebda:	f7fe fa2b 	bl	800d034 <LL_ADC_INJ_StartConversion>

  return;
 800ebde:	bf00      	nop
}
 800ebe0:	3718      	adds	r7, #24
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	bd80      	pop	{r7, pc}

0800ebe6 <RVBS_Init>:
    It must be called only after PWMC_Init.
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Init( RDivider_Handle_t * pHandle )
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b082      	sub	sp, #8
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  /* Need to be register with RegularConvManager */
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	330c      	adds	r3, #12
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7f4 fc54 	bl	80034a0 <RCM_RegisterRegConv>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  /* Check */
  RVBS_Clear( pHandle );
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f000 f804 	bl	800ec10 <RVBS_Clear>
}
 800ec08:	bf00      	nop
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <RVBS_Clear>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval none
  */
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
 800ec10:	b480      	push	{r7}
 800ec12:	b085      	sub	sp, #20
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	8b5b      	ldrh	r3, [r3, #26]
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	8b9b      	ldrh	r3, [r3, #28]
 800ec22:	4413      	add	r3, r2
 800ec24:	085b      	lsrs	r3, r3, #1
 800ec26:	81bb      	strh	r3, [r7, #12]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800ec28:	2300      	movs	r3, #0
 800ec2a:	81fb      	strh	r3, [r7, #14]
 800ec2c:	e009      	b.n	800ec42 <RVBS_Clear+0x32>
  {
    pHandle->aBuffer[index] = aux;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	6a1a      	ldr	r2, [r3, #32]
 800ec32:	89fb      	ldrh	r3, [r7, #14]
 800ec34:	005b      	lsls	r3, r3, #1
 800ec36:	4413      	add	r3, r2
 800ec38:	89ba      	ldrh	r2, [r7, #12]
 800ec3a:	801a      	strh	r2, [r3, #0]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 800ec3c:	89fb      	ldrh	r3, [r7, #14]
 800ec3e:	3301      	adds	r3, #1
 800ec40:	81fb      	strh	r3, [r7, #14]
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	8b1b      	ldrh	r3, [r3, #24]
 800ec46:	89fa      	ldrh	r2, [r7, #14]
 800ec48:	429a      	cmp	r2, r3
 800ec4a:	d3f0      	bcc.n	800ec2e <RVBS_Clear+0x1e>
  }
  pHandle->_Super.LatestConv = aux;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	89ba      	ldrh	r2, [r7, #12]
 800ec50:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.AvBusVoltage_d = aux;
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	89ba      	ldrh	r2, [r7, #12]
 800ec56:	80da      	strh	r2, [r3, #6]
  pHandle->index = 0;
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
}
 800ec60:	bf00      	nop
 800ec62:	3714      	adds	r7, #20
 800ec64:	46bd      	mov	sp, r7
 800ec66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec6a:	4770      	bx	lr

0800ec6c <RVBS_CalcAvVbus>:
  *         value
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CalcAvVbus( RDivider_Handle_t * pHandle )
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b084      	sub	sp, #16
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
  uint32_t wtemp;
  uint16_t hAux;
  uint8_t i;

  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7f4 fcce 	bl	800361c <RCM_ExecRegularConv>
 800ec80:	4603      	mov	r3, r0
 800ec82:	813b      	strh	r3, [r7, #8]

  if ( hAux != 0xFFFF )
 800ec84:	893b      	ldrh	r3, [r7, #8]
 800ec86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec8a:	4293      	cmp	r3, r2
 800ec8c:	d044      	beq.n	800ed18 <RVBS_CalcAvVbus+0xac>
  {
    pHandle->aBuffer[pHandle->index] = hAux;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	6a1a      	ldr	r2, [r3, #32]
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	4413      	add	r3, r2
 800ec9c:	893a      	ldrh	r2, [r7, #8]
 800ec9e:	801a      	strh	r2, [r3, #0]
    wtemp = 0;
 800eca0:	2300      	movs	r3, #0
 800eca2:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800eca4:	2300      	movs	r3, #0
 800eca6:	72fb      	strb	r3, [r7, #11]
 800eca8:	e00c      	b.n	800ecc4 <RVBS_CalcAvVbus+0x58>
    {
      wtemp += pHandle->aBuffer[i];
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	6a1a      	ldr	r2, [r3, #32]
 800ecae:	7afb      	ldrb	r3, [r7, #11]
 800ecb0:	005b      	lsls	r3, r3, #1
 800ecb2:	4413      	add	r3, r2
 800ecb4:	881b      	ldrh	r3, [r3, #0]
 800ecb6:	461a      	mov	r2, r3
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	4413      	add	r3, r2
 800ecbc:	60fb      	str	r3, [r7, #12]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 800ecbe:	7afb      	ldrb	r3, [r7, #11]
 800ecc0:	3301      	adds	r3, #1
 800ecc2:	72fb      	strb	r3, [r7, #11]
 800ecc4:	7afb      	ldrb	r3, [r7, #11]
 800ecc6:	b29a      	uxth	r2, r3
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	8b1b      	ldrh	r3, [r3, #24]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d3ec      	bcc.n	800ecaa <RVBS_CalcAvVbus+0x3e>
    }
    wtemp /= pHandle->LowPassFilterBW;
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	8b1b      	ldrh	r3, [r3, #24]
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecdc:	60fb      	str	r3, [r7, #12]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	b29a      	uxth	r2, r3
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.LatestConv = hAux;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	893a      	ldrh	r2, [r7, #8]
 800ecea:	809a      	strh	r2, [r3, #4]

    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	8b1b      	ldrh	r3, [r3, #24]
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	da08      	bge.n	800ed10 <RVBS_CalcAvVbus+0xa4>
    {
      pHandle->index++;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ed04:	3301      	adds	r3, #1
 800ed06:	b2da      	uxtb	r2, r3
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 800ed0e:	e003      	b.n	800ed18 <RVBS_CalcAvVbus+0xac>
    }
    else
    {
      pHandle->index = 0;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	2200      	movs	r2, #0
 800ed14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f000 f80a 	bl	800ed32 <RVBS_CheckFaultState>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	461a      	mov	r2, r3
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	811a      	strh	r2, [r3, #8]

  return ( pHandle->_Super.FaultState );
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	891b      	ldrh	r3, [r3, #8]
}
 800ed2a:	4618      	mov	r0, r3
 800ed2c:	3710      	adds	r7, #16
 800ed2e:	46bd      	mov	sp, r7
 800ed30:	bd80      	pop	{r7, pc}

0800ed32 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
 800ed32:	b480      	push	{r7}
 800ed34:	b085      	sub	sp, #20
 800ed36:	af00      	add	r7, sp, #0
 800ed38:	6078      	str	r0, [r7, #4]
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	88da      	ldrh	r2, [r3, #6]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	8b5b      	ldrh	r3, [r3, #26]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d902      	bls.n	800ed4c <RVBS_CheckFaultState+0x1a>
  {
    fault = MC_OVER_VOLT;
 800ed46:	2302      	movs	r3, #2
 800ed48:	81fb      	strh	r3, [r7, #14]
 800ed4a:	e00a      	b.n	800ed62 <RVBS_CheckFaultState+0x30>
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	88da      	ldrh	r2, [r3, #6]
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	8b9b      	ldrh	r3, [r3, #28]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d202      	bcs.n	800ed5e <RVBS_CheckFaultState+0x2c>
  {
    fault = MC_UNDER_VOLT;
 800ed58:	2304      	movs	r3, #4
 800ed5a:	81fb      	strh	r3, [r7, #14]
 800ed5c:	e001      	b.n	800ed62 <RVBS_CheckFaultState+0x30>
  }
  else
  {
    fault = MC_NO_ERROR;
 800ed5e:	2300      	movs	r3, #0
 800ed60:	81fb      	strh	r3, [r7, #14]
  }
  return fault;
 800ed62:	89fb      	ldrh	r3, [r7, #14]
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3714      	adds	r7, #20
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <REMNG_Init>:
  * @brief  It reset the state variable to zero.
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
  pHandle->Ext = 0;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2200      	movs	r2, #0
 800ed7c:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	2200      	movs	r2, #0
 800ed82:	605a      	str	r2, [r3, #4]
  pHandle->RampRemainingStep = 0u;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	611a      	str	r2, [r3, #16]
  pHandle->ScalingFactor = 1u;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2201      	movs	r2, #1
 800ed94:	615a      	str	r2, [r3, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 800ed96:	bf00      	nop
 800ed98:	370c      	adds	r7, #12
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr

0800eda2 <SPD_GetElAngle>:
  *         s16degrees. 1 s16degree = 360ï¿½/65536
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
 800eda2:	b480      	push	{r7}
 800eda4:	b083      	sub	sp, #12
 800eda6:	af00      	add	r7, sp, #0
 800eda8:	6078      	str	r0, [r7, #4]
  return ( pHandle->hElAngle );
 800edaa:	687b      	ldr	r3, [r7, #4]
 800edac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	370c      	adds	r7, #12
 800edb4:	46bd      	mov	sp, r7
 800edb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edba:	4770      	bx	lr

0800edbc <SPD_GetAvrgMecSpeedUnit>:
  * @brief  Returns the last computed average mechanical speed, expressed in
  *         the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
 800edbc:	b480      	push	{r7}
 800edbe:	b083      	sub	sp, #12
 800edc0:	af00      	add	r7, sp, #0
 800edc2:	6078      	str	r0, [r7, #4]
  return ( pHandle->hAvrMecSpeedUnit );
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
}
 800edca:	4618      	mov	r0, r3
 800edcc:	370c      	adds	r7, #12
 800edce:	46bd      	mov	sp, r7
 800edd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd4:	4770      	bx	lr

0800edd6 <SPD_GetInstElSpeedDpp>:
  *         SPD_CalcElectricalAngle).
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
 800edd6:	b480      	push	{r7}
 800edd8:	b083      	sub	sp, #12
 800edda:	af00      	add	r7, sp, #0
 800eddc:	6078      	str	r0, [r7, #4]
  return ( pHandle->InstantaneousElSpeedDpp );
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
}
 800ede4:	4618      	mov	r0, r3
 800ede6:	370c      	adds	r7, #12
 800ede8:	46bd      	mov	sp, r7
 800edea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edee:	4770      	bx	lr

0800edf0 <SPD_IsMecSpeedReliable>:
  * @param  pMecSpeedUnit pointer to int16_t, used to return the rotor average
  *         mechanical speed (expressed in the unit defined by #SPEED_UNIT)
  * @retval none
  */
__weak bool SPD_IsMecSpeedReliable( SpeednPosFdbk_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 800edf0:	b480      	push	{r7}
 800edf2:	b087      	sub	sp, #28
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	6039      	str	r1, [r7, #0]
  bool SpeedSensorReliability = true;
 800edfa:	2301      	movs	r3, #1
 800edfc:	75fb      	strb	r3, [r7, #23]
  uint8_t bSpeedErrorNumber;
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	78db      	ldrb	r3, [r3, #3]
 800ee02:	73fb      	strb	r3, [r7, #15]

  bool SpeedError = false;
 800ee04:	2300      	movs	r3, #0
 800ee06:	757b      	strb	r3, [r7, #21]
  uint16_t hAbsMecSpeedUnit, hAbsMecAccelUnitP;
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	75bb      	strb	r3, [r7, #22]

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	da09      	bge.n	800ee2c <SPD_IsMecSpeedReliable+0x3c>
  {
    hAux = -( *pMecSpeedUnit );
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee1e:	b29b      	uxth	r3, r3
 800ee20:	425b      	negs	r3, r3
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	81bb      	strh	r3, [r7, #12]
    hAbsMecSpeedUnit = ( uint16_t )( hAux );
 800ee26:	89bb      	ldrh	r3, [r7, #12]
 800ee28:	827b      	strh	r3, [r7, #18]
 800ee2a:	e003      	b.n	800ee34 <SPD_IsMecSpeedReliable+0x44>
  }
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee32:	827b      	strh	r3, [r7, #18]
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	8a9b      	ldrh	r3, [r3, #20]
 800ee38:	8a7a      	ldrh	r2, [r7, #18]
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d901      	bls.n	800ee42 <SPD_IsMecSpeedReliable+0x52>
  {
    SpeedError = true;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	757b      	strb	r3, [r7, #21]
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	8adb      	ldrh	r3, [r3, #22]
 800ee46:	8a7a      	ldrh	r2, [r7, #18]
 800ee48:	429a      	cmp	r2, r3
 800ee4a:	d201      	bcs.n	800ee50 <SPD_IsMecSpeedReliable+0x60>
  {
    SpeedError = true;
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	757b      	strb	r3, [r7, #21]
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	da09      	bge.n	800ee6e <SPD_IsMecSpeedReliable+0x7e>
  {
    hAux = -( pHandle->hMecAccelUnitP );
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ee60:	b29b      	uxth	r3, r3
 800ee62:	425b      	negs	r3, r3
 800ee64:	b29b      	uxth	r3, r3
 800ee66:	81bb      	strh	r3, [r7, #12]
    hAbsMecAccelUnitP = ( uint16_t )( hAux );
 800ee68:	89bb      	ldrh	r3, [r7, #12]
 800ee6a:	823b      	strh	r3, [r7, #16]
 800ee6c:	e003      	b.n	800ee76 <SPD_IsMecSpeedReliable+0x86>
  }
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800ee74:	823b      	strh	r3, [r7, #16]
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	8b1b      	ldrh	r3, [r3, #24]
 800ee7a:	8a3a      	ldrh	r2, [r7, #16]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	d901      	bls.n	800ee84 <SPD_IsMecSpeedReliable+0x94>
  {
    SpeedError = true;
 800ee80:	2301      	movs	r3, #1
 800ee82:	757b      	strb	r3, [r7, #21]
  }

  if ( SpeedError == true )
 800ee84:	7d7b      	ldrb	r3, [r7, #21]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d007      	beq.n	800ee9a <SPD_IsMecSpeedReliable+0xaa>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800ee8a:	7dba      	ldrb	r2, [r7, #22]
 800ee8c:	7bfb      	ldrb	r3, [r7, #15]
 800ee8e:	429a      	cmp	r2, r3
 800ee90:	d209      	bcs.n	800eea6 <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber++;
 800ee92:	7dbb      	ldrb	r3, [r7, #22]
 800ee94:	3301      	adds	r3, #1
 800ee96:	75bb      	strb	r3, [r7, #22]
 800ee98:	e005      	b.n	800eea6 <SPD_IsMecSpeedReliable+0xb6>
    }
  }
  else
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 800ee9a:	7dba      	ldrb	r2, [r7, #22]
 800ee9c:	7bfb      	ldrb	r3, [r7, #15]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d201      	bcs.n	800eea6 <SPD_IsMecSpeedReliable+0xb6>
    {
      bSpeedErrorNumber = 0u;
 800eea2:	2300      	movs	r3, #0
 800eea4:	75bb      	strb	r3, [r7, #22]
    }
  }

  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
 800eea6:	7dba      	ldrb	r2, [r7, #22]
 800eea8:	7bfb      	ldrb	r3, [r7, #15]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	d101      	bne.n	800eeb2 <SPD_IsMecSpeedReliable+0xc2>
  {
    SpeedSensorReliability = false;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	75fb      	strb	r3, [r7, #23]
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	7dba      	ldrb	r2, [r7, #22]
 800eeb6:	701a      	strb	r2, [r3, #0]

  return ( SpeedSensorReliability );
 800eeb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	371c      	adds	r7, #28
 800eebe:	46bd      	mov	sp, r7
 800eec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec4:	4770      	bx	lr

0800eec6 <SPD_GetS16Speed>:
  *         -hMaxReliableMecSpeedUnit.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
 800eec6:	b480      	push	{r7}
 800eec8:	b085      	sub	sp, #20
 800eeca:	af00      	add	r7, sp, #0
 800eecc:	6078      	str	r0, [r7, #4]
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800eed4:	60fb      	str	r3, [r7, #12]
  wAux *= INT16_MAX;
 800eed6:	68fa      	ldr	r2, [r7, #12]
 800eed8:	4613      	mov	r3, r2
 800eeda:	03db      	lsls	r3, r3, #15
 800eedc:	1a9b      	subs	r3, r3, r2
 800eede:	60fb      	str	r3, [r7, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	8a9b      	ldrh	r3, [r3, #20]
 800eee4:	b21b      	sxth	r3, r3
 800eee6:	461a      	mov	r2, r3
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	fb93 f3f2 	sdiv	r3, r3, r2
 800eeee:	60fb      	str	r3, [r7, #12]
  return ( int16_t )wAux;
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	b21b      	sxth	r3, r3
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3714      	adds	r7, #20
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <STC_Init>:
  *         It can be equal to MC_NULL if the STC is used only in torque
  *         mode.
  * @retval none.
  */
__weak void STC_Init( SpeednTorqCtrl_Handle_t * pHandle, PID_Handle_t * pPI, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800ef00:	b480      	push	{r7}
 800ef02:	b085      	sub	sp, #20
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	60f8      	str	r0, [r7, #12]
 800ef08:	60b9      	str	r1, [r7, #8]
 800ef0a:	607a      	str	r2, [r7, #4]

  pHandle->PISpeed = pPI;
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	611a      	str	r2, [r3, #16]
  pHandle->SPD = SPD_Handle;
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	687a      	ldr	r2, [r7, #4]
 800ef16:	615a      	str	r2, [r3, #20]
  pHandle->Mode = pHandle->ModeDefault;
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	701a      	strb	r2, [r3, #0]
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 800ef28:	041a      	lsls	r2, r3, #16
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	605a      	str	r2, [r3, #4]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800ef34:	041a      	lsls	r2, r3, #16
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	609a      	str	r2, [r3, #8]
  pHandle->TargetFinal = 0;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	2200      	movs	r2, #0
 800ef3e:	805a      	strh	r2, [r3, #2]
  pHandle->RampRemainingStep = 0u;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	2200      	movs	r2, #0
 800ef44:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	2200      	movs	r2, #0
 800ef4a:	619a      	str	r2, [r3, #24]
}
 800ef4c:	bf00      	nop
 800ef4e:	3714      	adds	r7, #20
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <STC_SetSpeedSensor>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b083      	sub	sp, #12
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
  pHandle->SPD = SPD_Handle;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	683a      	ldr	r2, [r7, #0]
 800ef66:	615a      	str	r2, [r3, #20]
}
 800ef68:	bf00      	nop
 800ef6a:	370c      	adds	r7, #12
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <STC_GetSpeedSensor>:
  * @brief It returns the speed sensor utilized by the FOC.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  return ( pHandle->SPD );
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	695b      	ldr	r3, [r3, #20]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <STC_Clear>:
            speed mode, this method resets the integral term of speed regulator.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  if ( pHandle->Mode == STC_SPEED_MODE )
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	781b      	ldrb	r3, [r3, #0]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d105      	bne.n	800efa8 <STC_Clear+0x1c>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	691b      	ldr	r3, [r3, #16]
 800efa0:	2100      	movs	r1, #0
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7fd faeb 	bl	800c57e <PID_SetIntegralTerm>
  }
}
 800efa8:	bf00      	nop
 800efaa:	3708      	adds	r7, #8
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}

0800efb0 <STC_GetMecSpeedRefUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800efb0:	b480      	push	{r7}
 800efb2:	b083      	sub	sp, #12
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	da02      	bge.n	800efc6 <STC_GetMecSpeedRefUnit+0x16>
 800efc0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800efc4:	33ff      	adds	r3, #255	; 0xff
 800efc6:	141b      	asrs	r3, r3, #16
 800efc8:	b21b      	sxth	r3, r3
}
 800efca:	4618      	mov	r0, r3
 800efcc:	370c      	adds	r7, #12
 800efce:	46bd      	mov	sp, r7
 800efd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd4:	4770      	bx	lr

0800efd6 <STC_GetTorqueRef>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
 800efd6:	b480      	push	{r7}
 800efd8:	b083      	sub	sp, #12
 800efda:	af00      	add	r7, sp, #0
 800efdc:	6078      	str	r0, [r7, #4]
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	689b      	ldr	r3, [r3, #8]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	da02      	bge.n	800efec <STC_GetTorqueRef+0x16>
 800efe6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800efea:	33ff      	adds	r3, #255	; 0xff
 800efec:	141b      	asrs	r3, r3, #16
 800efee:	b21b      	sxth	r3, r3
}
 800eff0:	4618      	mov	r0, r3
 800eff2:	370c      	adds	r7, #12
 800eff4:	46bd      	mov	sp, r7
 800eff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effa:	4770      	bx	lr

0800effc <STC_SetControlMode>:
  *         STC_TORQUE_MODE to enable the Torque mode or STC_SPEED_MODE to
  *         enable the Speed mode.
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	460b      	mov	r3, r1
 800f006:	70fb      	strb	r3, [r7, #3]
  pHandle->Mode = bMode;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	78fa      	ldrb	r2, [r7, #3]
 800f00c:	701a      	strb	r2, [r3, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	60da      	str	r2, [r3, #12]
}
 800f014:	bf00      	nop
 800f016:	370c      	adds	r7, #12
 800f018:	46bd      	mov	sp, r7
 800f01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f01e:	4770      	bx	lr

0800f020 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 800f020:	b580      	push	{r7, lr}
 800f022:	b088      	sub	sp, #32
 800f024:	af00      	add	r7, sp, #0
 800f026:	60f8      	str	r0, [r7, #12]
 800f028:	460b      	mov	r3, r1
 800f02a:	607a      	str	r2, [r7, #4]
 800f02c:	817b      	strh	r3, [r7, #10]
  bool AllowedRange = true;
 800f02e:	2301      	movs	r3, #1
 800f030:	77fb      	strb	r3, [r7, #31]
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d116      	bne.n	800f068 <STC_ExecRamp+0x48>
  {
    hCurrentReference = STC_GetTorqueRef( pHandle );
 800f03a:	68f8      	ldr	r0, [r7, #12]
 800f03c:	f7ff ffcb 	bl	800efd6 <STC_GetTorqueRef>
 800f040:	4603      	mov	r3, r0
 800f042:	83bb      	strh	r3, [r7, #28]
#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800f044:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f048:	68fa      	ldr	r2, [r7, #12]
 800f04a:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800f04c:	4293      	cmp	r3, r2
 800f04e:	dd01      	ble.n	800f054 <STC_ExecRamp+0x34>
    {
      AllowedRange = false;
 800f050:	2300      	movs	r3, #0
 800f052:	77fb      	strb	r3, [r7, #31]
    }
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 800f05a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f05e:	429a      	cmp	r2, r3
 800f060:	da2d      	bge.n	800f0be <STC_ExecRamp+0x9e>
    {
      AllowedRange = false;
 800f062:	2300      	movs	r3, #0
 800f064:	77fb      	strb	r3, [r7, #31]
 800f066:	e02a      	b.n	800f0be <STC_ExecRamp+0x9e>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	685b      	ldr	r3, [r3, #4]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	da02      	bge.n	800f076 <STC_ExecRamp+0x56>
 800f070:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800f074:	33ff      	adds	r3, #255	; 0xff
 800f076:	141b      	asrs	r3, r3, #16
 800f078:	83bb      	strh	r3, [r7, #28]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800f07a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f07e:	68fa      	ldr	r2, [r7, #12]
 800f080:	8bd2      	ldrh	r2, [r2, #30]
 800f082:	4293      	cmp	r3, r2
 800f084:	dd02      	ble.n	800f08c <STC_ExecRamp+0x6c>
    {
      AllowedRange = false;
 800f086:	2300      	movs	r3, #0
 800f088:	77fb      	strb	r3, [r7, #31]
 800f08a:	e018      	b.n	800f0be <STC_ExecRamp+0x9e>
    }
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 800f092:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f096:	429a      	cmp	r2, r3
 800f098:	da02      	bge.n	800f0a0 <STC_ExecRamp+0x80>
    {
      AllowedRange = false;
 800f09a:	2300      	movs	r3, #0
 800f09c:	77fb      	strb	r3, [r7, #31]
 800f09e:	e00e      	b.n	800f0be <STC_ExecRamp+0x9e>
    }
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800f0a0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f0a4:	68fa      	ldr	r2, [r7, #12]
 800f0a6:	8c12      	ldrh	r2, [r2, #32]
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	da08      	bge.n	800f0be <STC_ExecRamp+0x9e>
    {
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 800f0b2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	dd01      	ble.n	800f0be <STC_ExecRamp+0x9e>
      {
        AllowedRange = false;
 800f0ba:	2300      	movs	r3, #0
 800f0bc:	77fb      	strb	r3, [r7, #31]
    }
    else {}
#endif
  }

  if ( AllowedRange == true )
 800f0be:	7ffb      	ldrb	r3, [r7, #31]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d041      	beq.n	800f148 <STC_ExecRamp+0x128>
  {
    /* Interrupts the execution of any previous ramp command */
    if ( hDurationms == 0u )
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d115      	bne.n	800f0f6 <STC_ExecRamp+0xd6>
    {
      if ( pHandle->Mode == STC_SPEED_MODE )
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d105      	bne.n	800f0de <STC_ExecRamp+0xbe>
      {
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 800f0d2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f0d6:	041a      	lsls	r2, r3, #16
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	605a      	str	r2, [r3, #4]
 800f0dc:	e004      	b.n	800f0e8 <STC_ExecRamp+0xc8>
      }
      else
      {
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800f0de:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800f0e2:	041a      	lsls	r2, r3, #16
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	609a      	str	r2, [r3, #8]
      }
      pHandle->RampRemainingStep = 0u;
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	60da      	str	r2, [r3, #12]
      pHandle->IncDecAmount = 0;
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	2200      	movs	r2, #0
 800f0f2:	619a      	str	r2, [r3, #24]
 800f0f4:	e028      	b.n	800f148 <STC_ExecRamp+0x128>
    }
    else
    {
      /* Store the hTargetFinal to be applied in the last step */
      pHandle->TargetFinal = hTargetFinal;
 800f0f6:	68fb      	ldr	r3, [r7, #12]
 800f0f8:	897a      	ldrh	r2, [r7, #10]
 800f0fa:	805a      	strh	r2, [r3, #2]

      /* Compute the (wRampRemainingStep) number of steps remaining to complete
      the ramp. */
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	8b9b      	ldrh	r3, [r3, #28]
 800f100:	461a      	mov	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	fb02 f303 	mul.w	r3, r2, r3
 800f108:	61bb      	str	r3, [r7, #24]
      wAux /= 1000u;
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	4a11      	ldr	r2, [pc, #68]	; (800f154 <STC_ExecRamp+0x134>)
 800f10e:	fba2 2303 	umull	r2, r3, r2, r3
 800f112:	099b      	lsrs	r3, r3, #6
 800f114:	61bb      	str	r3, [r7, #24]
      pHandle->RampRemainingStep = wAux;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	69ba      	ldr	r2, [r7, #24]
 800f11a:	60da      	str	r2, [r3, #12]
      pHandle->RampRemainingStep++;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	68db      	ldr	r3, [r3, #12]
 800f120:	1c5a      	adds	r2, r3, #1
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	60da      	str	r2, [r3, #12]

      /* Compute the increment/decrement amount (wIncDecAmount) to be applied to
      the reference value at each CalcTorqueReference. */
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 800f126:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800f12a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f12e:	1ad3      	subs	r3, r2, r3
 800f130:	041b      	lsls	r3, r3, #16
 800f132:	617b      	str	r3, [r7, #20]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	461a      	mov	r2, r3
 800f13a:	697b      	ldr	r3, [r7, #20]
 800f13c:	fb93 f3f2 	sdiv	r3, r3, r2
 800f140:	617b      	str	r3, [r7, #20]
      pHandle->IncDecAmount = wAux1;
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	697a      	ldr	r2, [r7, #20]
 800f146:	619a      	str	r2, [r3, #24]
    }
  }

  return AllowedRange;
 800f148:	7ffb      	ldrb	r3, [r7, #31]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3720      	adds	r7, #32
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	10624dd3 	.word	0x10624dd3

0800f158 <STC_StopRamp>:
  *         rotor speed reference is maintained.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{
 800f158:	b480      	push	{r7}
 800f15a:	b083      	sub	sp, #12
 800f15c:	af00      	add	r7, sp, #0
 800f15e:	6078      	str	r0, [r7, #4]

  pHandle->RampRemainingStep = 0u;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2200      	movs	r2, #0
 800f164:	60da      	str	r2, [r3, #12]
  pHandle->IncDecAmount = 0;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	2200      	movs	r2, #0
 800f16a:	619a      	str	r2, [r3, #24]
}
 800f16c:	bf00      	nop
 800f16e:	370c      	adds	r7, #12
 800f170:	46bd      	mov	sp, r7
 800f172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f176:	4770      	bx	lr

0800f178 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]
  int32_t wCurrentReference;
  int16_t hTorqueReference = 0;
 800f180:	2300      	movs	r3, #0
 800f182:	827b      	strh	r3, [r7, #18]
  int16_t hMeasuredSpeed;
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d103      	bne.n	800f194 <STC_CalcTorqueReference+0x1c>
  {
    wCurrentReference = pHandle->TorqueRef;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	689b      	ldr	r3, [r3, #8]
 800f190:	617b      	str	r3, [r7, #20]
 800f192:	e002      	b.n	800f19a <STC_CalcTorqueReference+0x22>
  }
  else
  {
    wCurrentReference = pHandle->SpeedRefUnitExt;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	685b      	ldr	r3, [r3, #4]
 800f198:	617b      	str	r3, [r7, #20]
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d90a      	bls.n	800f1b8 <STC_CalcTorqueReference+0x40>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	699b      	ldr	r3, [r3, #24]
 800f1a6:	697a      	ldr	r2, [r7, #20]
 800f1a8:	4413      	add	r3, r2
 800f1aa:	617b      	str	r3, [r7, #20]

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	68db      	ldr	r3, [r3, #12]
 800f1b0:	1e5a      	subs	r2, r3, #1
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	60da      	str	r2, [r3, #12]
 800f1b6:	e00b      	b.n	800f1d0 <STC_CalcTorqueReference+0x58>
  }
  else if ( pHandle->RampRemainingStep == 1u )
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	68db      	ldr	r3, [r3, #12]
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d107      	bne.n	800f1d0 <STC_CalcTorqueReference+0x58>
  {
    /* Set the backup value of hTargetFinal. */
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800f1c6:	041b      	lsls	r3, r3, #16
 800f1c8:	617b      	str	r3, [r7, #20]
    pHandle->RampRemainingStep = 0u;
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2200      	movs	r2, #0
 800f1ce:	60da      	str	r2, [r3, #12]
  else
  {
    /* Do nothing. */
  }

  if ( pHandle->Mode == STC_SPEED_MODE )
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d126      	bne.n	800f226 <STC_CalcTorqueReference+0xae>
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	da02      	bge.n	800f1e4 <STC_CalcTorqueReference+0x6c>
 800f1de:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800f1e2:	33ff      	adds	r3, #255	; 0xff
 800f1e4:	141b      	asrs	r3, r3, #16
 800f1e6:	823b      	strh	r3, [r7, #16]
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	695b      	ldr	r3, [r3, #20]
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f7ff fde5 	bl	800edbc <SPD_GetAvrgMecSpeedUnit>
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	81fb      	strh	r3, [r7, #14]
    hError = hTargetSpeed - hMeasuredSpeed;
 800f1f6:	8a3a      	ldrh	r2, [r7, #16]
 800f1f8:	89fb      	ldrh	r3, [r7, #14]
 800f1fa:	1ad3      	subs	r3, r2, r3
 800f1fc:	b29b      	uxth	r3, r3
 800f1fe:	81bb      	strh	r3, [r7, #12]
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	691b      	ldr	r3, [r3, #16]
 800f204:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800f208:	4611      	mov	r1, r2
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7fd f9fa 	bl	800c604 <PI_Controller>
 800f210:	4603      	mov	r3, r0
 800f212:	827b      	strh	r3, [r7, #18]

    pHandle->SpeedRefUnitExt = wCurrentReference;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	697a      	ldr	r2, [r7, #20]
 800f218:	605a      	str	r2, [r3, #4]
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 800f21a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f21e:	041a      	lsls	r2, r3, #16
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	609a      	str	r2, [r3, #8]
 800f224:	e00a      	b.n	800f23c <STC_CalcTorqueReference+0xc4>
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	697a      	ldr	r2, [r7, #20]
 800f22a:	609a      	str	r2, [r3, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	da02      	bge.n	800f238 <STC_CalcTorqueReference+0xc0>
 800f232:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800f236:	33ff      	adds	r3, #255	; 0xff
 800f238:	141b      	asrs	r3, r3, #16
 800f23a:	827b      	strh	r3, [r7, #18]
  }

  return hTorqueReference;
 800f23c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
}
 800f240:	4618      	mov	r0, r3
 800f242:	3718      	adds	r7, #24
 800f244:	46bd      	mov	sp, r7
 800f246:	bd80      	pop	{r7, pc}

0800f248 <STC_GetMecSpeedRefUnitDefault>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval int16_t It returns the Default mechanical rotor speed. reference
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
 800f248:	b480      	push	{r7}
 800f24a:	b083      	sub	sp, #12
 800f24c:	af00      	add	r7, sp, #0
 800f24e:	6078      	str	r0, [r7, #4]
  return pHandle->MecSpeedRefUnitDefault;
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
}
 800f256:	4618      	mov	r0, r3
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <STC_GetMaxAppPositiveMecSpeedUnit>:
/**
  * @brief  Returns the Application maximum positive value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800f262:	b480      	push	{r7}
 800f264:	b083      	sub	sp, #12
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
  return pHandle->MaxAppPositiveMecSpeedUnit;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	8bdb      	ldrh	r3, [r3, #30]
}
 800f26e:	4618      	mov	r0, r3
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <STC_GetMinAppNegativeMecSpeedUnit>:
/**
  * @brief  Returns the Application minimum negative value of rotor speed. Expressed in the unit defined by #SPEED_UNIT.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
  return pHandle->MinAppNegativeMecSpeedUnit;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
}
 800f288:	4618      	mov	r0, r3
 800f28a:	370c      	adds	r7, #12
 800f28c:	46bd      	mov	sp, r7
 800f28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f292:	4770      	bx	lr

0800f294 <STC_GetDefaultIqdref>:
  * @brief It returns the default values of Iqdref.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
 800f294:	b480      	push	{r7}
 800f296:	b085      	sub	sp, #20
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	; 0x2e
 800f2a2:	813b      	strh	r3, [r7, #8]
  IqdRefDefault.d = pHandle->IdrefDefault;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f2aa:	817b      	strh	r3, [r7, #10]
  return IqdRefDefault;
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	60fb      	str	r3, [r7, #12]
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	89ba      	ldrh	r2, [r7, #12]
 800f2b4:	f362 030f 	bfi	r3, r2, #0, #16
 800f2b8:	89fa      	ldrh	r2, [r7, #14]
 800f2ba:	f362 431f 	bfi	r3, r2, #16, #16
}
 800f2be:	4618      	mov	r0, r3
 800f2c0:	3714      	adds	r7, #20
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr

0800f2ca <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800f2ca:	b580      	push	{r7, lr}
 800f2cc:	b082      	sub	sp, #8
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	6078      	str	r0, [r7, #4]
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	695b      	ldr	r3, [r3, #20]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7ff fd70 	bl	800edbc <SPD_GetAvrgMecSpeedUnit>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	041a      	lsls	r2, r3, #16
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	605a      	str	r2, [r3, #4]
}
 800f2e4:	bf00      	nop
 800f2e6:	3708      	adds	r7, #8
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}

0800f2ec <STM_Init>:
  *         once right after object creation.
  * @param pHandle pointer on the component instance to initialize.
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]

  pHandle->bState = IDLE;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	701a      	strb	r2, [r3, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2200      	movs	r2, #0
 800f304:	809a      	strh	r2, [r3, #4]
}
 800f306:	bf00      	nop
 800f308:	370c      	adds	r7, #12
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
	...

0800f314 <STM_NextState>:
  * @param bState New requested state
  * @retval bool It returns true if the state has been really set equal to
  *         bState, false if the requested state can't be reached
  */
__weak bool STM_NextState( STM_Handle_t * pHandle, State_t bState )
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	460b      	mov	r3, r1
 800f31e:	70fb      	strb	r3, [r7, #3]
  bool bChangeState = false;
 800f320:	2300      	movs	r3, #0
 800f322:	73fb      	strb	r3, [r7, #15]
  State_t bCurrentState = pHandle->bState;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	737b      	strb	r3, [r7, #13]
  State_t bNewState = bCurrentState;
 800f32a:	7b7b      	ldrb	r3, [r7, #13]
 800f32c:	73bb      	strb	r3, [r7, #14]

  switch ( bCurrentState )
 800f32e:	7b7b      	ldrb	r3, [r7, #13]
 800f330:	2b14      	cmp	r3, #20
 800f332:	f200 8110 	bhi.w	800f556 <STM_NextState+0x242>
 800f336:	a201      	add	r2, pc, #4	; (adr r2, 800f33c <STM_NextState+0x28>)
 800f338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f33c:	0800f3a3 	.word	0x0800f3a3
 800f340:	0800f3c1 	.word	0x0800f3c1
 800f344:	0800f427 	.word	0x0800f427
 800f348:	0800f439 	.word	0x0800f439
 800f34c:	0800f4c3 	.word	0x0800f4c3
 800f350:	0800f4fb 	.word	0x0800f4fb
 800f354:	0800f511 	.word	0x0800f511
 800f358:	0800f521 	.word	0x0800f521
 800f35c:	0800f531 	.word	0x0800f531
 800f360:	0800f541 	.word	0x0800f541
 800f364:	0800f557 	.word	0x0800f557
 800f368:	0800f557 	.word	0x0800f557
 800f36c:	0800f391 	.word	0x0800f391
 800f370:	0800f3df 	.word	0x0800f3df
 800f374:	0800f3f7 	.word	0x0800f3f7
 800f378:	0800f40f 	.word	0x0800f40f
 800f37c:	0800f463 	.word	0x0800f463
 800f380:	0800f47b 	.word	0x0800f47b
 800f384:	0800f4ad 	.word	0x0800f4ad
 800f388:	0800f4df 	.word	0x0800f4df
 800f38c:	0800f497 	.word	0x0800f497
  {
    case ICLWAIT:
      if ( bState == IDLE )
 800f390:	78fb      	ldrb	r3, [r7, #3]
 800f392:	2b00      	cmp	r3, #0
 800f394:	f040 80e1 	bne.w	800f55a <STM_NextState+0x246>
      {
        bNewState = bState;
 800f398:	78fb      	ldrb	r3, [r7, #3]
 800f39a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f39c:	2301      	movs	r3, #1
 800f39e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f3a0:	e0db      	b.n	800f55a <STM_NextState+0x246>
    case IDLE:
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800f3a2:	78fb      	ldrb	r3, [r7, #3]
 800f3a4:	2b03      	cmp	r3, #3
 800f3a6:	d006      	beq.n	800f3b6 <STM_NextState+0xa2>
 800f3a8:	78fb      	ldrb	r3, [r7, #3]
 800f3aa:	2b01      	cmp	r3, #1
 800f3ac:	d003      	beq.n	800f3b6 <STM_NextState+0xa2>
           || ( bState == ICLWAIT ) )
 800f3ae:	78fb      	ldrb	r3, [r7, #3]
 800f3b0:	2b0c      	cmp	r3, #12
 800f3b2:	f040 80d4 	bne.w	800f55e <STM_NextState+0x24a>
      {
        bNewState = bState;
 800f3b6:	78fb      	ldrb	r3, [r7, #3]
 800f3b8:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f3ba:	2301      	movs	r3, #1
 800f3bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f3be:	e0ce      	b.n	800f55e <STM_NextState+0x24a>

    case IDLE_ALIGNMENT:
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 800f3c0:	78fb      	ldrb	r3, [r7, #3]
 800f3c2:	2b07      	cmp	r3, #7
 800f3c4:	d006      	beq.n	800f3d4 <STM_NextState+0xc0>
 800f3c6:	78fb      	ldrb	r3, [r7, #3]
 800f3c8:	2b0d      	cmp	r3, #13
 800f3ca:	d003      	beq.n	800f3d4 <STM_NextState+0xc0>
           || ( bState == ALIGN_OFFSET_CALIB ) )
 800f3cc:	78fb      	ldrb	r3, [r7, #3]
 800f3ce:	2b0e      	cmp	r3, #14
 800f3d0:	f040 80c7 	bne.w	800f562 <STM_NextState+0x24e>
      {
        bNewState = bState;
 800f3d4:	78fb      	ldrb	r3, [r7, #3]
 800f3d6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f3d8:	2301      	movs	r3, #1
 800f3da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f3dc:	e0c1      	b.n	800f562 <STM_NextState+0x24e>

    case ALIGN_CHARGE_BOOT_CAP:
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800f3de:	78fb      	ldrb	r3, [r7, #3]
 800f3e0:	2b0e      	cmp	r3, #14
 800f3e2:	d003      	beq.n	800f3ec <STM_NextState+0xd8>
 800f3e4:	78fb      	ldrb	r3, [r7, #3]
 800f3e6:	2b07      	cmp	r3, #7
 800f3e8:	f040 80bd 	bne.w	800f566 <STM_NextState+0x252>
      {
        bNewState = bState;
 800f3ec:	78fb      	ldrb	r3, [r7, #3]
 800f3ee:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f3f0:	2301      	movs	r3, #1
 800f3f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f3f4:	e0b7      	b.n	800f566 <STM_NextState+0x252>

    case ALIGN_OFFSET_CALIB:
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 800f3f6:	78fb      	ldrb	r3, [r7, #3]
 800f3f8:	2b0f      	cmp	r3, #15
 800f3fa:	d003      	beq.n	800f404 <STM_NextState+0xf0>
 800f3fc:	78fb      	ldrb	r3, [r7, #3]
 800f3fe:	2b07      	cmp	r3, #7
 800f400:	f040 80b3 	bne.w	800f56a <STM_NextState+0x256>
      {
        bNewState = bState;
 800f404:	78fb      	ldrb	r3, [r7, #3]
 800f406:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f408:	2301      	movs	r3, #1
 800f40a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f40c:	e0ad      	b.n	800f56a <STM_NextState+0x256>

    case ALIGN_CLEAR:
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 800f40e:	78fb      	ldrb	r3, [r7, #3]
 800f410:	2b02      	cmp	r3, #2
 800f412:	d003      	beq.n	800f41c <STM_NextState+0x108>
 800f414:	78fb      	ldrb	r3, [r7, #3]
 800f416:	2b07      	cmp	r3, #7
 800f418:	f040 80a9 	bne.w	800f56e <STM_NextState+0x25a>
      {
        bNewState = bState;
 800f41c:	78fb      	ldrb	r3, [r7, #3]
 800f41e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f420:	2301      	movs	r3, #1
 800f422:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f424:	e0a3      	b.n	800f56e <STM_NextState+0x25a>

    case ALIGNMENT:
      if ( bState == ANY_STOP )
 800f426:	78fb      	ldrb	r3, [r7, #3]
 800f428:	2b07      	cmp	r3, #7
 800f42a:	f040 80a2 	bne.w	800f572 <STM_NextState+0x25e>
      {
        bNewState = bState;
 800f42e:	78fb      	ldrb	r3, [r7, #3]
 800f430:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f432:	2301      	movs	r3, #1
 800f434:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f436:	e09c      	b.n	800f572 <STM_NextState+0x25e>

    case IDLE_START:
      if ( ( bState == ANY_STOP ) || ( bState == CHARGE_BOOT_CAP ) ||
 800f438:	78fb      	ldrb	r3, [r7, #3]
 800f43a:	2b07      	cmp	r3, #7
 800f43c:	d00c      	beq.n	800f458 <STM_NextState+0x144>
 800f43e:	78fb      	ldrb	r3, [r7, #3]
 800f440:	2b10      	cmp	r3, #16
 800f442:	d009      	beq.n	800f458 <STM_NextState+0x144>
 800f444:	78fb      	ldrb	r3, [r7, #3]
 800f446:	2b04      	cmp	r3, #4
 800f448:	d006      	beq.n	800f458 <STM_NextState+0x144>
           ( bState == START ) ||
 800f44a:	78fb      	ldrb	r3, [r7, #3]
 800f44c:	2b11      	cmp	r3, #17
 800f44e:	d003      	beq.n	800f458 <STM_NextState+0x144>
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 800f450:	78fb      	ldrb	r3, [r7, #3]
 800f452:	2b01      	cmp	r3, #1
 800f454:	f040 808f 	bne.w	800f576 <STM_NextState+0x262>
      {
        bNewState = bState;
 800f458:	78fb      	ldrb	r3, [r7, #3]
 800f45a:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f45c:	2301      	movs	r3, #1
 800f45e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f460:	e089      	b.n	800f576 <STM_NextState+0x262>

    case CHARGE_BOOT_CAP:
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 800f462:	78fb      	ldrb	r3, [r7, #3]
 800f464:	2b11      	cmp	r3, #17
 800f466:	d003      	beq.n	800f470 <STM_NextState+0x15c>
 800f468:	78fb      	ldrb	r3, [r7, #3]
 800f46a:	2b07      	cmp	r3, #7
 800f46c:	f040 8085 	bne.w	800f57a <STM_NextState+0x266>
      {
        bNewState = bState;
 800f470:	78fb      	ldrb	r3, [r7, #3]
 800f472:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f474:	2301      	movs	r3, #1
 800f476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f478:	e07f      	b.n	800f57a <STM_NextState+0x266>

    case OFFSET_CALIB:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 800f47a:	78fb      	ldrb	r3, [r7, #3]
 800f47c:	2b12      	cmp	r3, #18
 800f47e:	d005      	beq.n	800f48c <STM_NextState+0x178>
 800f480:	78fb      	ldrb	r3, [r7, #3]
 800f482:	2b07      	cmp	r3, #7
 800f484:	d002      	beq.n	800f48c <STM_NextState+0x178>
 800f486:	78fb      	ldrb	r3, [r7, #3]
 800f488:	2b14      	cmp	r3, #20
 800f48a:	d178      	bne.n	800f57e <STM_NextState+0x26a>
      {
        bNewState = bState;
 800f48c:	78fb      	ldrb	r3, [r7, #3]
 800f48e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f490:	2301      	movs	r3, #1
 800f492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f494:	e073      	b.n	800f57e <STM_NextState+0x26a>

     case WAIT_STOP_MOTOR:
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800f496:	78fb      	ldrb	r3, [r7, #3]
 800f498:	2b12      	cmp	r3, #18
 800f49a:	d002      	beq.n	800f4a2 <STM_NextState+0x18e>
 800f49c:	78fb      	ldrb	r3, [r7, #3]
 800f49e:	2b07      	cmp	r3, #7
 800f4a0:	d16f      	bne.n	800f582 <STM_NextState+0x26e>
      {
        bNewState = bState;
 800f4a2:	78fb      	ldrb	r3, [r7, #3]
 800f4a4:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f4aa:	e06a      	b.n	800f582 <STM_NextState+0x26e>

    case CLEAR:
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800f4ac:	78fb      	ldrb	r3, [r7, #3]
 800f4ae:	2b04      	cmp	r3, #4
 800f4b0:	d002      	beq.n	800f4b8 <STM_NextState+0x1a4>
 800f4b2:	78fb      	ldrb	r3, [r7, #3]
 800f4b4:	2b07      	cmp	r3, #7
 800f4b6:	d166      	bne.n	800f586 <STM_NextState+0x272>
      {
        bNewState = bState;
 800f4b8:	78fb      	ldrb	r3, [r7, #3]
 800f4ba:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f4bc:	2301      	movs	r3, #1
 800f4be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f4c0:	e061      	b.n	800f586 <STM_NextState+0x272>

    case START:
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800f4c2:	78fb      	ldrb	r3, [r7, #3]
 800f4c4:	2b13      	cmp	r3, #19
 800f4c6:	d005      	beq.n	800f4d4 <STM_NextState+0x1c0>
 800f4c8:	78fb      	ldrb	r3, [r7, #3]
 800f4ca:	2b07      	cmp	r3, #7
 800f4cc:	d002      	beq.n	800f4d4 <STM_NextState+0x1c0>
 800f4ce:	78fb      	ldrb	r3, [r7, #3]
 800f4d0:	2b05      	cmp	r3, #5
 800f4d2:	d15a      	bne.n	800f58a <STM_NextState+0x276>
      {
        bNewState = bState;
 800f4d4:	78fb      	ldrb	r3, [r7, #3]
 800f4d6:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f4d8:	2301      	movs	r3, #1
 800f4da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f4dc:	e055      	b.n	800f58a <STM_NextState+0x276>

    case SWITCH_OVER:
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 800f4de:	78fb      	ldrb	r3, [r7, #3]
 800f4e0:	2b04      	cmp	r3, #4
 800f4e2:	d005      	beq.n	800f4f0 <STM_NextState+0x1dc>
 800f4e4:	78fb      	ldrb	r3, [r7, #3]
 800f4e6:	2b07      	cmp	r3, #7
 800f4e8:	d002      	beq.n	800f4f0 <STM_NextState+0x1dc>
 800f4ea:	78fb      	ldrb	r3, [r7, #3]
 800f4ec:	2b05      	cmp	r3, #5
 800f4ee:	d14e      	bne.n	800f58e <STM_NextState+0x27a>
      {
        bNewState = bState;
 800f4f0:	78fb      	ldrb	r3, [r7, #3]
 800f4f2:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f4f4:	2301      	movs	r3, #1
 800f4f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f4f8:	e049      	b.n	800f58e <STM_NextState+0x27a>

    case START_RUN:
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 800f4fa:	78fb      	ldrb	r3, [r7, #3]
 800f4fc:	2b06      	cmp	r3, #6
 800f4fe:	d002      	beq.n	800f506 <STM_NextState+0x1f2>
 800f500:	78fb      	ldrb	r3, [r7, #3]
 800f502:	2b07      	cmp	r3, #7
 800f504:	d145      	bne.n	800f592 <STM_NextState+0x27e>
      {
        bNewState = bState;
 800f506:	78fb      	ldrb	r3, [r7, #3]
 800f508:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f50a:	2301      	movs	r3, #1
 800f50c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f50e:	e040      	b.n	800f592 <STM_NextState+0x27e>

    case RUN:
      if ( bState == ANY_STOP )
 800f510:	78fb      	ldrb	r3, [r7, #3]
 800f512:	2b07      	cmp	r3, #7
 800f514:	d13f      	bne.n	800f596 <STM_NextState+0x282>
      {
        bNewState = bState;
 800f516:	78fb      	ldrb	r3, [r7, #3]
 800f518:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f51a:	2301      	movs	r3, #1
 800f51c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f51e:	e03a      	b.n	800f596 <STM_NextState+0x282>

    case ANY_STOP:
      if ( bState == STOP )
 800f520:	78fb      	ldrb	r3, [r7, #3]
 800f522:	2b08      	cmp	r3, #8
 800f524:	d139      	bne.n	800f59a <STM_NextState+0x286>
      {
        bNewState = bState;
 800f526:	78fb      	ldrb	r3, [r7, #3]
 800f528:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f52a:	2301      	movs	r3, #1
 800f52c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f52e:	e034      	b.n	800f59a <STM_NextState+0x286>

    case STOP:
      if ( bState == STOP_IDLE )
 800f530:	78fb      	ldrb	r3, [r7, #3]
 800f532:	2b09      	cmp	r3, #9
 800f534:	d133      	bne.n	800f59e <STM_NextState+0x28a>
      {
        bNewState = bState;
 800f536:	78fb      	ldrb	r3, [r7, #3]
 800f538:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f53a:	2301      	movs	r3, #1
 800f53c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f53e:	e02e      	b.n	800f59e <STM_NextState+0x28a>

    case STOP_IDLE:
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800f540:	78fb      	ldrb	r3, [r7, #3]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d002      	beq.n	800f54c <STM_NextState+0x238>
 800f546:	78fb      	ldrb	r3, [r7, #3]
 800f548:	2b0c      	cmp	r3, #12
 800f54a:	d12a      	bne.n	800f5a2 <STM_NextState+0x28e>
      {
        bNewState = bState;
 800f54c:	78fb      	ldrb	r3, [r7, #3]
 800f54e:	73bb      	strb	r3, [r7, #14]
        bChangeState = true;
 800f550:	2301      	movs	r3, #1
 800f552:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800f554:	e025      	b.n	800f5a2 <STM_NextState+0x28e>
    default:
      break;
 800f556:	bf00      	nop
 800f558:	e024      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f55a:	bf00      	nop
 800f55c:	e022      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f55e:	bf00      	nop
 800f560:	e020      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f562:	bf00      	nop
 800f564:	e01e      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f566:	bf00      	nop
 800f568:	e01c      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f56a:	bf00      	nop
 800f56c:	e01a      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f56e:	bf00      	nop
 800f570:	e018      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f572:	bf00      	nop
 800f574:	e016      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f576:	bf00      	nop
 800f578:	e014      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f57a:	bf00      	nop
 800f57c:	e012      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f57e:	bf00      	nop
 800f580:	e010      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f582:	bf00      	nop
 800f584:	e00e      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f586:	bf00      	nop
 800f588:	e00c      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f58a:	bf00      	nop
 800f58c:	e00a      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f58e:	bf00      	nop
 800f590:	e008      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f592:	bf00      	nop
 800f594:	e006      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f596:	bf00      	nop
 800f598:	e004      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f59a:	bf00      	nop
 800f59c:	e002      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f59e:	bf00      	nop
 800f5a0:	e000      	b.n	800f5a4 <STM_NextState+0x290>
      break;
 800f5a2:	bf00      	nop
  }

  if ( bChangeState )
 800f5a4:	7bfb      	ldrb	r3, [r7, #15]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d003      	beq.n	800f5b2 <STM_NextState+0x29e>
  {
    pHandle->bState = bNewState;
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	7bba      	ldrb	r2, [r7, #14]
 800f5ae:	701a      	strb	r2, [r3, #0]
 800f5b0:	e00d      	b.n	800f5ce <STM_NextState+0x2ba>
  }
  else
  {
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800f5b2:	78fb      	ldrb	r3, [r7, #3]
 800f5b4:	2b03      	cmp	r3, #3
 800f5b6:	d00a      	beq.n	800f5ce <STM_NextState+0x2ba>
 800f5b8:	78fb      	ldrb	r3, [r7, #3]
 800f5ba:	2b01      	cmp	r3, #1
 800f5bc:	d007      	beq.n	800f5ce <STM_NextState+0x2ba>
 800f5be:	78fb      	ldrb	r3, [r7, #3]
 800f5c0:	2b07      	cmp	r3, #7
 800f5c2:	d004      	beq.n	800f5ce <STM_NextState+0x2ba>
            || ( bState == ANY_STOP ) ) )
    {
      /* If new state is not a user command START/STOP raise a software error */
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 800f5c4:	2200      	movs	r2, #0
 800f5c6:	2180      	movs	r1, #128	; 0x80
 800f5c8:	6878      	ldr	r0, [r7, #4]
 800f5ca:	f000 f805 	bl	800f5d8 <STM_FaultProcessing>
    }
  }

  return ( bChangeState );
 800f5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <STM_FaultProcessing>:
  * @param hResetErrors Bit field reporting faults to be cleared
  * @retval State_t New state machine state after fault processing
  */
__weak State_t STM_FaultProcessing( STM_Handle_t * pHandle, uint16_t hSetErrors, uint16_t
                             hResetErrors )
{
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	460b      	mov	r3, r1
 800f5e2:	807b      	strh	r3, [r7, #2]
 800f5e4:	4613      	mov	r3, r2
 800f5e6:	803b      	strh	r3, [r7, #0]
  State_t LocalState =  pHandle->bState;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	73fb      	strb	r3, [r7, #15]

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	885a      	ldrh	r2, [r3, #2]
 800f5f2:	887b      	ldrh	r3, [r7, #2]
 800f5f4:	4313      	orrs	r3, r2
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	b21a      	sxth	r2, r3
 800f5fa:	f9b7 3000 	ldrsh.w	r3, [r7]
 800f5fe:	43db      	mvns	r3, r3
 800f600:	b21b      	sxth	r3, r3
 800f602:	4013      	ands	r3, r2
 800f604:	b21b      	sxth	r3, r3
 800f606:	b29a      	uxth	r2, r3
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	805a      	strh	r2, [r3, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	889a      	ldrh	r2, [r3, #4]
 800f610:	887b      	ldrh	r3, [r7, #2]
 800f612:	4313      	orrs	r3, r2
 800f614:	b29a      	uxth	r2, r3
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	809a      	strh	r2, [r3, #4]

  if ( LocalState == FAULT_NOW )
 800f61a:	7bfb      	ldrb	r3, [r7, #15]
 800f61c:	2b0a      	cmp	r3, #10
 800f61e:	d109      	bne.n	800f634 <STM_FaultProcessing+0x5c>
  {
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	885b      	ldrh	r3, [r3, #2]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d10e      	bne.n	800f646 <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_OVER;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	220b      	movs	r2, #11
 800f62c:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_OVER;
 800f62e:	230b      	movs	r3, #11
 800f630:	73fb      	strb	r3, [r7, #15]
 800f632:	e008      	b.n	800f646 <STM_FaultProcessing+0x6e>
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	885b      	ldrh	r3, [r3, #2]
 800f638:	2b00      	cmp	r3, #0
 800f63a:	d004      	beq.n	800f646 <STM_FaultProcessing+0x6e>
    {
      pHandle->bState = FAULT_NOW;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	220a      	movs	r2, #10
 800f640:	701a      	strb	r2, [r3, #0]
      LocalState = FAULT_NOW;
 800f642:	230a      	movs	r3, #10
 800f644:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ( LocalState );
 800f646:	7bfb      	ldrb	r3, [r7, #15]
}
 800f648:	4618      	mov	r0, r3
 800f64a:	3714      	adds	r7, #20
 800f64c:	46bd      	mov	sp, r7
 800f64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f652:	4770      	bx	lr

0800f654 <STM_GetState>:
  * @brief  Returns the current state machine state
  * @param  pHanlde pointer of type  STM_Handle_t
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  return ( pHandle->bState );
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	781b      	ldrb	r3, [r3, #0]
}
 800f660:	4618      	mov	r0, r3
 800f662:	370c      	adds	r7, #12
 800f664:	46bd      	mov	sp, r7
 800f666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f66a:	4770      	bx	lr

0800f66c <STM_FaultAcknowledged>:
  * @param pHanlde pointer of type  STM_Handle_t
  * @retval bool true if the state machine has been moved to IDLE, false if the
  *        method call had no effects
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
 800f66c:	b480      	push	{r7}
 800f66e:	b085      	sub	sp, #20
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  bool bToBeReturned = false;
 800f674:	2300      	movs	r3, #0
 800f676:	73fb      	strb	r3, [r7, #15]

  if ( pHandle->bState == FAULT_OVER )
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	781b      	ldrb	r3, [r3, #0]
 800f67c:	2b0b      	cmp	r3, #11
 800f67e:	d107      	bne.n	800f690 <STM_FaultAcknowledged+0x24>
  {
    pHandle->bState = STOP_IDLE;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2209      	movs	r2, #9
 800f684:	701a      	strb	r2, [r3, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2200      	movs	r2, #0
 800f68a:	809a      	strh	r2, [r3, #4]
    bToBeReturned = true;
 800f68c:	2301      	movs	r3, #1
 800f68e:	73fb      	strb	r3, [r7, #15]
  }

  return ( bToBeReturned );
 800f690:	7bfb      	ldrb	r3, [r7, #15]
}
 800f692:	4618      	mov	r0, r3
 800f694:	3714      	adds	r7, #20
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <STM_GetFaultState>:
  *         significant half are stored the information about the faults
  *         historically occurred since the state machine has been moved into
  *         FAULT_NOW state
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
 800f69e:	b480      	push	{r7}
 800f6a0:	b085      	sub	sp, #20
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	889b      	ldrh	r3, [r3, #4]
 800f6aa:	60fb      	str	r3, [r7, #12]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	885b      	ldrh	r3, [r3, #2]
 800f6b0:	041b      	lsls	r3, r3, #16
 800f6b2:	68fa      	ldr	r2, [r7, #12]
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	60fb      	str	r3, [r7, #12]

  return LocalFaultState;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	3714      	adds	r7, #20
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c4:	4770      	bx	lr

0800f6c6 <LL_USART_EnableIT_RXNE_RXFNE>:
{
 800f6c6:	b480      	push	{r7}
 800f6c8:	b083      	sub	sp, #12
 800f6ca:	af00      	add	r7, sp, #0
 800f6cc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	f043 0220 	orr.w	r2, r3, #32
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	601a      	str	r2, [r3, #0]
}
 800f6da:	bf00      	nop
 800f6dc:	370c      	adds	r7, #12
 800f6de:	46bd      	mov	sp, r7
 800f6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e4:	4770      	bx	lr

0800f6e6 <LL_USART_EnableIT_TXE_TXFNF>:
{
 800f6e6:	b480      	push	{r7}
 800f6e8:	b083      	sub	sp, #12
 800f6ea:	af00      	add	r7, sp, #0
 800f6ec:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	601a      	str	r2, [r3, #0]
}
 800f6fa:	bf00      	nop
 800f6fc:	370c      	adds	r7, #12
 800f6fe:	46bd      	mov	sp, r7
 800f700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f704:	4770      	bx	lr

0800f706 <LL_USART_DisableIT_RXNE_RXFNE>:
{
 800f706:	b480      	push	{r7}
 800f708:	b083      	sub	sp, #12
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	f023 0220 	bic.w	r2, r3, #32
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	601a      	str	r2, [r3, #0]
}
 800f71a:	bf00      	nop
 800f71c:	370c      	adds	r7, #12
 800f71e:	46bd      	mov	sp, r7
 800f720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f724:	4770      	bx	lr

0800f726 <LL_USART_DisableIT_TXE_TXFNF>:
{
 800f726:	b480      	push	{r7}
 800f728:	b083      	sub	sp, #12
 800f72a:	af00      	add	r7, sp, #0
 800f72c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	681b      	ldr	r3, [r3, #0]
 800f732:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	601a      	str	r2, [r3, #0]
}
 800f73a:	bf00      	nop
 800f73c:	370c      	adds	r7, #12
 800f73e:	46bd      	mov	sp, r7
 800f740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f744:	4770      	bx	lr

0800f746 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800f746:	b480      	push	{r7}
 800f748:	b083      	sub	sp, #12
 800f74a:	af00      	add	r7, sp, #0
 800f74c:	6078      	str	r0, [r7, #4]
 800f74e:	460b      	mov	r3, r1
 800f750:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800f752:	78fa      	ldrb	r2, [r7, #3]
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	629a      	str	r2, [r3, #40]	; 0x28
}
 800f758:	bf00      	nop
 800f75a:	370c      	adds	r7, #12
 800f75c:	46bd      	mov	sp, r7
 800f75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f762:	4770      	bx	lr

0800f764 <UFCP_Init>:
static const uint16_t UFCP_Usart_Timeout_stop = 2;

/* Functions ---------------------------------------------------------*/

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b082      	sub	sp, #8
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fc fcee 	bl	800c150 <FCP_Init>
}
 800f774:	bf00      	nop
 800f776:	3708      	adds	r7, #8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <UFCP_RX_IRQ_Handler>:

/*
 *
 */
__weak void * UFCP_RX_IRQ_Handler( UFCP_Handle_t * pHandle, unsigned short rx_data )
{
 800f77c:	b590      	push	{r4, r7, lr}
 800f77e:	b087      	sub	sp, #28
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	460b      	mov	r3, r1
 800f786:	807b      	strh	r3, [r7, #2]
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800f788:	4b4b      	ldr	r3, [pc, #300]	; (800f8b8 <UFCP_RX_IRQ_Handler+0x13c>)
 800f78a:	617b      	str	r3, [r7, #20]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	613b      	str	r3, [r7, #16]
  uint8_t error_code;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 800f790:	693b      	ldr	r3, [r7, #16]
 800f792:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800f796:	2b00      	cmp	r3, #0
 800f798:	f000 8089 	beq.w	800f8ae <UFCP_RX_IRQ_Handler+0x132>
  {
    uint8_t rx_byte = (uint8_t) rx_data;
 800f79c:	887b      	ldrh	r3, [r7, #2]
 800f79e:	73fb      	strb	r3, [r7, #15]

    switch ( pBaseHandle->RxFrameLevel )
 800f7a0:	693b      	ldr	r3, [r7, #16]
 800f7a2:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d002      	beq.n	800f7b0 <UFCP_RX_IRQ_Handler+0x34>
 800f7aa:	2b01      	cmp	r3, #1
 800f7ac:	d013      	beq.n	800f7d6 <UFCP_RX_IRQ_Handler+0x5a>
 800f7ae:	e029      	b.n	800f804 <UFCP_RX_IRQ_Handler+0x88>
    {
      case 0: // First Byte received --> The Code
        pBaseHandle->RxFrame.Code = rx_byte;
 800f7b0:	693b      	ldr	r3, [r7, #16]
 800f7b2:	7bfa      	ldrb	r2, [r7, #15]
 800f7b4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
        /* Need to ask the caller to start our timeout... TODO: Is this really useful? */
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 800f7b8:	4b40      	ldr	r3, [pc, #256]	; (800f8bc <UFCP_RX_IRQ_Handler+0x140>)
 800f7ba:	617b      	str	r3, [r7, #20]

        /* Start Rx Timeout */
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 800f7bc:	693b      	ldr	r3, [r7, #16]
 800f7be:	8a1a      	ldrh	r2, [r3, #16]
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	825a      	strh	r2, [r3, #18]
        pBaseHandle->RxFrameLevel++;
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800f7ca:	3301      	adds	r3, #1
 800f7cc:	b2da      	uxtb	r2, r3
 800f7ce:	693b      	ldr	r3, [r7, #16]
 800f7d0:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        break;
 800f7d4:	e06b      	b.n	800f8ae <UFCP_RX_IRQ_Handler+0x132>

      case 1: // Second Byte received --> Size of the payload
        pBaseHandle->RxFrame.Size = rx_byte;
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	7bfa      	ldrb	r2, [r7, #15]
 800f7da:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
        pBaseHandle->RxFrameLevel++;
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	b2da      	uxtb	r2, r3
 800f7e8:	693b      	ldr	r3, [r7, #16]
 800f7ea:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f7f4:	b25b      	sxtb	r3, r3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	da58      	bge.n	800f8ac <UFCP_RX_IRQ_Handler+0x130>
        { /* Garbage data received decoded with a payload size that exceeds max*/
          pBaseHandle->RxFrameLevel =0 ;
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
        }
        break;
 800f802:	e053      	b.n	800f8ac <UFCP_RX_IRQ_Handler+0x130>

      default: // In the payload or the "CRC"
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800f80a:	461a      	mov	r2, r3
 800f80c:	693b      	ldr	r3, [r7, #16]
 800f80e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f812:	3302      	adds	r3, #2
 800f814:	429a      	cmp	r2, r3
 800f816:	da11      	bge.n	800f83c <UFCP_RX_IRQ_Handler+0xc0>
        {
          // read byte is for the payload
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800f81e:	3b02      	subs	r3, #2
 800f820:	693a      	ldr	r2, [r7, #16]
 800f822:	4413      	add	r3, r2
 800f824:	7bfa      	ldrb	r2, [r7, #15]
 800f826:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
          pBaseHandle->RxFrameLevel++;
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	f893 311d 	ldrb.w	r3, [r3, #285]	; 0x11d
 800f830:	3301      	adds	r3, #1
 800f832:	b2da      	uxtb	r2, r3
 800f834:	693b      	ldr	r3, [r7, #16]
 800f836:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
 800f83a:	e038      	b.n	800f8ae <UFCP_RX_IRQ_Handler+0x132>
        }
        else
        {
          // read byte is for the "CRC"
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 800f83c:	693b      	ldr	r3, [r7, #16]
 800f83e:	7bfa      	ldrb	r2, [r7, #15]
 800f840:	f883 211b 	strb.w	r2, [r3, #283]	; 0x11b

          /* Need to ask the caller to stop our timeout... TODO: Is this really useful? */
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 800f844:	4b1e      	ldr	r3, [pc, #120]	; (800f8c0 <UFCP_RX_IRQ_Handler+0x144>)
 800f846:	617b      	str	r3, [r7, #20]

          /* Stop Rx Timeout */
          pBaseHandle->RxTimeoutCountdown = 0;
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	2200      	movs	r2, #0
 800f84c:	825a      	strh	r2, [r3, #18]
          /* Disable the reception IRQ */
          LL_USART_DisableIT_RXNE(pHandle->USARTx);
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f854:	4618      	mov	r0, r3
 800f856:	f7ff ff56 	bl	800f706 <LL_USART_DisableIT_RXNE_RXFNE>
          /* Indicate the reception is complete. */
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	2200      	movs	r2, #0
 800f85e:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

          /* Check the Control Sum */
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	3399      	adds	r3, #153	; 0x99
 800f866:	4618      	mov	r0, r3
 800f868:	f7fc fcc1 	bl	800c1ee <FCP_CalcCRC>
 800f86c:	4603      	mov	r3, r0
 800f86e:	461a      	mov	r2, r3
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	f893 311b 	ldrb.w	r3, [r3, #283]	; 0x11b
 800f876:	429a      	cmp	r2, r3
 800f878:	d10e      	bne.n	800f898 <UFCP_RX_IRQ_Handler+0x11c>
          {
            /* OK. the frame is considered correct. Let's forward to client. */
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800f87a:	693b      	ldr	r3, [r7, #16]
 800f87c:	689c      	ldr	r4, [r3, #8]
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	6818      	ldr	r0, [r3, #0]
 800f882:	693b      	ldr	r3, [r7, #16]
 800f884:	f893 1099 	ldrb.w	r1, [r3, #153]	; 0x99
                                                      pBaseHandle->RxFrame.Code,
                                                      pBaseHandle->RxFrame.Buffer,
 800f888:	693b      	ldr	r3, [r7, #16]
 800f88a:	f103 029b 	add.w	r2, r3, #155	; 0x9b
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800f88e:	693b      	ldr	r3, [r7, #16]
 800f890:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800f894:	47a0      	blx	r4
 800f896:	e00a      	b.n	800f8ae <UFCP_RX_IRQ_Handler+0x132>
                                                      pBaseHandle->RxFrame.Size );
          }
          else
          {
            error_code = FCP_MSG_RX_BAD_CRC;
 800f898:	230a      	movs	r3, #10
 800f89a:	73bb      	strb	r3, [r7, #14]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800f89c:	f107 020e 	add.w	r2, r7, #14
 800f8a0:	2301      	movs	r3, #1
 800f8a2:	21ff      	movs	r1, #255	; 0xff
 800f8a4:	6938      	ldr	r0, [r7, #16]
 800f8a6:	f000 f8a3 	bl	800f9f0 <UFCP_Send>
 800f8aa:	e000      	b.n	800f8ae <UFCP_RX_IRQ_Handler+0x132>
        break;
 800f8ac:	bf00      	nop
          }
        }
    } /* end of switch ( pBaseHandle->RxFrameLevel ) */
  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState ) */

  return ret_val;
 800f8ae:	697b      	ldr	r3, [r7, #20]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	371c      	adds	r7, #28
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd90      	pop	{r4, r7, pc}
 800f8b8:	0800feee 	.word	0x0800feee
 800f8bc:	0800fef0 	.word	0x0800fef0
 800f8c0:	0800fef2 	.word	0x0800fef2

0800f8c4 <UFCP_TX_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b084      	sub	sp, #16
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	60bb      	str	r3, [r7, #8]

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d050      	beq.n	800f97c <UFCP_TX_IRQ_Handler+0xb8>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d002      	beq.n	800f8ea <UFCP_TX_IRQ_Handler+0x26>
 800f8e4:	2b01      	cmp	r3, #1
 800f8e6:	d004      	beq.n	800f8f2 <UFCP_TX_IRQ_Handler+0x2e>
 800f8e8:	e007      	b.n	800f8fa <UFCP_TX_IRQ_Handler+0x36>
    {
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	7d1b      	ldrb	r3, [r3, #20]
 800f8ee:	81fb      	strh	r3, [r7, #14]
        break;
 800f8f0:	e019      	b.n	800f926 <UFCP_TX_IRQ_Handler+0x62>

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 800f8f2:	68bb      	ldr	r3, [r7, #8]
 800f8f4:	7d5b      	ldrb	r3, [r3, #21]
 800f8f6:	81fb      	strh	r3, [r7, #14]
        break;
 800f8f8:	e015      	b.n	800f926 <UFCP_TX_IRQ_Handler+0x62>

      default:
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800f8fa:	68bb      	ldr	r3, [r7, #8]
 800f8fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f900:	461a      	mov	r2, r3
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	7d5b      	ldrb	r3, [r3, #21]
 800f906:	3302      	adds	r3, #2
 800f908:	429a      	cmp	r2, r3
 800f90a:	da08      	bge.n	800f91e <UFCP_TX_IRQ_Handler+0x5a>
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f912:	3b02      	subs	r3, #2
 800f914:	68ba      	ldr	r2, [r7, #8]
 800f916:	4413      	add	r3, r2
 800f918:	7d9b      	ldrb	r3, [r3, #22]
 800f91a:	81fb      	strh	r3, [r7, #14]
 800f91c:	e003      	b.n	800f926 <UFCP_TX_IRQ_Handler+0x62>
        }
        else
        {
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800f924:	81fb      	strh	r3, [r7, #14]
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f92c:	89fa      	ldrh	r2, [r7, #14]
 800f92e:	b2d2      	uxtb	r2, r2
 800f930:	4611      	mov	r1, r2
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff ff07 	bl	800f746 <LL_USART_TransmitData8>

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f93e:	461a      	mov	r2, r3
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	7d5b      	ldrb	r3, [r3, #21]
 800f944:	3302      	adds	r3, #2
 800f946:	429a      	cmp	r2, r3
 800f948:	da08      	bge.n	800f95c <UFCP_TX_IRQ_Handler+0x98>
    {
      pBaseHandle->TxFrameLevel++;
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800f950:	3301      	adds	r3, #1
 800f952:	b2da      	uxtb	r2, r3
 800f954:	68bb      	ldr	r3, [r7, #8]
 800f956:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800f95a:	e00f      	b.n	800f97c <UFCP_TX_IRQ_Handler+0xb8>
      LL_USART_DisableIT_TXE(pHandle->USARTx);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f962:	4618      	mov	r0, r3
 800f964:	f7ff fedf 	bl	800f726 <LL_USART_DisableIT_TXE_TXFNF>
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 800f968:	68bb      	ldr	r3, [r7, #8]
 800f96a:	2200      	movs	r2, #0
 800f96c:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 800f970:	68bb      	ldr	r3, [r7, #8]
 800f972:	685b      	ldr	r3, [r3, #4]
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	6812      	ldr	r2, [r2, #0]
 800f978:	4610      	mov	r0, r2
 800f97a:	4798      	blx	r3
}
 800f97c:	bf00      	nop
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <UFCP_OVR_IRQ_Handler>:

/*
 *
 */
__weak void UFCP_OVR_IRQ_Handler( UFCP_Handle_t * pHandle )
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b084      	sub	sp, #16
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	60fb      	str	r3, [r7, #12]
  uint8_t error_code;

  error_code = UFCP_MSG_OVERRUN;
 800f990:	2308      	movs	r3, #8
 800f992:	72fb      	strb	r3, [r7, #11]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 800f994:	f107 020b 	add.w	r2, r7, #11
 800f998:	2301      	movs	r3, #1
 800f99a:	21ff      	movs	r1, #255	; 0xff
 800f99c:	68f8      	ldr	r0, [r7, #12]
 800f99e:	f000 f827 	bl	800f9f0 <UFCP_Send>

}
 800f9a2:	bf00      	nop
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <UFCP_Receive>:
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );

}

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b084      	sub	sp, #16
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d112      	bne.n	800f9e2 <UFCP_Receive+0x38>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	60bb      	str	r3, [r7, #8]

    pHandle->RxFrameLevel = 0;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2200      	movs	r2, #0
 800f9c4:	f883 211d 	strb.w	r2, [r3, #285]	; 0x11d
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7ff fe75 	bl	800f6c6 <LL_USART_EnableIT_RXNE_RXFNE>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800f9dc:	2302      	movs	r3, #2
 800f9de:	73fb      	strb	r3, [r7, #15]
 800f9e0:	e001      	b.n	800f9e6 <UFCP_Receive+0x3c>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800f9e2:	2301      	movs	r3, #1
 800f9e4:	73fb      	strb	r3, [r7, #15]
  }

  return ret_val;
 800f9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	3710      	adds	r7, #16
 800f9ec:	46bd      	mov	sp, r7
 800f9ee:	bd80      	pop	{r7, pc}

0800f9f0 <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b088      	sub	sp, #32
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	607a      	str	r2, [r7, #4]
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	72fb      	strb	r3, [r7, #11]
 800fa00:	4613      	mov	r3, r2
 800fa02:	72bb      	strb	r3, [r7, #10]
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	f893 3097 	ldrb.w	r3, [r3, #151]	; 0x97
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d133      	bne.n	800fa76 <UFCP_Send+0x86>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	617b      	str	r3, [r7, #20]
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	3316      	adds	r3, #22
 800fa16:	61bb      	str	r3, [r7, #24]

    pHandle->TxFrame.Code = code;
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	7afa      	ldrb	r2, [r7, #11]
 800fa1c:	751a      	strb	r2, [r3, #20]
    pHandle->TxFrame.Size = size;
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	7aba      	ldrb	r2, [r7, #10]
 800fa22:	755a      	strb	r2, [r3, #21]
    while ( size-- ) *dest++ = *buffer++;
 800fa24:	e007      	b.n	800fa36 <UFCP_Send+0x46>
 800fa26:	687a      	ldr	r2, [r7, #4]
 800fa28:	1c53      	adds	r3, r2, #1
 800fa2a:	607b      	str	r3, [r7, #4]
 800fa2c:	69bb      	ldr	r3, [r7, #24]
 800fa2e:	1c59      	adds	r1, r3, #1
 800fa30:	61b9      	str	r1, [r7, #24]
 800fa32:	7812      	ldrb	r2, [r2, #0]
 800fa34:	701a      	strb	r2, [r3, #0]
 800fa36:	7abb      	ldrb	r3, [r7, #10]
 800fa38:	1e5a      	subs	r2, r3, #1
 800fa3a:	72ba      	strb	r2, [r7, #10]
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d1f2      	bne.n	800fa26 <UFCP_Send+0x36>
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	3314      	adds	r3, #20
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7fc fbd2 	bl	800c1ee <FCP_CalcCRC>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	461a      	mov	r2, r3
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    pHandle->TxFrameLevel = 0;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2201      	movs	r2, #1
 800fa60:	f883 2097 	strb.w	r2, [r3, #151]	; 0x97

    LL_USART_EnableIT_TXE(pActualHandle->USARTx);
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7ff fe3b 	bl	800f6e6 <LL_USART_EnableIT_TXE_TXFNF>
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 800fa70:	2302      	movs	r3, #2
 800fa72:	77fb      	strb	r3, [r7, #31]
 800fa74:	e001      	b.n	800fa7a <UFCP_Send+0x8a>
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 800fa76:	2301      	movs	r3, #1
 800fa78:	77fb      	strb	r3, [r7, #31]
  }

  return ret_val;
 800fa7a:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3720      	adds	r7, #32
 800fa80:	46bd      	mov	sp, r7
 800fa82:	bd80      	pop	{r7, pc}

0800fa84 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
 800fa84:	b480      	push	{r7}
 800fa86:	b083      	sub	sp, #12
 800fa88:	af00      	add	r7, sp, #0
 800fa8a:	6078      	str	r0, [r7, #4]
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	2200      	movs	r2, #0
 800fa90:	f883 211c 	strb.w	r2, [r3, #284]	; 0x11c
}
 800fa94:	bf00      	nop
 800fa96:	370c      	adds	r7, #12
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <VSS_Init>:
* @brief  Software initialization of VirtualSpeedSensor component
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Init( VirtualSpeedSensor_Handle_t * pHandle )
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
#ifdef FASTDIV
  FD_Init( &( pHandle->fd ) );
#endif

  VSS_Clear( pHandle );
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f000 f804 	bl	800fab6 <VSS_Clear>
}
 800faae:	bf00      	nop
 800fab0:	3708      	adds	r7, #8
 800fab2:	46bd      	mov	sp, r7
 800fab4:	bd80      	pop	{r7, pc}

0800fab6 <VSS_Clear>:
*         of the motor.
* @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{
 800fab6:	b480      	push	{r7}
 800fab8:	b083      	sub	sp, #12
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]

  pHandle->_Super.bSpeedErrorNumber = 0u;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2200      	movs	r2, #0
 800fac2:	701a      	strb	r2, [r3, #0]
  pHandle->_Super.hElAngle = 0;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2200      	movs	r2, #0
 800fac8:	809a      	strh	r2, [r3, #4]
  pHandle->_Super.hMecAngle = 0;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	2200      	movs	r2, #0
 800face:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	2200      	movs	r2, #0
 800fad4:	819a      	strh	r2, [r3, #12]
  pHandle->_Super.hElSpeedDpp = 0;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	2200      	movs	r2, #0
 800fada:	81da      	strh	r2, [r3, #14]
  pHandle->_Super.hMecAccelUnitP = 0;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	825a      	strh	r2, [r3, #18]
  pHandle->_Super.bSpeedErrorNumber = 0u;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2200      	movs	r2, #0
 800fae6:	701a      	strb	r2, [r3, #0]

  pHandle->wElAccDppP32 = 0;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	621a      	str	r2, [r3, #32]
  pHandle->wElSpeedDpp32 = 0;
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	2200      	movs	r2, #0
 800faf2:	625a      	str	r2, [r3, #36]	; 0x24
  pHandle->hRemainingStep = 0u;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2200      	movs	r2, #0
 800faf8:	851a      	strh	r2, [r3, #40]	; 0x28
  pHandle->hElAngleAccu = 0;
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2200      	movs	r2, #0
 800fafe:	861a      	strh	r2, [r3, #48]	; 0x30

  pHandle->bTransitionStarted = false;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  pHandle->bTransitionEnded = false;
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	f9b3 2036 	ldrsh.w	r2, [r3, #54]	; 0x36
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	85da      	strh	r2, [r3, #46]	; 0x2e
  pHandle->bTransitionLocked = false;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	2200      	movs	r2, #0
 800fb1e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32

  pHandle->bCopyObserver = false;
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2200      	movs	r2, #0
 800fb26:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 800fb2a:	bf00      	nop
 800fb2c:	370c      	adds	r7, #12
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb34:	4770      	bx	lr

0800fb36 <VSS_SetMecAngle>:
  * @param  pHandle: handler of the current instance of the VirtualSpeedSensor component
  * @param  hMecAngle istantaneous measure of rotor mechanical angle
  * @retval none
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{
 800fb36:	b480      	push	{r7}
 800fb38:	b083      	sub	sp, #12
 800fb3a:	af00      	add	r7, sp, #0
 800fb3c:	6078      	str	r0, [r7, #4]
 800fb3e:	460b      	mov	r3, r1
 800fb40:	807b      	strh	r3, [r7, #2]

  pHandle->hElAngleAccu = hMecAngle;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	887a      	ldrh	r2, [r7, #2]
 800fb46:	861a      	strh	r2, [r3, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fb4e:	461a      	mov	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	785b      	ldrb	r3, [r3, #1]
 800fb54:	fb92 f3f3 	sdiv	r3, r2, r3
 800fb58:	b21a      	sxth	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	80da      	strh	r2, [r3, #6]
  pHandle->_Super.hElAngle = hMecAngle;
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	887a      	ldrh	r2, [r7, #2]
 800fb62:	809a      	strh	r2, [r3, #4]
}
 800fb64:	bf00      	nop
 800fb66:	370c      	adds	r7, #12
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6e:	4770      	bx	lr

0800fb70 <VSS_SetMecAcceleration>:
            instantaneous the final speed.
  * @retval none
  */
__weak void  VSS_SetMecAcceleration( VirtualSpeedSensor_Handle_t * pHandle, int16_t  hFinalMecSpeedUnit,
                              uint16_t hDurationms )
{
 800fb70:	b480      	push	{r7}
 800fb72:	b087      	sub	sp, #28
 800fb74:	af00      	add	r7, sp, #0
 800fb76:	6078      	str	r0, [r7, #4]
 800fb78:	460b      	mov	r3, r1
 800fb7a:	807b      	strh	r3, [r7, #2]
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	803b      	strh	r3, [r7, #0]
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fb86:	f083 0301 	eor.w	r3, r3, #1
 800fb8a:	b2db      	uxtb	r3, r3
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d06f      	beq.n	800fc70 <VSS_SetMecAcceleration+0x100>
  {
    if ( hDurationms == 0u )
 800fb90:	883b      	ldrh	r3, [r7, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d128      	bne.n	800fbe8 <VSS_SetMecAcceleration+0x78>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	887a      	ldrh	r2, [r7, #2]
 800fb9a:	819a      	strh	r2, [r3, #12]

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800fb9c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800fba0:	687a      	ldr	r2, [r7, #4]
 800fba2:	69d2      	ldr	r2, [r2, #28]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800fba4:	fb02 f203 	mul.w	r2, r2, r3
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	8b5b      	ldrh	r3, [r3, #26]
 800fbac:	4619      	mov	r1, r3
 800fbae:	460b      	mov	r3, r1
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	440b      	add	r3, r1
 800fbb4:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800fbb6:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 800fbba:	b21a      	sxth	r2, r3
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	81da      	strh	r2, [r3, #14]

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	785b      	ldrb	r3, [r3, #1]
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	fb12 f303 	smulbb	r3, r2, r3
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	b21a      	sxth	r2, r3
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	81da      	strh	r2, [r3, #14]

      pHandle->hRemainingStep = 0u;
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	2200      	movs	r2, #0
 800fbde:	851a      	strh	r2, [r3, #40]	; 0x28

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	887a      	ldrh	r2, [r7, #2]
 800fbe4:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 800fbe6:	e043      	b.n	800fc70 <VSS_SetMecAcceleration+0x100>
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800fbe8:	883b      	ldrh	r3, [r7, #0]
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	8e92      	ldrh	r2, [r2, #52]	; 0x34
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800fbee:	fb02 f303 	mul.w	r3, r2, r3
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 800fbf2:	4a22      	ldr	r2, [pc, #136]	; (800fc7c <VSS_SetMecAcceleration+0x10c>)
 800fbf4:	fba2 2303 	umull	r2, r3, r2, r3
 800fbf8:	099b      	lsrs	r3, r3, #6
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 800fbfa:	82fb      	strh	r3, [r7, #22]
      hNbrStep++;
 800fbfc:	8afb      	ldrh	r3, [r7, #22]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	82fb      	strh	r3, [r7, #22]
      pHandle->hRemainingStep = hNbrStep;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	8afa      	ldrh	r2, [r7, #22]
 800fc06:	851a      	strh	r2, [r3, #40]	; 0x28
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fc0e:	461a      	mov	r2, r3
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	785b      	ldrb	r3, [r3, #1]
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 800fc14:	fb92 f3f3 	sdiv	r3, r2, r3
 800fc18:	82bb      	strh	r3, [r7, #20]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800fc1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc1e:	687a      	ldr	r2, [r7, #4]
 800fc20:	69d2      	ldr	r2, [r2, #28]
 800fc22:	fb02 f203 	mul.w	r2, r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	8b5b      	ldrh	r3, [r3, #26]
 800fc2a:	4619      	mov	r1, r3
 800fc2c:	460b      	mov	r3, r1
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	440b      	add	r3, r1
 800fc32:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 800fc34:	fb92 f3f3 	sdiv	r3, r2, r3
 800fc38:	827b      	strh	r3, [r7, #18]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800fc3a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800fc3e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800fc42:	1ad3      	subs	r3, r2, r3
 800fc44:	041a      	lsls	r2, r3, #16
                        ( int32_t )65536 ) / ( int32_t )hNbrStep;
 800fc46:	8afb      	ldrh	r3, [r7, #22]
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 800fc48:	fb92 f3f3 	sdiv	r3, r2, r3
 800fc4c:	60fb      	str	r3, [r7, #12]
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	785b      	ldrb	r3, [r3, #1]
 800fc52:	461a      	mov	r2, r3
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	fb03 f202 	mul.w	r2, r3, r2
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	621a      	str	r2, [r3, #32]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	887a      	ldrh	r2, [r7, #2]
 800fc62:	855a      	strh	r2, [r3, #42]	; 0x2a
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800fc6a:	041a      	lsls	r2, r3, #16
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	625a      	str	r2, [r3, #36]	; 0x24
}
 800fc70:	bf00      	nop
 800fc72:	371c      	adds	r7, #28
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr
 800fc7c:	10624dd3 	.word	0x10624dd3

0800fc80 <RUC_SetPhaseDurationms>:
 800fc80:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fc84:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc88:	818a      	strh	r2, [r1, #12]
 800fc8a:	4770      	bx	lr

0800fc8c <RUC_SetPhaseFinalMecSpeedUnit>:
 800fc8c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fc90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fc94:	81ca      	strh	r2, [r1, #14]
 800fc96:	4770      	bx	lr

0800fc98 <RUC_SetPhaseFinalTorque>:
 800fc98:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fc9c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fca0:	820a      	strh	r2, [r1, #16]
 800fca2:	4770      	bx	lr

0800fca4 <RUC_GetPhaseDurationms>:
 800fca4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fca8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcac:	8988      	ldrh	r0, [r1, #12]
 800fcae:	4770      	bx	lr

0800fcb0 <RUC_GetPhaseFinalMecSpeedUnit>:
 800fcb0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fcb4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcb8:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 800fcbc:	4770      	bx	lr
 800fcbe:	bf00      	nop

0800fcc0 <RUC_GetPhaseFinalTorque>:
 800fcc0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800fcc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fcc8:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 800fccc:	4770      	bx	lr
 800fcce:	bf00      	nop

0800fcd0 <RUC_GetNumberOfPhases>:
 800fcd0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop

0800fcd8 <__libc_init_array>:
 800fcd8:	b570      	push	{r4, r5, r6, lr}
 800fcda:	4e0d      	ldr	r6, [pc, #52]	; (800fd10 <__libc_init_array+0x38>)
 800fcdc:	4c0d      	ldr	r4, [pc, #52]	; (800fd14 <__libc_init_array+0x3c>)
 800fcde:	1ba4      	subs	r4, r4, r6
 800fce0:	10a4      	asrs	r4, r4, #2
 800fce2:	2500      	movs	r5, #0
 800fce4:	42a5      	cmp	r5, r4
 800fce6:	d109      	bne.n	800fcfc <__libc_init_array+0x24>
 800fce8:	4e0b      	ldr	r6, [pc, #44]	; (800fd18 <__libc_init_array+0x40>)
 800fcea:	4c0c      	ldr	r4, [pc, #48]	; (800fd1c <__libc_init_array+0x44>)
 800fcec:	f000 f820 	bl	800fd30 <_init>
 800fcf0:	1ba4      	subs	r4, r4, r6
 800fcf2:	10a4      	asrs	r4, r4, #2
 800fcf4:	2500      	movs	r5, #0
 800fcf6:	42a5      	cmp	r5, r4
 800fcf8:	d105      	bne.n	800fd06 <__libc_init_array+0x2e>
 800fcfa:	bd70      	pop	{r4, r5, r6, pc}
 800fcfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fd00:	4798      	blx	r3
 800fd02:	3501      	adds	r5, #1
 800fd04:	e7ee      	b.n	800fce4 <__libc_init_array+0xc>
 800fd06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fd0a:	4798      	blx	r3
 800fd0c:	3501      	adds	r5, #1
 800fd0e:	e7f2      	b.n	800fcf6 <__libc_init_array+0x1e>
 800fd10:	0800fefc 	.word	0x0800fefc
 800fd14:	0800fefc 	.word	0x0800fefc
 800fd18:	0800fefc 	.word	0x0800fefc
 800fd1c:	0800ff00 	.word	0x0800ff00

0800fd20 <memset>:
 800fd20:	4402      	add	r2, r0
 800fd22:	4603      	mov	r3, r0
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d100      	bne.n	800fd2a <memset+0xa>
 800fd28:	4770      	bx	lr
 800fd2a:	f803 1b01 	strb.w	r1, [r3], #1
 800fd2e:	e7f9      	b.n	800fd24 <memset+0x4>

0800fd30 <_init>:
 800fd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd32:	bf00      	nop
 800fd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd36:	bc08      	pop	{r3}
 800fd38:	469e      	mov	lr, r3
 800fd3a:	4770      	bx	lr

0800fd3c <_fini>:
 800fd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd3e:	bf00      	nop
 800fd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd42:	bc08      	pop	{r3}
 800fd44:	469e      	mov	lr, r3
 800fd46:	4770      	bx	lr
